/*
 * Copyright (c) 2009-2019 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     /home/nri/Uni/Semester_3/Rechnerorganisation/Labor/labor_4/level/STM32F042x.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     25. January 2020
 * @note     Generated by SVDConv V3.3.27 on Saturday, 25.01.2020 10:15:59
 *           from File '../STM32F042x.svd',
 */



/** @addtogroup 
  * @{
  */


/** @addtogroup STM32F042x
  * @{
  */


#ifndef STM32F042X_H
#define STM32F042X_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/* following defines should be used for structure members */
#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */

/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =========================================  STM32F042x Specific Interrupt Numbers  ========================================= */
  WWDG_IRQn                 =   0,              /*!< 0  Window Watchdog interrupt                                              */
  PVD_IRQn                  =   1,              /*!< 1  PVD and VDDIO2 supply comparator interrupt                             */
  RTC_IRQn                  =   2,              /*!< 2  RTC interrupts                                                         */
  FLASH_IRQn                =   3,              /*!< 3  Flash global interrupt                                                 */
  RCC_CRS_IRQn              =   4,              /*!< 4  RCC and CRS global interrupts                                          */
  EXTI0_1_IRQn              =   5,              /*!< 5  EXTI Line[1:0] interrupts                                              */
  EXTI2_3_IRQn              =   6,              /*!< 6  EXTI Line[3:2] interrupts                                              */
  EXTI4_15_IRQn             =   7,              /*!< 7  EXTI Line15 and EXTI4 interrupts                                       */
  TSC_IRQn                  =   8,              /*!< 8  Touch sensing interrupt                                                */
  DMA_CH1_IRQn              =   9,              /*!< 9  DMA channel 1 interrupt                                                */
  DMA_CH2_3_IRQn            =  10,              /*!< 10 DMA channel 2 and 3 interrupts                                         */
  DMA_CH4_5_6_7_IRQn        =  11,              /*!< 11 DMA channel 4, 5, 6 and 7 interrupts                                   */
  ADC_COMP_IRQn             =  12,              /*!< 12 ADC and comparator interrupts                                          */
  TIM1_BRK_UP_TRG_COM_IRQn  =  13,              /*!< 13 TIM1 break, update, trigger and commutation interrupt                  */
  TIM1_CC_IRQn              =  14,              /*!< 14 TIM1 Capture Compare interrupt                                         */
  TIM2_IRQn                 =  15,              /*!< 15 TIM2 global interrupt                                                  */
  TIM3_IRQn                 =  16,              /*!< 16 TIM3 global interrupt                                                  */
  TIM14_IRQn                =  19,              /*!< 19 TIM14 global interrupt                                                 */
  TIM16_IRQn                =  21,              /*!< 21 TIM16 global interrupt                                                 */
  TIM17_IRQn                =  22,              /*!< 22 TIM17 global interrupt                                                 */
  I2C1_IRQn                 =  23,              /*!< 23 I2C1 global interrupt                                                  */
  SPI1_IRQn                 =  25,              /*!< 25 SPI1_global_interrupt                                                  */
  SPI2_IRQn                 =  26,              /*!< 26 SPI2 global interrupt                                                  */
  USART1_IRQn               =  27,              /*!< 27 USART1 global interrupt                                                */
  USART2_IRQn               =  28,              /*!< 28 USART2 global interrupt                                                */
  CEC_CAN_IRQn              =  30,              /*!< 30 CEC and CAN global interrupt                                           */
  USB_IRQn                  =  31               /*!< 31 USB global interrupt                                                   */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* =============================  Configuration of the undefined Processor and Core Peripherals  ============================= */
#define __UNDEF_REV                 0x0000U     /*!< undef Core Revision                                                       */
#define __NVIC_PRIO_BITS               0        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */


/** @} */ /* End of group Configuration_of_CMSIS */



/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief cyclic redundancy check calculation       unit (CRC)
  */

typedef struct {                                /*!< (@ 0x40023000) CRC Structure                                              */
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000000) Data register                                              */
    
    struct {
      __IOM uint32_t DR         : 32;           /*!< [31..0] Data register bits                                                */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t IDR;                         /*!< (@ 0x00000004) Independent data register                                  */
    
    struct {
      __IOM uint32_t IDR        : 8;            /*!< [7..0] General-purpose 8-bit data register bits                           */
    } IDR_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000008) Control register                                           */
    
    struct {
      __IOM uint32_t RESET      : 1;            /*!< [0..0] reset bit                                                          */
      __IM  uint32_t            : 4;
      __IOM uint32_t REV_IN     : 2;            /*!< [6..5] Reverse input data                                                 */
      __IOM uint32_t REV_OUT    : 1;            /*!< [7..7] Reverse output data                                                */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t INIT;                        /*!< (@ 0x0000000C) Initial CRC value                                          */
    
    struct {
      __IOM uint32_t INIT       : 32;           /*!< [31..0] Programmable initial CRC value                                    */
    } INIT_b;
  } ;
} CRC_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOF                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOF)
  */

typedef struct {                                /*!< (@ 0x48001400) GPIOF Structure                                            */
  
  union {
    __IOM uint32_t MODER;                       /*!< (@ 0x00000000) GPIO port mode register                                    */
    
    struct {
      __IOM uint32_t MODER0     : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t MODER1     : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t MODER2     : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t MODER3     : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t MODER4     : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t MODER5     : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER6     : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER7     : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER8     : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER9     : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER10    : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER11    : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER12    : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER13    : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER14    : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER15    : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } MODER_b;
  } ;
  
  union {
    __IOM uint32_t OTYPER;                      /*!< (@ 0x00000004) GPIO port output type register                             */
    
    struct {
      __IOM uint32_t OT0        : 1;            /*!< [0..0] Port x configuration bit 0                                         */
      __IOM uint32_t OT1        : 1;            /*!< [1..1] Port x configuration bit 1                                         */
      __IOM uint32_t OT2        : 1;            /*!< [2..2] Port x configuration bit 2                                         */
      __IOM uint32_t OT3        : 1;            /*!< [3..3] Port x configuration bit 3                                         */
      __IOM uint32_t OT4        : 1;            /*!< [4..4] Port x configuration bit 4                                         */
      __IOM uint32_t OT5        : 1;            /*!< [5..5] Port x configuration bit 5                                         */
      __IOM uint32_t OT6        : 1;            /*!< [6..6] Port x configuration bit 6                                         */
      __IOM uint32_t OT7        : 1;            /*!< [7..7] Port x configuration bit 7                                         */
      __IOM uint32_t OT8        : 1;            /*!< [8..8] Port x configuration bit 8                                         */
      __IOM uint32_t OT9        : 1;            /*!< [9..9] Port x configuration bit 9                                         */
      __IOM uint32_t OT10       : 1;            /*!< [10..10] Port x configuration bit 10                                      */
      __IOM uint32_t OT11       : 1;            /*!< [11..11] Port x configuration bit 11                                      */
      __IOM uint32_t OT12       : 1;            /*!< [12..12] Port x configuration bit 12                                      */
      __IOM uint32_t OT13       : 1;            /*!< [13..13] Port x configuration bit 13                                      */
      __IOM uint32_t OT14       : 1;            /*!< [14..14] Port x configuration bit 14                                      */
      __IOM uint32_t OT15       : 1;            /*!< [15..15] Port x configuration bit 15                                      */
    } OTYPER_b;
  } ;
  
  union {
    __IOM uint32_t OSPEEDR;                     /*!< (@ 0x00000008) GPIO port output speed register                            */
    
    struct {
      __IOM uint32_t OSPEEDR0   : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OSPEEDR1   : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OSPEEDR2   : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OSPEEDR3   : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OSPEEDR4   : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OSPEEDR5   : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR6   : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR7   : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR8   : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR9   : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR10  : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR11  : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR12  : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR13  : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR14  : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR15  : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } OSPEEDR_b;
  } ;
  
  union {
    __IOM uint32_t PUPDR;                       /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
    
    struct {
      __IOM uint32_t PUPDR0     : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t PUPDR1     : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t PUPDR2     : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t PUPDR3     : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t PUPDR4     : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t PUPDR5     : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR6     : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR7     : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR8     : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR9     : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR10    : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR11    : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR12    : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR13    : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR14    : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR15    : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } PUPDR_b;
  } ;
  
  union {
    __IM  uint32_t IDR;                         /*!< (@ 0x00000010) GPIO port input data register                              */
    
    struct {
      __IM  uint32_t IDR0       : 1;            /*!< [0..0] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR1       : 1;            /*!< [1..1] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR2       : 1;            /*!< [2..2] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR3       : 1;            /*!< [3..3] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR4       : 1;            /*!< [4..4] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR5       : 1;            /*!< [5..5] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR6       : 1;            /*!< [6..6] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR7       : 1;            /*!< [7..7] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR8       : 1;            /*!< [8..8] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR9       : 1;            /*!< [9..9] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR10      : 1;            /*!< [10..10] Port input data (y = 0..15)                                      */
      __IM  uint32_t IDR11      : 1;            /*!< [11..11] Port input data (y = 0..15)                                      */
      __IM  uint32_t IDR12      : 1;            /*!< [12..12] Port input data (y = 0..15)                                      */
      __IM  uint32_t IDR13      : 1;            /*!< [13..13] Port input data (y = 0..15)                                      */
      __IM  uint32_t IDR14      : 1;            /*!< [14..14] Port input data (y = 0..15)                                      */
      __IM  uint32_t IDR15      : 1;            /*!< [15..15] Port input data (y = 0..15)                                      */
    } IDR_b;
  } ;
  
  union {
    __IOM uint32_t ODR;                         /*!< (@ 0x00000014) GPIO port output data register                             */
    
    struct {
      __IOM uint32_t ODR0       : 1;            /*!< [0..0] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR1       : 1;            /*!< [1..1] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR2       : 1;            /*!< [2..2] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR3       : 1;            /*!< [3..3] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR4       : 1;            /*!< [4..4] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR5       : 1;            /*!< [5..5] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR6       : 1;            /*!< [6..6] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR7       : 1;            /*!< [7..7] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR8       : 1;            /*!< [8..8] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR9       : 1;            /*!< [9..9] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR10      : 1;            /*!< [10..10] Port output data (y = 0..15)                                     */
      __IOM uint32_t ODR11      : 1;            /*!< [11..11] Port output data (y = 0..15)                                     */
      __IOM uint32_t ODR12      : 1;            /*!< [12..12] Port output data (y = 0..15)                                     */
      __IOM uint32_t ODR13      : 1;            /*!< [13..13] Port output data (y = 0..15)                                     */
      __IOM uint32_t ODR14      : 1;            /*!< [14..14] Port output data (y = 0..15)                                     */
      __IOM uint32_t ODR15      : 1;            /*!< [15..15] Port output data (y = 0..15)                                     */
    } ODR_b;
  } ;
  
  union {
    __OM  uint32_t BSRR;                        /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
    
    struct {
      __OM  uint32_t BS0        : 1;            /*!< [0..0] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS1        : 1;            /*!< [1..1] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS2        : 1;            /*!< [2..2] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS3        : 1;            /*!< [3..3] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS4        : 1;            /*!< [4..4] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS5        : 1;            /*!< [5..5] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS6        : 1;            /*!< [6..6] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS7        : 1;            /*!< [7..7] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS8        : 1;            /*!< [8..8] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS9        : 1;            /*!< [9..9] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS10       : 1;            /*!< [10..10] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BS11       : 1;            /*!< [11..11] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BS12       : 1;            /*!< [12..12] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BS13       : 1;            /*!< [13..13] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BS14       : 1;            /*!< [14..14] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BS15       : 1;            /*!< [15..15] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BR0        : 1;            /*!< [16..16] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BR1        : 1;            /*!< [17..17] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR2        : 1;            /*!< [18..18] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR3        : 1;            /*!< [19..19] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR4        : 1;            /*!< [20..20] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR5        : 1;            /*!< [21..21] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR6        : 1;            /*!< [22..22] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR7        : 1;            /*!< [23..23] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR8        : 1;            /*!< [24..24] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR9        : 1;            /*!< [25..25] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR10       : 1;            /*!< [26..26] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR11       : 1;            /*!< [27..27] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR12       : 1;            /*!< [28..28] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR13       : 1;            /*!< [29..29] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR14       : 1;            /*!< [30..30] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR15       : 1;            /*!< [31..31] Port x reset bit y (y = 0..15)                                   */
    } BSRR_b;
  } ;
  
  union {
    __IOM uint32_t LCKR;                        /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
    
    struct {
      __IOM uint32_t LCK0       : 1;            /*!< [0..0] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK1       : 1;            /*!< [1..1] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK2       : 1;            /*!< [2..2] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK3       : 1;            /*!< [3..3] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK4       : 1;            /*!< [4..4] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK5       : 1;            /*!< [5..5] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK6       : 1;            /*!< [6..6] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK7       : 1;            /*!< [7..7] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK8       : 1;            /*!< [8..8] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK9       : 1;            /*!< [9..9] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK10      : 1;            /*!< [10..10] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32_t LCK11      : 1;            /*!< [11..11] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32_t LCK12      : 1;            /*!< [12..12] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32_t LCK13      : 1;            /*!< [13..13] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32_t LCK14      : 1;            /*!< [14..14] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32_t LCK15      : 1;            /*!< [15..15] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32_t LCKK       : 1;            /*!< [16..16] Port x lock bit y                                                */
    } LCKR_b;
  } ;
  
  union {
    __IOM uint32_t AFRL;                        /*!< (@ 0x00000020) GPIO alternate function low register                       */
    
    struct {
      __IOM uint32_t AFRL0      : 4;            /*!< [3..0] Alternate function selection for port x bit y (y = 0..7)           */
      __IOM uint32_t AFRL1      : 4;            /*!< [7..4] Alternate function selection for port x bit y (y = 0..7)           */
      __IOM uint32_t AFRL2      : 4;            /*!< [11..8] Alternate function selection for port x bit y (y = 0..7)          */
      __IOM uint32_t AFRL3      : 4;            /*!< [15..12] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32_t AFRL4      : 4;            /*!< [19..16] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32_t AFRL5      : 4;            /*!< [23..20] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32_t AFRL6      : 4;            /*!< [27..24] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32_t AFRL7      : 4;            /*!< [31..28] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
    } AFRL_b;
  } ;
  
  union {
    __IOM uint32_t AFRH;                        /*!< (@ 0x00000024) GPIO alternate function high register                      */
    
    struct {
      __IOM uint32_t AFRH8      : 4;            /*!< [3..0] Alternate function selection for port x bit y (y = 8..15)          */
      __IOM uint32_t AFRH9      : 4;            /*!< [7..4] Alternate function selection for port x bit y (y = 8..15)          */
      __IOM uint32_t AFRH10     : 4;            /*!< [11..8] Alternate function selection for port x bit y (y = 8..15)         */
      __IOM uint32_t AFRH11     : 4;            /*!< [15..12] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32_t AFRH12     : 4;            /*!< [19..16] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32_t AFRH13     : 4;            /*!< [23..20] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32_t AFRH14     : 4;            /*!< [27..24] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32_t AFRH15     : 4;            /*!< [31..28] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
    } AFRH_b;
  } ;
  
  union {
    __OM  uint32_t BRR;                         /*!< (@ 0x00000028) Port bit reset register                                    */
    
    struct {
      __OM  uint32_t BR0        : 1;            /*!< [0..0] Port x Reset bit y                                                 */
      __OM  uint32_t BR1        : 1;            /*!< [1..1] Port x Reset bit y                                                 */
      __OM  uint32_t BR2        : 1;            /*!< [2..2] Port x Reset bit y                                                 */
      __OM  uint32_t BR3        : 1;            /*!< [3..3] Port x Reset bit y                                                 */
      __OM  uint32_t BR4        : 1;            /*!< [4..4] Port x Reset bit y                                                 */
      __OM  uint32_t BR5        : 1;            /*!< [5..5] Port x Reset bit y                                                 */
      __OM  uint32_t BR6        : 1;            /*!< [6..6] Port x Reset bit y                                                 */
      __OM  uint32_t BR7        : 1;            /*!< [7..7] Port x Reset bit y                                                 */
      __OM  uint32_t BR8        : 1;            /*!< [8..8] Port x Reset bit y                                                 */
      __OM  uint32_t BR9        : 1;            /*!< [9..9] Port x Reset bit y                                                 */
      __OM  uint32_t BR10       : 1;            /*!< [10..10] Port x Reset bit y                                               */
      __OM  uint32_t BR11       : 1;            /*!< [11..11] Port x Reset bit y                                               */
      __OM  uint32_t BR12       : 1;            /*!< [12..12] Port x Reset bit y                                               */
      __OM  uint32_t BR13       : 1;            /*!< [13..13] Port x Reset bit y                                               */
      __OM  uint32_t BR14       : 1;            /*!< [14..14] Port x Reset bit y                                               */
      __OM  uint32_t BR15       : 1;            /*!< [15..15] Port x Reset bit y                                               */
    } BRR_b;
  } ;
} GPIOF_Type;                                   /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOA                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOA)
  */

typedef struct {                                /*!< (@ 0x48000000) GPIOA Structure                                            */
  
  union {
    __IOM uint32_t MODER;                       /*!< (@ 0x00000000) GPIO port mode register                                    */
    
    struct {
      __IOM uint32_t MODER0     : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t MODER1     : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t MODER2     : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t MODER3     : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t MODER4     : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t MODER5     : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER6     : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER7     : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER8     : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER9     : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER10    : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER11    : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER12    : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER13    : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER14    : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t MODER15    : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } MODER_b;
  } ;
  
  union {
    __IOM uint32_t OTYPER;                      /*!< (@ 0x00000004) GPIO port output type register                             */
    
    struct {
      __IOM uint32_t OT0        : 1;            /*!< [0..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OT1        : 1;            /*!< [1..1] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OT2        : 1;            /*!< [2..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OT3        : 1;            /*!< [3..3] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OT4        : 1;            /*!< [4..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OT5        : 1;            /*!< [5..5] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OT6        : 1;            /*!< [6..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OT7        : 1;            /*!< [7..7] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OT8        : 1;            /*!< [8..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OT9        : 1;            /*!< [9..9] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OT10       : 1;            /*!< [10..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OT11       : 1;            /*!< [11..11] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OT12       : 1;            /*!< [12..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OT13       : 1;            /*!< [13..13] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OT14       : 1;            /*!< [14..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OT15       : 1;            /*!< [15..15] Port x configuration bits (y = 0..15)                            */
    } OTYPER_b;
  } ;
  
  union {
    __IOM uint32_t OSPEEDR;                     /*!< (@ 0x00000008) GPIO port output speed register                            */
    
    struct {
      __IOM uint32_t OSPEEDR0   : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OSPEEDR1   : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OSPEEDR2   : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OSPEEDR3   : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OSPEEDR4   : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t OSPEEDR5   : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR6   : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR7   : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR8   : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR9   : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR10  : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR11  : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR12  : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR13  : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR14  : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t OSPEEDR15  : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } OSPEEDR_b;
  } ;
  
  union {
    __IOM uint32_t PUPDR;                       /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
    
    struct {
      __IOM uint32_t PUPDR0     : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t PUPDR1     : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t PUPDR2     : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t PUPDR3     : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t PUPDR4     : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32_t PUPDR5     : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR6     : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR7     : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR8     : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR9     : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR10    : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR11    : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR12    : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR13    : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR14    : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32_t PUPDR15    : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } PUPDR_b;
  } ;
  
  union {
    __IM  uint32_t IDR;                         /*!< (@ 0x00000010) GPIO port input data register                              */
    
    struct {
      __IM  uint32_t IDR0       : 1;            /*!< [0..0] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR1       : 1;            /*!< [1..1] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR2       : 1;            /*!< [2..2] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR3       : 1;            /*!< [3..3] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR4       : 1;            /*!< [4..4] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR5       : 1;            /*!< [5..5] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR6       : 1;            /*!< [6..6] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR7       : 1;            /*!< [7..7] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR8       : 1;            /*!< [8..8] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR9       : 1;            /*!< [9..9] Port input data (y = 0..15)                                        */
      __IM  uint32_t IDR10      : 1;            /*!< [10..10] Port input data (y = 0..15)                                      */
      __IM  uint32_t IDR11      : 1;            /*!< [11..11] Port input data (y = 0..15)                                      */
      __IM  uint32_t IDR12      : 1;            /*!< [12..12] Port input data (y = 0..15)                                      */
      __IM  uint32_t IDR13      : 1;            /*!< [13..13] Port input data (y = 0..15)                                      */
      __IM  uint32_t IDR14      : 1;            /*!< [14..14] Port input data (y = 0..15)                                      */
      __IM  uint32_t IDR15      : 1;            /*!< [15..15] Port input data (y = 0..15)                                      */
    } IDR_b;
  } ;
  
  union {
    __IOM uint32_t ODR;                         /*!< (@ 0x00000014) GPIO port output data register                             */
    
    struct {
      __IOM uint32_t ODR0       : 1;            /*!< [0..0] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR1       : 1;            /*!< [1..1] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR2       : 1;            /*!< [2..2] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR3       : 1;            /*!< [3..3] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR4       : 1;            /*!< [4..4] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR5       : 1;            /*!< [5..5] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR6       : 1;            /*!< [6..6] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR7       : 1;            /*!< [7..7] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR8       : 1;            /*!< [8..8] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR9       : 1;            /*!< [9..9] Port output data (y = 0..15)                                       */
      __IOM uint32_t ODR10      : 1;            /*!< [10..10] Port output data (y = 0..15)                                     */
      __IOM uint32_t ODR11      : 1;            /*!< [11..11] Port output data (y = 0..15)                                     */
      __IOM uint32_t ODR12      : 1;            /*!< [12..12] Port output data (y = 0..15)                                     */
      __IOM uint32_t ODR13      : 1;            /*!< [13..13] Port output data (y = 0..15)                                     */
      __IOM uint32_t ODR14      : 1;            /*!< [14..14] Port output data (y = 0..15)                                     */
      __IOM uint32_t ODR15      : 1;            /*!< [15..15] Port output data (y = 0..15)                                     */
    } ODR_b;
  } ;
  
  union {
    __OM  uint32_t BSRR;                        /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
    
    struct {
      __OM  uint32_t BS0        : 1;            /*!< [0..0] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS1        : 1;            /*!< [1..1] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS2        : 1;            /*!< [2..2] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS3        : 1;            /*!< [3..3] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS4        : 1;            /*!< [4..4] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS5        : 1;            /*!< [5..5] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS6        : 1;            /*!< [6..6] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS7        : 1;            /*!< [7..7] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS8        : 1;            /*!< [8..8] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS9        : 1;            /*!< [9..9] Port x set bit y (y= 0..15)                                        */
      __OM  uint32_t BS10       : 1;            /*!< [10..10] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BS11       : 1;            /*!< [11..11] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BS12       : 1;            /*!< [12..12] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BS13       : 1;            /*!< [13..13] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BS14       : 1;            /*!< [14..14] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BS15       : 1;            /*!< [15..15] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BR0        : 1;            /*!< [16..16] Port x set bit y (y= 0..15)                                      */
      __OM  uint32_t BR1        : 1;            /*!< [17..17] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR2        : 1;            /*!< [18..18] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR3        : 1;            /*!< [19..19] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR4        : 1;            /*!< [20..20] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR5        : 1;            /*!< [21..21] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR6        : 1;            /*!< [22..22] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR7        : 1;            /*!< [23..23] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR8        : 1;            /*!< [24..24] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR9        : 1;            /*!< [25..25] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR10       : 1;            /*!< [26..26] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR11       : 1;            /*!< [27..27] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR12       : 1;            /*!< [28..28] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR13       : 1;            /*!< [29..29] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR14       : 1;            /*!< [30..30] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32_t BR15       : 1;            /*!< [31..31] Port x reset bit y (y = 0..15)                                   */
    } BSRR_b;
  } ;
  
  union {
    __IOM uint32_t LCKR;                        /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
    
    struct {
      __IOM uint32_t LCK0       : 1;            /*!< [0..0] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK1       : 1;            /*!< [1..1] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK2       : 1;            /*!< [2..2] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK3       : 1;            /*!< [3..3] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK4       : 1;            /*!< [4..4] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK5       : 1;            /*!< [5..5] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK6       : 1;            /*!< [6..6] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK7       : 1;            /*!< [7..7] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK8       : 1;            /*!< [8..8] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK9       : 1;            /*!< [9..9] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32_t LCK10      : 1;            /*!< [10..10] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32_t LCK11      : 1;            /*!< [11..11] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32_t LCK12      : 1;            /*!< [12..12] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32_t LCK13      : 1;            /*!< [13..13] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32_t LCK14      : 1;            /*!< [14..14] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32_t LCK15      : 1;            /*!< [15..15] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32_t LCKK       : 1;            /*!< [16..16] Port x lock bit y (y= 0..15)                                     */
    } LCKR_b;
  } ;
  
  union {
    __IOM uint32_t AFRL;                        /*!< (@ 0x00000020) GPIO alternate function low register                       */
    
    struct {
      __IOM uint32_t AFRL0      : 4;            /*!< [3..0] Alternate function selection for port x bit y (y = 0..7)           */
      __IOM uint32_t AFRL1      : 4;            /*!< [7..4] Alternate function selection for port x bit y (y = 0..7)           */
      __IOM uint32_t AFRL2      : 4;            /*!< [11..8] Alternate function selection for port x bit y (y = 0..7)          */
      __IOM uint32_t AFRL3      : 4;            /*!< [15..12] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32_t AFRL4      : 4;            /*!< [19..16] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32_t AFRL5      : 4;            /*!< [23..20] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32_t AFRL6      : 4;            /*!< [27..24] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32_t AFRL7      : 4;            /*!< [31..28] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
    } AFRL_b;
  } ;
  
  union {
    __IOM uint32_t AFRH;                        /*!< (@ 0x00000024) GPIO alternate function high register                      */
    
    struct {
      __IOM uint32_t AFRH8      : 4;            /*!< [3..0] Alternate function selection for port x bit y (y = 8..15)          */
      __IOM uint32_t AFRH9      : 4;            /*!< [7..4] Alternate function selection for port x bit y (y = 8..15)          */
      __IOM uint32_t AFRH10     : 4;            /*!< [11..8] Alternate function selection for port x bit y (y = 8..15)         */
      __IOM uint32_t AFRH11     : 4;            /*!< [15..12] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32_t AFRH12     : 4;            /*!< [19..16] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32_t AFRH13     : 4;            /*!< [23..20] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32_t AFRH14     : 4;            /*!< [27..24] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32_t AFRH15     : 4;            /*!< [31..28] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
    } AFRH_b;
  } ;
  
  union {
    __OM  uint32_t BRR;                         /*!< (@ 0x00000028) Port bit reset register                                    */
    
    struct {
      __OM  uint32_t BR0        : 1;            /*!< [0..0] Port x Reset bit y                                                 */
      __OM  uint32_t BR1        : 1;            /*!< [1..1] Port x Reset bit y                                                 */
      __OM  uint32_t BR2        : 1;            /*!< [2..2] Port x Reset bit y                                                 */
      __OM  uint32_t BR3        : 1;            /*!< [3..3] Port x Reset bit y                                                 */
      __OM  uint32_t BR4        : 1;            /*!< [4..4] Port x Reset bit y                                                 */
      __OM  uint32_t BR5        : 1;            /*!< [5..5] Port x Reset bit y                                                 */
      __OM  uint32_t BR6        : 1;            /*!< [6..6] Port x Reset bit y                                                 */
      __OM  uint32_t BR7        : 1;            /*!< [7..7] Port x Reset bit y                                                 */
      __OM  uint32_t BR8        : 1;            /*!< [8..8] Port x Reset bit y                                                 */
      __OM  uint32_t BR9        : 1;            /*!< [9..9] Port x Reset bit y                                                 */
      __OM  uint32_t BR10       : 1;            /*!< [10..10] Port x Reset bit y                                               */
      __OM  uint32_t BR11       : 1;            /*!< [11..11] Port x Reset bit y                                               */
      __OM  uint32_t BR12       : 1;            /*!< [12..12] Port x Reset bit y                                               */
      __OM  uint32_t BR13       : 1;            /*!< [13..13] Port x Reset bit y                                               */
      __OM  uint32_t BR14       : 1;            /*!< [14..14] Port x Reset bit y                                               */
      __OM  uint32_t BR15       : 1;            /*!< [15..15] Port x Reset bit y                                               */
    } BRR_b;
  } ;
} GPIOA_Type;                                   /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI1)
  */

typedef struct {                                /*!< (@ 0x40013000) SPI1 Structure                                             */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32_t CPHA       : 1;            /*!< [0..0] Clock phase                                                        */
      __IOM uint32_t CPOL       : 1;            /*!< [1..1] Clock polarity                                                     */
      __IOM uint32_t MSTR       : 1;            /*!< [2..2] Master selection                                                   */
      __IOM uint32_t BR         : 3;            /*!< [5..3] Baud rate control                                                  */
      __IOM uint32_t SPE        : 1;            /*!< [6..6] SPI enable                                                         */
      __IOM uint32_t LSBFIRST   : 1;            /*!< [7..7] Frame format                                                       */
      __IOM uint32_t SSI        : 1;            /*!< [8..8] Internal slave select                                              */
      __IOM uint32_t SSM        : 1;            /*!< [9..9] Software slave management                                          */
      __IOM uint32_t RXONLY     : 1;            /*!< [10..10] Receive only                                                     */
      __IOM uint32_t DFF        : 1;            /*!< [11..11] Data frame format                                                */
      __IOM uint32_t CRCNEXT    : 1;            /*!< [12..12] CRC transfer next                                                */
      __IOM uint32_t CRCEN      : 1;            /*!< [13..13] Hardware CRC calculation enable                                  */
      __IOM uint32_t BIDIOE     : 1;            /*!< [14..14] Output enable in bidirectional mode                              */
      __IOM uint32_t BIDIMODE   : 1;            /*!< [15..15] Bidirectional data mode enable                                   */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) control register 2                                         */
    
    struct {
      __IOM uint32_t RXDMAEN    : 1;            /*!< [0..0] Rx buffer DMA enable                                               */
      __IOM uint32_t TXDMAEN    : 1;            /*!< [1..1] Tx buffer DMA enable                                               */
      __IOM uint32_t SSOE       : 1;            /*!< [2..2] SS output enable                                                   */
      __IOM uint32_t NSSP       : 1;            /*!< [3..3] NSS pulse management                                               */
      __IOM uint32_t FRF        : 1;            /*!< [4..4] Frame format                                                       */
      __IOM uint32_t ERRIE      : 1;            /*!< [5..5] Error interrupt enable                                             */
      __IOM uint32_t RXNEIE     : 1;            /*!< [6..6] RX buffer not empty interrupt enable                               */
      __IOM uint32_t TXEIE      : 1;            /*!< [7..7] Tx buffer empty interrupt enable                                   */
      __IOM uint32_t DS         : 4;            /*!< [11..8] Data size                                                         */
      __IOM uint32_t FRXTH      : 1;            /*!< [12..12] FIFO reception threshold                                         */
      __IOM uint32_t LDMA_RX    : 1;            /*!< [13..13] Last DMA transfer for reception                                  */
      __IOM uint32_t LDMA_TX    : 1;            /*!< [14..14] Last DMA transfer for transmission                               */
    } CR2_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000008) status register                                            */
    
    struct {
      __IM  uint32_t RXNE       : 1;            /*!< [0..0] Receive buffer not empty                                           */
      __IM  uint32_t TXE        : 1;            /*!< [1..1] Transmit buffer empty                                              */
      __IM  uint32_t CHSIDE     : 1;            /*!< [2..2] Channel side                                                       */
      __IM  uint32_t UDR        : 1;            /*!< [3..3] Underrun flag                                                      */
      __IOM uint32_t CRCERR     : 1;            /*!< [4..4] CRC error flag                                                     */
      __IM  uint32_t MODF       : 1;            /*!< [5..5] Mode fault                                                         */
      __IM  uint32_t OVR        : 1;            /*!< [6..6] Overrun flag                                                       */
      __IM  uint32_t BSY        : 1;            /*!< [7..7] Busy flag                                                          */
      __IM  uint32_t TIFRFE     : 1;            /*!< [8..8] TI frame format error                                              */
      __IM  uint32_t FRLVL      : 2;            /*!< [10..9] FIFO reception level                                              */
      __IM  uint32_t FTLVL      : 2;            /*!< [12..11] FIFO transmission level                                          */
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x0000000C) data register                                              */
    
    struct {
      __IOM uint32_t DR         : 16;           /*!< [15..0] Data register                                                     */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t CRCPR;                       /*!< (@ 0x00000010) CRC polynomial register                                    */
    
    struct {
      __IOM uint32_t CRCPOLY    : 16;           /*!< [15..0] CRC polynomial register                                           */
    } CRCPR_b;
  } ;
  
  union {
    __IM  uint32_t RXCRCR;                      /*!< (@ 0x00000014) RX CRC register                                            */
    
    struct {
      __IM  uint32_t RxCRC      : 16;           /*!< [15..0] Rx CRC register                                                   */
    } RXCRCR_b;
  } ;
  
  union {
    __IM  uint32_t TXCRCR;                      /*!< (@ 0x00000018) TX CRC register                                            */
    
    struct {
      __IM  uint32_t TxCRC      : 16;           /*!< [15..0] Tx CRC register                                                   */
    } TXCRCR_b;
  } ;
  
  union {
    __IOM uint32_t I2SCFGR;                     /*!< (@ 0x0000001C) I2S configuration register                                 */
    
    struct {
      __IOM uint32_t CHLEN      : 1;            /*!< [0..0] Channel length (number of bits per audio channel)                  */
      __IOM uint32_t DATLEN     : 2;            /*!< [2..1] Data length to be transferred                                      */
      __IOM uint32_t CKPOL      : 1;            /*!< [3..3] Steady state clock polarity                                        */
      __IOM uint32_t I2SSTD     : 2;            /*!< [5..4] I2S standard selection                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t PCMSYNC    : 1;            /*!< [7..7] PCM frame synchronization                                          */
      __IOM uint32_t I2SCFG     : 2;            /*!< [9..8] I2S configuration mode                                             */
      __IOM uint32_t I2SE       : 1;            /*!< [10..10] I2S Enable                                                       */
      __IOM uint32_t I2SMOD     : 1;            /*!< [11..11] I2S mode selection                                               */
    } I2SCFGR_b;
  } ;
  
  union {
    __IOM uint32_t I2SPR;                       /*!< (@ 0x00000020) I2S prescaler register                                     */
    
    struct {
      __IOM uint32_t I2SDIV     : 8;            /*!< [7..0] I2S Linear prescaler                                               */
      __IOM uint32_t ODD        : 1;            /*!< [8..8] Odd factor for the prescaler                                       */
      __IOM uint32_t MCKOE      : 1;            /*!< [9..9] Master clock output enable                                         */
    } I2SPR_b;
  } ;
} SPI1_Type;                                    /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                            PWR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Power control (PWR)
  */

typedef struct {                                /*!< (@ 0x40007000) PWR Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) power control register                                     */
    
    struct {
      __IOM uint32_t LPDS       : 1;            /*!< [0..0] Low-power deep sleep                                               */
      __IOM uint32_t PDDS       : 1;            /*!< [1..1] Power down deepsleep                                               */
      __IOM uint32_t CWUF       : 1;            /*!< [2..2] Clear wakeup flag                                                  */
      __IOM uint32_t CSBF       : 1;            /*!< [3..3] Clear standby flag                                                 */
      __IOM uint32_t PVDE       : 1;            /*!< [4..4] Power voltage detector enable                                      */
      __IOM uint32_t PLS        : 3;            /*!< [7..5] PVD level selection                                                */
      __IOM uint32_t DBP        : 1;            /*!< [8..8] Disable backup domain write protection                             */
      __IOM uint32_t FPDS       : 1;            /*!< [9..9] Flash power down in Stop mode                                      */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t CSR;                         /*!< (@ 0x00000004) power control/status register                              */
    
    struct {
      __IM  uint32_t WUF        : 1;            /*!< [0..0] Wakeup flag                                                        */
      __IM  uint32_t SBF        : 1;            /*!< [1..1] Standby flag                                                       */
      __IM  uint32_t PVDO       : 1;            /*!< [2..2] PVD output                                                         */
      __IM  uint32_t BRR        : 1;            /*!< [3..3] Backup regulator ready                                             */
      __IM  uint32_t            : 4;
      __IOM uint32_t EWUP       : 1;            /*!< [8..8] Enable WKUP pin                                                    */
      __IOM uint32_t BRE        : 1;            /*!< [9..9] Backup regulator enable                                            */
    } CSR_b;
  } ;
} PWR_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter-integrated circuit (I2C1)
  */

typedef struct {                                /*!< (@ 0x40005400) I2C1 Structure                                             */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) Control register 1                                         */
    
    struct {
      __IOM uint32_t PE         : 1;            /*!< [0..0] Peripheral enable                                                  */
      __IOM uint32_t TXIE       : 1;            /*!< [1..1] TX Interrupt enable                                                */
      __IOM uint32_t RXIE       : 1;            /*!< [2..2] RX Interrupt enable                                                */
      __IOM uint32_t ADDRIE     : 1;            /*!< [3..3] Address match interrupt enable (slave only)                        */
      __IOM uint32_t NACKIE     : 1;            /*!< [4..4] Not acknowledge received interrupt enable                          */
      __IOM uint32_t STOPIE     : 1;            /*!< [5..5] STOP detection Interrupt enable                                    */
      __IOM uint32_t TCIE       : 1;            /*!< [6..6] Transfer Complete interrupt enable                                 */
      __IOM uint32_t ERRIE      : 1;            /*!< [7..7] Error interrupts enable                                            */
      __IOM uint32_t DNF        : 4;            /*!< [11..8] Digital noise filter                                              */
      __IOM uint32_t ANFOFF     : 1;            /*!< [12..12] Analog noise filter OFF                                          */
      __OM  uint32_t SWRST      : 1;            /*!< [13..13] Software reset                                                   */
      __IOM uint32_t TXDMAEN    : 1;            /*!< [14..14] DMA transmission requests enable                                 */
      __IOM uint32_t RXDMAEN    : 1;            /*!< [15..15] DMA reception requests enable                                    */
      __IOM uint32_t SBC        : 1;            /*!< [16..16] Slave byte control                                               */
      __IOM uint32_t NOSTRETCH  : 1;            /*!< [17..17] Clock stretching disable                                         */
      __IOM uint32_t WUPEN      : 1;            /*!< [18..18] Wakeup from STOP enable                                          */
      __IOM uint32_t GCEN       : 1;            /*!< [19..19] General call enable                                              */
      __IOM uint32_t SMBHEN     : 1;            /*!< [20..20] SMBus Host address enable                                        */
      __IOM uint32_t SMBDEN     : 1;            /*!< [21..21] SMBus Device Default address enable                              */
      __IOM uint32_t ALERTEN    : 1;            /*!< [22..22] SMBUS alert enable                                               */
      __IOM uint32_t PECEN      : 1;            /*!< [23..23] PEC enable                                                       */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) Control register 2                                         */
    
    struct {
      __IOM uint32_t SADD0      : 1;            /*!< [0..0] Slave address bit 0 (master mode)                                  */
      __IOM uint32_t SADD1      : 7;            /*!< [7..1] Slave address bit 7:1 (master mode)                                */
      __IOM uint32_t SADD8      : 2;            /*!< [9..8] Slave address bit 9:8 (master mode)                                */
      __IOM uint32_t RD_WRN     : 1;            /*!< [10..10] Transfer direction (master mode)                                 */
      __IOM uint32_t ADD10      : 1;            /*!< [11..11] 10-bit addressing mode (master mode)                             */
      __IOM uint32_t HEAD10R    : 1;            /*!< [12..12] 10-bit address header only read direction (master receiver
                                                     mode)                                                                     */
      __IOM uint32_t START      : 1;            /*!< [13..13] Start generation                                                 */
      __IOM uint32_t STOP       : 1;            /*!< [14..14] Stop generation (master mode)                                    */
      __IOM uint32_t NACK       : 1;            /*!< [15..15] NACK generation (slave mode)                                     */
      __IOM uint32_t NBYTES     : 8;            /*!< [23..16] Number of bytes                                                  */
      __IOM uint32_t RELOAD     : 1;            /*!< [24..24] NBYTES reload mode                                               */
      __IOM uint32_t AUTOEND    : 1;            /*!< [25..25] Automatic end mode (master mode)                                 */
      __IOM uint32_t PECBYTE    : 1;            /*!< [26..26] Packet error checking byte                                       */
    } CR2_b;
  } ;
  
  union {
    __IOM uint32_t OAR1;                        /*!< (@ 0x00000008) Own address register 1                                     */
    
    struct {
      __IOM uint32_t OA1_0      : 1;            /*!< [0..0] Interface address                                                  */
      __IOM uint32_t OA1_1      : 7;            /*!< [7..1] Interface address                                                  */
      __IOM uint32_t OA1_8      : 2;            /*!< [9..8] Interface address                                                  */
      __IOM uint32_t OA1MODE    : 1;            /*!< [10..10] Own Address 1 10-bit mode                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t OA1EN      : 1;            /*!< [15..15] Own Address 1 enable                                             */
    } OAR1_b;
  } ;
  
  union {
    __IOM uint32_t OAR2;                        /*!< (@ 0x0000000C) Own address register 2                                     */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t OA2        : 7;            /*!< [7..1] Interface address                                                  */
      __IOM uint32_t OA2MSK     : 3;            /*!< [10..8] Own Address 2 masks                                               */
      __IM  uint32_t            : 4;
      __IOM uint32_t OA2EN      : 1;            /*!< [15..15] Own Address 2 enable                                             */
    } OAR2_b;
  } ;
  
  union {
    __IOM uint32_t TIMINGR;                     /*!< (@ 0x00000010) Timing register                                            */
    
    struct {
      __IOM uint32_t SCLL       : 8;            /*!< [7..0] SCL low period (master mode)                                       */
      __IOM uint32_t SCLH       : 8;            /*!< [15..8] SCL high period (master mode)                                     */
      __IOM uint32_t SDADEL     : 4;            /*!< [19..16] Data hold time                                                   */
      __IOM uint32_t SCLDEL     : 4;            /*!< [23..20] Data setup time                                                  */
      __IM  uint32_t            : 4;
      __IOM uint32_t PRESC      : 4;            /*!< [31..28] Timing prescaler                                                 */
    } TIMINGR_b;
  } ;
  
  union {
    __IOM uint32_t TIMEOUTR;                    /*!< (@ 0x00000014) Status register 1                                          */
    
    struct {
      __IOM uint32_t TIMEOUTA   : 12;           /*!< [11..0] Bus timeout A                                                     */
      __IOM uint32_t TIDLE      : 1;            /*!< [12..12] Idle clock timeout detection                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t TIMOUTEN   : 1;            /*!< [15..15] Clock timeout enable                                             */
      __IOM uint32_t TIMEOUTB   : 12;           /*!< [27..16] Bus timeout B                                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t TEXTEN     : 1;            /*!< [31..31] Extended clock timeout enable                                    */
    } TIMEOUTR_b;
  } ;
  
  union {
    __IOM uint32_t ISR;                         /*!< (@ 0x00000018) Interrupt and Status register                              */
    
    struct {
      __IOM uint32_t TXE        : 1;            /*!< [0..0] Transmit data register empty (transmitters)                        */
      __IOM uint32_t TXIS       : 1;            /*!< [1..1] Transmit interrupt status (transmitters)                           */
      __IM  uint32_t RXNE       : 1;            /*!< [2..2] Receive data register not empty (receivers)                        */
      __IM  uint32_t ADDR       : 1;            /*!< [3..3] Address matched (slave mode)                                       */
      __IM  uint32_t NACKF      : 1;            /*!< [4..4] Not acknowledge received flag                                      */
      __IM  uint32_t STOPF      : 1;            /*!< [5..5] Stop detection flag                                                */
      __IM  uint32_t TC         : 1;            /*!< [6..6] Transfer Complete (master mode)                                    */
      __IM  uint32_t TCR        : 1;            /*!< [7..7] Transfer Complete Reload                                           */
      __IM  uint32_t BERR       : 1;            /*!< [8..8] Bus error                                                          */
      __IM  uint32_t ARLO       : 1;            /*!< [9..9] Arbitration lost                                                   */
      __IM  uint32_t OVR        : 1;            /*!< [10..10] Overrun/Underrun (slave mode)                                    */
      __IM  uint32_t PECERR     : 1;            /*!< [11..11] PEC Error in reception                                           */
      __IM  uint32_t TIMEOUT    : 1;            /*!< [12..12] Timeout or t_low detection flag                                  */
      __IM  uint32_t ALERT      : 1;            /*!< [13..13] SMBus alert                                                      */
      __IM  uint32_t            : 1;
      __IM  uint32_t BUSY       : 1;            /*!< [15..15] Bus busy                                                         */
      __IM  uint32_t DIR        : 1;            /*!< [16..16] Transfer direction (Slave mode)                                  */
      __IM  uint32_t ADDCODE    : 7;            /*!< [23..17] Address match code (Slave mode)                                  */
    } ISR_b;
  } ;
  
  union {
    __OM  uint32_t ICR;                         /*!< (@ 0x0000001C) Interrupt clear register                                   */
    
    struct {
      __IM  uint32_t            : 3;
      __OM  uint32_t ADDRCF     : 1;            /*!< [3..3] Address Matched flag clear                                         */
      __OM  uint32_t NACKCF     : 1;            /*!< [4..4] Not Acknowledge flag clear                                         */
      __OM  uint32_t STOPCF     : 1;            /*!< [5..5] Stop detection flag clear                                          */
      __IM  uint32_t            : 2;
      __OM  uint32_t BERRCF     : 1;            /*!< [8..8] Bus error flag clear                                               */
      __OM  uint32_t ARLOCF     : 1;            /*!< [9..9] Arbitration lost flag clear                                        */
      __OM  uint32_t OVRCF      : 1;            /*!< [10..10] Overrun/Underrun flag clear                                      */
      __OM  uint32_t PECCF      : 1;            /*!< [11..11] PEC Error flag clear                                             */
      __OM  uint32_t TIMOUTCF   : 1;            /*!< [12..12] Timeout detection flag clear                                     */
      __OM  uint32_t ALERTCF    : 1;            /*!< [13..13] Alert flag clear                                                 */
    } ICR_b;
  } ;
  
  union {
    __IM  uint32_t PECR;                        /*!< (@ 0x00000020) PEC register                                               */
    
    struct {
      __IM  uint32_t PEC        : 8;            /*!< [7..0] Packet error checking register                                     */
    } PECR_b;
  } ;
  
  union {
    __IM  uint32_t RXDR;                        /*!< (@ 0x00000024) Receive data register                                      */
    
    struct {
      __IM  uint32_t RXDATA     : 8;            /*!< [7..0] 8-bit receive data                                                 */
    } RXDR_b;
  } ;
  
  union {
    __IOM uint32_t TXDR;                        /*!< (@ 0x00000028) Transmit data register                                     */
    
    struct {
      __IOM uint32_t TXDATA     : 8;            /*!< [7..0] 8-bit transmit data                                                */
    } TXDR_b;
  } ;
} I2C1_Type;                                    /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           IWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Independent watchdog (IWDG)
  */

typedef struct {                                /*!< (@ 0x40003000) IWDG Structure                                             */
  
  union {
    __OM  uint32_t KR;                          /*!< (@ 0x00000000) Key register                                               */
    
    struct {
      __OM  uint32_t KEY        : 16;           /*!< [15..0] Key value                                                         */
    } KR_b;
  } ;
  
  union {
    __IOM uint32_t PR;                          /*!< (@ 0x00000004) Prescaler register                                         */
    
    struct {
      __IOM uint32_t PR         : 3;            /*!< [2..0] Prescaler divider                                                  */
    } PR_b;
  } ;
  
  union {
    __IOM uint32_t RLR;                         /*!< (@ 0x00000008) Reload register                                            */
    
    struct {
      __IOM uint32_t RL         : 12;           /*!< [11..0] Watchdog counter reload value                                     */
    } RLR_b;
  } ;
  
  union {
    __IM  uint32_t SR;                          /*!< (@ 0x0000000C) Status register                                            */
    
    struct {
      __IM  uint32_t PVU        : 1;            /*!< [0..0] Watchdog prescaler value update                                    */
      __IM  uint32_t RVU        : 1;            /*!< [1..1] Watchdog counter reload value update                               */
      __IM  uint32_t WVU        : 1;            /*!< [2..2] Watchdog counter window value update                               */
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t WINR;                        /*!< (@ 0x00000010) Window register                                            */
    
    struct {
      __IOM uint32_t WIN        : 12;           /*!< [11..0] Watchdog counter window value                                     */
    } WINR_b;
  } ;
} IWDG_Type;                                    /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           WWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Window watchdog (WWDG)
  */

typedef struct {                                /*!< (@ 0x40002C00) WWDG Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) Control register                                           */
    
    struct {
      __IOM uint32_t T          : 7;            /*!< [6..0] 7-bit counter                                                      */
      __IOM uint32_t WDGA       : 1;            /*!< [7..7] Activation bit                                                     */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t CFR;                         /*!< (@ 0x00000004) Configuration register                                     */
    
    struct {
      __IOM uint32_t W          : 7;            /*!< [6..0] 7-bit window value                                                 */
      __IOM uint32_t WDGTB      : 2;            /*!< [8..7] Timer base                                                         */
      __IOM uint32_t EWI        : 1;            /*!< [9..9] Early wakeup interrupt                                             */
    } CFR_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000008) Status register                                            */
    
    struct {
      __IOM uint32_t EWIF       : 1;            /*!< [0..0] Early wakeup interrupt flag                                        */
    } SR_b;
  } ;
} WWDG_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           TIM1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Advanced-timers (TIM1)
  */

typedef struct {                                /*!< (@ 0x40012C00) TIM1 Structure                                             */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32_t CEN        : 1;            /*!< [0..0] Counter enable                                                     */
      __IOM uint32_t UDIS       : 1;            /*!< [1..1] Update disable                                                     */
      __IOM uint32_t URS        : 1;            /*!< [2..2] Update request source                                              */
      __IOM uint32_t OPM        : 1;            /*!< [3..3] One-pulse mode                                                     */
      __IOM uint32_t DIR        : 1;            /*!< [4..4] Direction                                                          */
      __IOM uint32_t CMS        : 2;            /*!< [6..5] Center-aligned mode selection                                      */
      __IOM uint32_t ARPE       : 1;            /*!< [7..7] Auto-reload preload enable                                         */
      __IOM uint32_t CKD        : 2;            /*!< [9..8] Clock division                                                     */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) control register 2                                         */
    
    struct {
      __IOM uint32_t CCPC       : 1;            /*!< [0..0] Capture/compare preloaded control                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t CCUS       : 1;            /*!< [2..2] Capture/compare control update selection                           */
      __IOM uint32_t CCDS       : 1;            /*!< [3..3] Capture/compare DMA selection                                      */
      __IOM uint32_t MMS        : 3;            /*!< [6..4] Master mode selection                                              */
      __IOM uint32_t TI1S       : 1;            /*!< [7..7] TI1 selection                                                      */
      __IOM uint32_t OIS1       : 1;            /*!< [8..8] Output Idle state 1                                                */
      __IOM uint32_t OIS1N      : 1;            /*!< [9..9] Output Idle state 1                                                */
      __IOM uint32_t OIS2       : 1;            /*!< [10..10] Output Idle state 2                                              */
      __IOM uint32_t OIS2N      : 1;            /*!< [11..11] Output Idle state 2                                              */
      __IOM uint32_t OIS3       : 1;            /*!< [12..12] Output Idle state 3                                              */
      __IOM uint32_t OIS3N      : 1;            /*!< [13..13] Output Idle state 3                                              */
      __IOM uint32_t OIS4       : 1;            /*!< [14..14] Output Idle state 4                                              */
    } CR2_b;
  } ;
  
  union {
    __IOM uint32_t SMCR;                        /*!< (@ 0x00000008) slave mode control register                                */
    
    struct {
      __IOM uint32_t SMS        : 3;            /*!< [2..0] Slave mode selection                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS         : 3;            /*!< [6..4] Trigger selection                                                  */
      __IOM uint32_t MSM        : 1;            /*!< [7..7] Master/Slave mode                                                  */
      __IOM uint32_t ETF        : 4;            /*!< [11..8] External trigger filter                                           */
      __IOM uint32_t ETPS       : 2;            /*!< [13..12] External trigger prescaler                                       */
      __IOM uint32_t ECE        : 1;            /*!< [14..14] External clock enable                                            */
      __IOM uint32_t ETP        : 1;            /*!< [15..15] External trigger polarity                                        */
    } SMCR_b;
  } ;
  
  union {
    __IOM uint32_t DIER;                        /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
    
    struct {
      __IOM uint32_t UIE        : 1;            /*!< [0..0] Update interrupt enable                                            */
      __IOM uint32_t CC1IE      : 1;            /*!< [1..1] Capture/Compare 1 interrupt enable                                 */
      __IOM uint32_t CC2IE      : 1;            /*!< [2..2] Capture/Compare 2 interrupt enable                                 */
      __IOM uint32_t CC3IE      : 1;            /*!< [3..3] Capture/Compare 3 interrupt enable                                 */
      __IOM uint32_t CC4IE      : 1;            /*!< [4..4] Capture/Compare 4 interrupt enable                                 */
      __IOM uint32_t COMIE      : 1;            /*!< [5..5] COM interrupt enable                                               */
      __IOM uint32_t TIE        : 1;            /*!< [6..6] Trigger interrupt enable                                           */
      __IOM uint32_t BIE        : 1;            /*!< [7..7] Break interrupt enable                                             */
      __IOM uint32_t UDE        : 1;            /*!< [8..8] Update DMA request enable                                          */
      __IOM uint32_t CC1DE      : 1;            /*!< [9..9] Capture/Compare 1 DMA request enable                               */
      __IOM uint32_t CC2DE      : 1;            /*!< [10..10] Capture/Compare 2 DMA request enable                             */
      __IOM uint32_t CC3DE      : 1;            /*!< [11..11] Capture/Compare 3 DMA request enable                             */
      __IOM uint32_t CC4DE      : 1;            /*!< [12..12] Capture/Compare 4 DMA request enable                             */
      __IOM uint32_t COMDE      : 1;            /*!< [13..13] Reserved                                                         */
      __IOM uint32_t TDE        : 1;            /*!< [14..14] Trigger DMA request enable                                       */
    } DIER_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000010) status register                                            */
    
    struct {
      __IOM uint32_t UIF        : 1;            /*!< [0..0] Update interrupt flag                                              */
      __IOM uint32_t CC1IF      : 1;            /*!< [1..1] Capture/compare 1 interrupt flag                                   */
      __IOM uint32_t CC2IF      : 1;            /*!< [2..2] Capture/Compare 2 interrupt flag                                   */
      __IOM uint32_t CC3IF      : 1;            /*!< [3..3] Capture/Compare 3 interrupt flag                                   */
      __IOM uint32_t CC4IF      : 1;            /*!< [4..4] Capture/Compare 4 interrupt flag                                   */
      __IOM uint32_t COMIF      : 1;            /*!< [5..5] COM interrupt flag                                                 */
      __IOM uint32_t TIF        : 1;            /*!< [6..6] Trigger interrupt flag                                             */
      __IOM uint32_t BIF        : 1;            /*!< [7..7] Break interrupt flag                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t CC1OF      : 1;            /*!< [9..9] Capture/Compare 1 overcapture flag                                 */
      __IOM uint32_t CC2OF      : 1;            /*!< [10..10] Capture/compare 2 overcapture flag                               */
      __IOM uint32_t CC3OF      : 1;            /*!< [11..11] Capture/Compare 3 overcapture flag                               */
      __IOM uint32_t CC4OF      : 1;            /*!< [12..12] Capture/Compare 4 overcapture flag                               */
    } SR_b;
  } ;
  
  union {
    __OM  uint32_t EGR;                         /*!< (@ 0x00000014) event generation register                                  */
    
    struct {
      __OM  uint32_t UG         : 1;            /*!< [0..0] Update generation                                                  */
      __OM  uint32_t CC1G       : 1;            /*!< [1..1] Capture/compare 1 generation                                       */
      __OM  uint32_t CC2G       : 1;            /*!< [2..2] Capture/compare 2 generation                                       */
      __OM  uint32_t CC3G       : 1;            /*!< [3..3] Capture/compare 3 generation                                       */
      __OM  uint32_t CC4G       : 1;            /*!< [4..4] Capture/compare 4 generation                                       */
      __OM  uint32_t COMG       : 1;            /*!< [5..5] Capture/Compare control update generation                          */
      __OM  uint32_t TG         : 1;            /*!< [6..6] Trigger generation                                                 */
      __OM  uint32_t BG         : 1;            /*!< [7..7] Break generation                                                   */
    } EGR_b;
  } ;
  
  union {
    union {
      __IOM uint32_t CCMR1_Output;              /*!< (@ 0x00000018) capture/compare mode register (output mode)                */
      
      struct {
        __IOM uint32_t CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32_t OC1FE    : 1;            /*!< [2..2] Output Compare 1 fast enable                                       */
        __IOM uint32_t OC1PE    : 1;            /*!< [3..3] Output Compare 1 preload enable                                    */
        __IOM uint32_t OC1M     : 3;            /*!< [6..4] Output Compare 1 mode                                              */
        __IOM uint32_t OC1CE    : 1;            /*!< [7..7] Output Compare 1 clear enable                                      */
        __IOM uint32_t CC2S     : 2;            /*!< [9..8] Capture/Compare 2 selection                                        */
        __IOM uint32_t OC2FE    : 1;            /*!< [10..10] Output Compare 2 fast enable                                     */
        __IOM uint32_t OC2PE    : 1;            /*!< [11..11] Output Compare 2 preload enable                                  */
        __IOM uint32_t OC2M     : 3;            /*!< [14..12] Output Compare 2 mode                                            */
        __IOM uint32_t OC2CE    : 1;            /*!< [15..15] Output Compare 2 clear enable                                    */
      } CCMR1_Output_b;
    } ;
    
    union {
      __IOM uint32_t CCMR1_Input;               /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
      
      struct {
        __IOM uint32_t CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32_t IC1PCS   : 2;            /*!< [3..2] Input capture 1 prescaler                                          */
        __IOM uint32_t IC1F     : 4;            /*!< [7..4] Input capture 1 filter                                             */
        __IOM uint32_t CC2S     : 2;            /*!< [9..8] Capture/Compare 2 selection                                        */
        __IOM uint32_t IC2PCS   : 2;            /*!< [11..10] Input capture 2 prescaler                                        */
        __IOM uint32_t IC2F     : 4;            /*!< [15..12] Input capture 2 filter                                           */
      } CCMR1_Input_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t CCMR2_Output;              /*!< (@ 0x0000001C) capture/compare mode register (output mode)                */
      
      struct {
        __IOM uint32_t CC3S     : 2;            /*!< [1..0] Capture/Compare 3 selection                                        */
        __IOM uint32_t OC3FE    : 1;            /*!< [2..2] Output compare 3 fast enable                                       */
        __IOM uint32_t OC3PE    : 1;            /*!< [3..3] Output compare 3 preload enable                                    */
        __IOM uint32_t OC3M     : 3;            /*!< [6..4] Output compare 3 mode                                              */
        __IOM uint32_t OC3CE    : 1;            /*!< [7..7] Output compare 3 clear enable                                      */
        __IOM uint32_t CC4S     : 2;            /*!< [9..8] Capture/Compare 4 selection                                        */
        __IOM uint32_t OC4FE    : 1;            /*!< [10..10] Output compare 4 fast enable                                     */
        __IOM uint32_t OC4PE    : 1;            /*!< [11..11] Output compare 4 preload enable                                  */
        __IOM uint32_t OC4M     : 3;            /*!< [14..12] Output compare 4 mode                                            */
        __IOM uint32_t OC4CE    : 1;            /*!< [15..15] Output compare 4 clear enable                                    */
      } CCMR2_Output_b;
    } ;
    
    union {
      __IOM uint32_t CCMR2_Input;               /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
      
      struct {
        __IOM uint32_t CC3S     : 2;            /*!< [1..0] Capture/compare 3 selection                                        */
        __IOM uint32_t IC3PSC   : 2;            /*!< [3..2] Input capture 3 prescaler                                          */
        __IOM uint32_t IC3F     : 4;            /*!< [7..4] Input capture 3 filter                                             */
        __IOM uint32_t CC4S     : 2;            /*!< [9..8] Capture/Compare 4 selection                                        */
        __IOM uint32_t IC4PSC   : 2;            /*!< [11..10] Input capture 4 prescaler                                        */
        __IOM uint32_t IC4F     : 4;            /*!< [15..12] Input capture 4 filter                                           */
      } CCMR2_Input_b;
    } ;
  };
  
  union {
    __IOM uint32_t CCER;                        /*!< (@ 0x00000020) capture/compare enable register                            */
    
    struct {
      __IOM uint32_t CC1E       : 1;            /*!< [0..0] Capture/Compare 1 output enable                                    */
      __IOM uint32_t CC1P       : 1;            /*!< [1..1] Capture/Compare 1 output Polarity                                  */
      __IOM uint32_t CC1NE      : 1;            /*!< [2..2] Capture/Compare 1 complementary output enable                      */
      __IOM uint32_t CC1NP      : 1;            /*!< [3..3] Capture/Compare 1 output Polarity                                  */
      __IOM uint32_t CC2E       : 1;            /*!< [4..4] Capture/Compare 2 output enable                                    */
      __IOM uint32_t CC2P       : 1;            /*!< [5..5] Capture/Compare 2 output Polarity                                  */
      __IOM uint32_t CC2NE      : 1;            /*!< [6..6] Capture/Compare 2 complementary output enable                      */
      __IOM uint32_t CC2NP      : 1;            /*!< [7..7] Capture/Compare 2 output Polarity                                  */
      __IOM uint32_t CC3E       : 1;            /*!< [8..8] Capture/Compare 3 output enable                                    */
      __IOM uint32_t CC3P       : 1;            /*!< [9..9] Capture/Compare 3 output Polarity                                  */
      __IOM uint32_t CC3NE      : 1;            /*!< [10..10] Capture/Compare 3 complementary output enable                    */
      __IOM uint32_t CC3NP      : 1;            /*!< [11..11] Capture/Compare 3 output Polarity                                */
      __IOM uint32_t CC4E       : 1;            /*!< [12..12] Capture/Compare 4 output enable                                  */
      __IOM uint32_t CC4P       : 1;            /*!< [13..13] Capture/Compare 3 output Polarity                                */
    } CCER_b;
  } ;
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000024) counter                                                    */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] counter value                                                     */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t PSC;                         /*!< (@ 0x00000028) prescaler                                                  */
    
    struct {
      __IOM uint32_t PSC        : 16;           /*!< [15..0] Prescaler value                                                   */
    } PSC_b;
  } ;
  
  union {
    __IOM uint32_t ARR;                         /*!< (@ 0x0000002C) auto-reload register                                       */
    
    struct {
      __IOM uint32_t ARR        : 16;           /*!< [15..0] Auto-reload value                                                 */
    } ARR_b;
  } ;
  
  union {
    __IOM uint32_t RCR;                         /*!< (@ 0x00000030) repetition counter register                                */
    
    struct {
      __IOM uint32_t REP        : 8;            /*!< [7..0] Repetition counter value                                           */
    } RCR_b;
  } ;
  
  union {
    __IOM uint32_t CCR1;                        /*!< (@ 0x00000034) capture/compare register 1                                 */
    
    struct {
      __IOM uint32_t CCR1       : 16;           /*!< [15..0] Capture/Compare 1 value                                           */
    } CCR1_b;
  } ;
  
  union {
    __IOM uint32_t CCR2;                        /*!< (@ 0x00000038) capture/compare register 2                                 */
    
    struct {
      __IOM uint32_t CCR2       : 16;           /*!< [15..0] Capture/Compare 2 value                                           */
    } CCR2_b;
  } ;
  
  union {
    __IOM uint32_t CCR3;                        /*!< (@ 0x0000003C) capture/compare register 3                                 */
    
    struct {
      __IOM uint32_t CCR3       : 16;           /*!< [15..0] Capture/Compare 3 value                                           */
    } CCR3_b;
  } ;
  
  union {
    __IOM uint32_t CCR4;                        /*!< (@ 0x00000040) capture/compare register 4                                 */
    
    struct {
      __IOM uint32_t CCR4       : 16;           /*!< [15..0] Capture/Compare 3 value                                           */
    } CCR4_b;
  } ;
  
  union {
    __IOM uint32_t BDTR;                        /*!< (@ 0x00000044) break and dead-time register                               */
    
    struct {
      __IOM uint32_t DTG        : 8;            /*!< [7..0] Dead-time generator setup                                          */
      __IOM uint32_t LOCK       : 2;            /*!< [9..8] Lock configuration                                                 */
      __IOM uint32_t OSSI       : 1;            /*!< [10..10] Off-state selection for Idle mode                                */
      __IOM uint32_t OSSR       : 1;            /*!< [11..11] Off-state selection for Run mode                                 */
      __IOM uint32_t BKE        : 1;            /*!< [12..12] Break enable                                                     */
      __IOM uint32_t BKP        : 1;            /*!< [13..13] Break polarity                                                   */
      __IOM uint32_t AOE        : 1;            /*!< [14..14] Automatic output enable                                          */
      __IOM uint32_t MOE        : 1;            /*!< [15..15] Main output enable                                               */
    } BDTR_b;
  } ;
  
  union {
    __IOM uint32_t DCR;                         /*!< (@ 0x00000048) DMA control register                                       */
    
    struct {
      __IOM uint32_t DBA        : 5;            /*!< [4..0] DMA base address                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DBL        : 5;            /*!< [12..8] DMA burst length                                                  */
    } DCR_b;
  } ;
  
  union {
    __IOM uint32_t DMAR;                        /*!< (@ 0x0000004C) DMA address for full transfer                              */
    
    struct {
      __IOM uint32_t DMAB       : 16;           /*!< [15..0] DMA register for burst accesses                                   */
    } DMAR_b;
  } ;
} TIM1_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM2)
  */

typedef struct {                                /*!< (@ 0x40000000) TIM2 Structure                                             */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32_t CEN        : 1;            /*!< [0..0] Counter enable                                                     */
      __IOM uint32_t UDIS       : 1;            /*!< [1..1] Update disable                                                     */
      __IOM uint32_t URS        : 1;            /*!< [2..2] Update request source                                              */
      __IOM uint32_t OPM        : 1;            /*!< [3..3] One-pulse mode                                                     */
      __IOM uint32_t DIR        : 1;            /*!< [4..4] Direction                                                          */
      __IOM uint32_t CMS        : 2;            /*!< [6..5] Center-aligned mode selection                                      */
      __IOM uint32_t ARPE       : 1;            /*!< [7..7] Auto-reload preload enable                                         */
      __IOM uint32_t CKD        : 2;            /*!< [9..8] Clock division                                                     */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) control register 2                                         */
    
    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t CCDS       : 1;            /*!< [3..3] Capture/compare DMA selection                                      */
      __IOM uint32_t MMS        : 3;            /*!< [6..4] Master mode selection                                              */
      __IOM uint32_t TI1S       : 1;            /*!< [7..7] TI1 selection                                                      */
    } CR2_b;
  } ;
  
  union {
    __IOM uint32_t SMCR;                        /*!< (@ 0x00000008) slave mode control register                                */
    
    struct {
      __IOM uint32_t SMS        : 3;            /*!< [2..0] Slave mode selection                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS         : 3;            /*!< [6..4] Trigger selection                                                  */
      __IOM uint32_t MSM        : 1;            /*!< [7..7] Master/Slave mode                                                  */
      __IOM uint32_t ETF        : 4;            /*!< [11..8] External trigger filter                                           */
      __IOM uint32_t ETPS       : 2;            /*!< [13..12] External trigger prescaler                                       */
      __IOM uint32_t ECE        : 1;            /*!< [14..14] External clock enable                                            */
      __IOM uint32_t ETP        : 1;            /*!< [15..15] External trigger polarity                                        */
    } SMCR_b;
  } ;
  
  union {
    __IOM uint32_t DIER;                        /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
    
    struct {
      __IOM uint32_t UIE        : 1;            /*!< [0..0] Update interrupt enable                                            */
      __IOM uint32_t CC1IE      : 1;            /*!< [1..1] Capture/Compare 1 interrupt enable                                 */
      __IOM uint32_t CC2IE      : 1;            /*!< [2..2] Capture/Compare 2 interrupt enable                                 */
      __IOM uint32_t CC3IE      : 1;            /*!< [3..3] Capture/Compare 3 interrupt enable                                 */
      __IOM uint32_t CC4IE      : 1;            /*!< [4..4] Capture/Compare 4 interrupt enable                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIE        : 1;            /*!< [6..6] Trigger interrupt enable                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t UDE        : 1;            /*!< [8..8] Update DMA request enable                                          */
      __IOM uint32_t CC1DE      : 1;            /*!< [9..9] Capture/Compare 1 DMA request enable                               */
      __IOM uint32_t CC2DE      : 1;            /*!< [10..10] Capture/Compare 2 DMA request enable                             */
      __IOM uint32_t CC3DE      : 1;            /*!< [11..11] Capture/Compare 3 DMA request enable                             */
      __IOM uint32_t CC4DE      : 1;            /*!< [12..12] Capture/Compare 4 DMA request enable                             */
      __IOM uint32_t COMDE      : 1;            /*!< [13..13] Reserved                                                         */
      __IOM uint32_t TDE        : 1;            /*!< [14..14] Trigger DMA request enable                                       */
    } DIER_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000010) status register                                            */
    
    struct {
      __IOM uint32_t UIF        : 1;            /*!< [0..0] Update interrupt flag                                              */
      __IOM uint32_t CC1IF      : 1;            /*!< [1..1] Capture/compare 1 interrupt flag                                   */
      __IOM uint32_t CC2IF      : 1;            /*!< [2..2] Capture/Compare 2 interrupt flag                                   */
      __IOM uint32_t CC3IF      : 1;            /*!< [3..3] Capture/Compare 3 interrupt flag                                   */
      __IOM uint32_t CC4IF      : 1;            /*!< [4..4] Capture/Compare 4 interrupt flag                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIF        : 1;            /*!< [6..6] Trigger interrupt flag                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t CC1OF      : 1;            /*!< [9..9] Capture/Compare 1 overcapture flag                                 */
      __IOM uint32_t CC2OF      : 1;            /*!< [10..10] Capture/compare 2 overcapture flag                               */
      __IOM uint32_t CC3OF      : 1;            /*!< [11..11] Capture/Compare 3 overcapture flag                               */
      __IOM uint32_t CC4OF      : 1;            /*!< [12..12] Capture/Compare 4 overcapture flag                               */
    } SR_b;
  } ;
  
  union {
    __OM  uint32_t EGR;                         /*!< (@ 0x00000014) event generation register                                  */
    
    struct {
      __OM  uint32_t UG         : 1;            /*!< [0..0] Update generation                                                  */
      __OM  uint32_t CC1G       : 1;            /*!< [1..1] Capture/compare 1 generation                                       */
      __OM  uint32_t CC2G       : 1;            /*!< [2..2] Capture/compare 2 generation                                       */
      __OM  uint32_t CC3G       : 1;            /*!< [3..3] Capture/compare 3 generation                                       */
      __OM  uint32_t CC4G       : 1;            /*!< [4..4] Capture/compare 4 generation                                       */
      __IM  uint32_t            : 1;
      __OM  uint32_t TG         : 1;            /*!< [6..6] Trigger generation                                                 */
    } EGR_b;
  } ;
  
  union {
    union {
      __IOM uint32_t CCMR1_Output;              /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
      
      struct {
        __IOM uint32_t CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32_t OC1FE    : 1;            /*!< [2..2] Output compare 1 fast enable                                       */
        __IOM uint32_t OC1PE    : 1;            /*!< [3..3] Output compare 1 preload enable                                    */
        __IOM uint32_t OC1M     : 3;            /*!< [6..4] Output compare 1 mode                                              */
        __IOM uint32_t OC1CE    : 1;            /*!< [7..7] Output compare 1 clear enable                                      */
        __IOM uint32_t CC2S     : 2;            /*!< [9..8] Capture/Compare 2 selection                                        */
        __IOM uint32_t OC2FE    : 1;            /*!< [10..10] Output compare 2 fast enable                                     */
        __IOM uint32_t OC2PE    : 1;            /*!< [11..11] Output compare 2 preload enable                                  */
        __IOM uint32_t OC2M     : 3;            /*!< [14..12] Output compare 2 mode                                            */
        __IOM uint32_t OC2CE    : 1;            /*!< [15..15] Output compare 2 clear enable                                    */
      } CCMR1_Output_b;
    } ;
    
    union {
      __IOM uint32_t CCMR1_Input;               /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
      
      struct {
        __IOM uint32_t CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32_t IC1PSC   : 2;            /*!< [3..2] Input capture 1 prescaler                                          */
        __IOM uint32_t IC1F     : 4;            /*!< [7..4] Input capture 1 filter                                             */
        __IOM uint32_t CC2S     : 2;            /*!< [9..8] Capture/compare 2 selection                                        */
        __IOM uint32_t IC2PSC   : 2;            /*!< [11..10] Input capture 2 prescaler                                        */
        __IOM uint32_t IC2F     : 4;            /*!< [15..12] Input capture 2 filter                                           */
      } CCMR1_Input_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t CCMR2_Output;              /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */
      
      struct {
        __IOM uint32_t CC3S     : 2;            /*!< [1..0] Capture/Compare 3 selection                                        */
        __IOM uint32_t OC3FE    : 1;            /*!< [2..2] Output compare 3 fast enable                                       */
        __IOM uint32_t OC3PE    : 1;            /*!< [3..3] Output compare 3 preload enable                                    */
        __IOM uint32_t OC3M     : 3;            /*!< [6..4] Output compare 3 mode                                              */
        __IOM uint32_t OC3CE    : 1;            /*!< [7..7] Output compare 3 clear enable                                      */
        __IOM uint32_t CC4S     : 2;            /*!< [9..8] Capture/Compare 4 selection                                        */
        __IOM uint32_t OC4FE    : 1;            /*!< [10..10] Output compare 4 fast enable                                     */
        __IOM uint32_t OC4PE    : 1;            /*!< [11..11] Output compare 4 preload enable                                  */
        __IOM uint32_t OC4M     : 3;            /*!< [14..12] Output compare 4 mode                                            */
        __IOM uint32_t OC4CE    : 1;            /*!< [15..15] Output compare 4 clear enable                                    */
      } CCMR2_Output_b;
    } ;
    
    union {
      __IOM uint32_t CCMR2_Input;               /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
      
      struct {
        __IOM uint32_t CC3S     : 2;            /*!< [1..0] Capture/Compare 3 selection                                        */
        __IOM uint32_t IC3PSC   : 2;            /*!< [3..2] Input capture 3 prescaler                                          */
        __IOM uint32_t IC3F     : 4;            /*!< [7..4] Input capture 3 filter                                             */
        __IOM uint32_t CC4S     : 2;            /*!< [9..8] Capture/Compare 4 selection                                        */
        __IOM uint32_t IC4PSC   : 2;            /*!< [11..10] Input capture 4 prescaler                                        */
        __IOM uint32_t IC4F     : 4;            /*!< [15..12] Input capture 4 filter                                           */
      } CCMR2_Input_b;
    } ;
  };
  
  union {
    __IOM uint32_t CCER;                        /*!< (@ 0x00000020) capture/compare enable register                            */
    
    struct {
      __IOM uint32_t CC1E       : 1;            /*!< [0..0] Capture/Compare 1 output enable                                    */
      __IOM uint32_t CC1P       : 1;            /*!< [1..1] Capture/Compare 1 output Polarity                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t CC1NP      : 1;            /*!< [3..3] Capture/Compare 1 output Polarity                                  */
      __IOM uint32_t CC2E       : 1;            /*!< [4..4] Capture/Compare 2 output enable                                    */
      __IOM uint32_t CC2P       : 1;            /*!< [5..5] Capture/Compare 2 output Polarity                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t CC2NP      : 1;            /*!< [7..7] Capture/Compare 2 output Polarity                                  */
      __IOM uint32_t CC3E       : 1;            /*!< [8..8] Capture/Compare 3 output enable                                    */
      __IOM uint32_t CC3P       : 1;            /*!< [9..9] Capture/Compare 3 output Polarity                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t CC3NP      : 1;            /*!< [11..11] Capture/Compare 3 output Polarity                                */
      __IOM uint32_t CC4E       : 1;            /*!< [12..12] Capture/Compare 4 output enable                                  */
      __IOM uint32_t CC4P       : 1;            /*!< [13..13] Capture/Compare 3 output Polarity                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t CC4NP      : 1;            /*!< [15..15] Capture/Compare 4 output Polarity                                */
    } CCER_b;
  } ;
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000024) counter                                                    */
    
    struct {
      __IOM uint32_t CNT_L      : 16;           /*!< [15..0] Low counter value                                                 */
      __IOM uint32_t CNT_H      : 16;           /*!< [31..16] High counter value (TIM2 only)                                   */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t PSC;                         /*!< (@ 0x00000028) prescaler                                                  */
    
    struct {
      __IOM uint32_t PSC        : 16;           /*!< [15..0] Prescaler value                                                   */
    } PSC_b;
  } ;
  
  union {
    __IOM uint32_t ARR;                         /*!< (@ 0x0000002C) auto-reload register                                       */
    
    struct {
      __IOM uint32_t ARR_L      : 16;           /*!< [15..0] Low Auto-reload value                                             */
      __IOM uint32_t ARR_H      : 16;           /*!< [31..16] High Auto-reload value (TIM2 only)                               */
    } ARR_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t CCR1;                        /*!< (@ 0x00000034) capture/compare register 1                                 */
    
    struct {
      __IOM uint32_t CCR1_L     : 16;           /*!< [15..0] Low Capture/Compare 1 value                                       */
      __IOM uint32_t CCR1_H     : 16;           /*!< [31..16] High Capture/Compare 1 value (TIM2 only)                         */
    } CCR1_b;
  } ;
  
  union {
    __IOM uint32_t CCR2;                        /*!< (@ 0x00000038) capture/compare register 2                                 */
    
    struct {
      __IOM uint32_t CCR2_L     : 16;           /*!< [15..0] Low Capture/Compare 2 value                                       */
      __IOM uint32_t CCR2_H     : 16;           /*!< [31..16] High Capture/Compare 2 value (TIM2 only)                         */
    } CCR2_b;
  } ;
  
  union {
    __IOM uint32_t CCR3;                        /*!< (@ 0x0000003C) capture/compare register 3                                 */
    
    struct {
      __IOM uint32_t CCR3_L     : 16;           /*!< [15..0] Low Capture/Compare value                                         */
      __IOM uint32_t CCR3_H     : 16;           /*!< [31..16] High Capture/Compare value (TIM2 only)                           */
    } CCR3_b;
  } ;
  
  union {
    __IOM uint32_t CCR4;                        /*!< (@ 0x00000040) capture/compare register 4                                 */
    
    struct {
      __IOM uint32_t CCR4_L     : 16;           /*!< [15..0] Low Capture/Compare value                                         */
      __IOM uint32_t CCR4_H     : 16;           /*!< [31..16] High Capture/Compare value (TIM2 only)                           */
    } CCR4_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t DCR;                         /*!< (@ 0x00000048) DMA control register                                       */
    
    struct {
      __IOM uint32_t DBA        : 5;            /*!< [4..0] DMA base address                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DBL        : 5;            /*!< [12..8] DMA burst length                                                  */
    } DCR_b;
  } ;
  
  union {
    __IOM uint32_t DMAR;                        /*!< (@ 0x0000004C) DMA address for full transfer                              */
    
    struct {
      __IOM uint32_t DMAR       : 16;           /*!< [15..0] DMA register for burst accesses                                   */
    } DMAR_b;
  } ;
} TIM2_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM14                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM14)
  */

typedef struct {                                /*!< (@ 0x40002000) TIM14 Structure                                            */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32_t CEN        : 1;            /*!< [0..0] Counter enable                                                     */
      __IOM uint32_t UDIS       : 1;            /*!< [1..1] Update disable                                                     */
      __IOM uint32_t URS        : 1;            /*!< [2..2] Update request source                                              */
      __IM  uint32_t            : 4;
      __IOM uint32_t ARPE       : 1;            /*!< [7..7] Auto-reload preload enable                                         */
      __IOM uint32_t CKD        : 2;            /*!< [9..8] Clock division                                                     */
    } CR1_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t DIER;                        /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
    
    struct {
      __IOM uint32_t UIE        : 1;            /*!< [0..0] Update interrupt enable                                            */
      __IOM uint32_t CC1IE      : 1;            /*!< [1..1] Capture/Compare 1 interrupt enable                                 */
    } DIER_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000010) status register                                            */
    
    struct {
      __IOM uint32_t UIF        : 1;            /*!< [0..0] Update interrupt flag                                              */
      __IOM uint32_t CC1IF      : 1;            /*!< [1..1] Capture/compare 1 interrupt flag                                   */
      __IM  uint32_t            : 7;
      __IOM uint32_t CC1OF      : 1;            /*!< [9..9] Capture/Compare 1 overcapture flag                                 */
    } SR_b;
  } ;
  
  union {
    __OM  uint32_t EGR;                         /*!< (@ 0x00000014) event generation register                                  */
    
    struct {
      __OM  uint32_t UG         : 1;            /*!< [0..0] Update generation                                                  */
      __OM  uint32_t CC1G       : 1;            /*!< [1..1] Capture/compare 1 generation                                       */
    } EGR_b;
  } ;
  
  union {
    union {
      __IOM uint32_t CCMR1_Output;              /*!< (@ 0x00000018) capture/compare mode register (output mode)                */
      
      struct {
        __IOM uint32_t CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32_t OC1FE    : 1;            /*!< [2..2] Output compare 1 fast enable                                       */
        __IOM uint32_t OC1PE    : 1;            /*!< [3..3] Output Compare 1 preload enable                                    */
        __IOM uint32_t OC1M     : 3;            /*!< [6..4] Output Compare 1 mode                                              */
      } CCMR1_Output_b;
    } ;
    
    union {
      __IOM uint32_t CCMR1_Input;               /*!< (@ 0x00000018) capture/compare mode register (input mode)                 */
      
      struct {
        __IOM uint32_t CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32_t IC1PSC   : 2;            /*!< [3..2] Input capture 1 prescaler                                          */
        __IOM uint32_t IC1F     : 4;            /*!< [7..4] Input capture 1 filter                                             */
      } CCMR1_Input_b;
    } ;
  };
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t CCER;                        /*!< (@ 0x00000020) capture/compare enable register                            */
    
    struct {
      __IOM uint32_t CC1E       : 1;            /*!< [0..0] Capture/Compare 1 output enable                                    */
      __IOM uint32_t CC1P       : 1;            /*!< [1..1] Capture/Compare 1 output Polarity                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t CC1NP      : 1;            /*!< [3..3] Capture/Compare 1 output Polarity                                  */
    } CCER_b;
  } ;
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000024) counter                                                    */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] counter value                                                     */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t PSC;                         /*!< (@ 0x00000028) prescaler                                                  */
    
    struct {
      __IOM uint32_t PSC        : 16;           /*!< [15..0] Prescaler value                                                   */
    } PSC_b;
  } ;
  
  union {
    __IOM uint32_t ARR;                         /*!< (@ 0x0000002C) auto-reload register                                       */
    
    struct {
      __IOM uint32_t ARR        : 16;           /*!< [15..0] Auto-reload value                                                 */
    } ARR_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t CCR1;                        /*!< (@ 0x00000034) capture/compare register 1                                 */
    
    struct {
      __IOM uint32_t CCR1       : 16;           /*!< [15..0] Capture/Compare 1 value                                           */
    } CCR1_b;
  } ;
  __IM  uint32_t  RESERVED3[6];
  
  union {
    __IOM uint32_t OR;                          /*!< (@ 0x00000050) option register                                            */
    
    struct {
      __IOM uint32_t RMP        : 2;            /*!< [1..0] Timer input 1 remap                                                */
    } OR_b;
  } ;
} TIM14_Type;                                   /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                           EXTI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief External interrupt/event       controller (EXTI)
  */

typedef struct {                                /*!< (@ 0x40010400) EXTI Structure                                             */
  
  union {
    __IOM uint32_t IMR;                         /*!< (@ 0x00000000) Interrupt mask register (EXTI_IMR)                         */
    
    struct {
      __IOM uint32_t MR0        : 1;            /*!< [0..0] Interrupt Mask on line 0                                           */
      __IOM uint32_t MR1        : 1;            /*!< [1..1] Interrupt Mask on line 1                                           */
      __IOM uint32_t MR2        : 1;            /*!< [2..2] Interrupt Mask on line 2                                           */
      __IOM uint32_t MR3        : 1;            /*!< [3..3] Interrupt Mask on line 3                                           */
      __IOM uint32_t MR4        : 1;            /*!< [4..4] Interrupt Mask on line 4                                           */
      __IOM uint32_t MR5        : 1;            /*!< [5..5] Interrupt Mask on line 5                                           */
      __IOM uint32_t MR6        : 1;            /*!< [6..6] Interrupt Mask on line 6                                           */
      __IOM uint32_t MR7        : 1;            /*!< [7..7] Interrupt Mask on line 7                                           */
      __IOM uint32_t MR8        : 1;            /*!< [8..8] Interrupt Mask on line 8                                           */
      __IOM uint32_t MR9        : 1;            /*!< [9..9] Interrupt Mask on line 9                                           */
      __IOM uint32_t MR10       : 1;            /*!< [10..10] Interrupt Mask on line 10                                        */
      __IOM uint32_t MR11       : 1;            /*!< [11..11] Interrupt Mask on line 11                                        */
      __IOM uint32_t MR12       : 1;            /*!< [12..12] Interrupt Mask on line 12                                        */
      __IOM uint32_t MR13       : 1;            /*!< [13..13] Interrupt Mask on line 13                                        */
      __IOM uint32_t MR14       : 1;            /*!< [14..14] Interrupt Mask on line 14                                        */
      __IOM uint32_t MR15       : 1;            /*!< [15..15] Interrupt Mask on line 15                                        */
      __IOM uint32_t MR16       : 1;            /*!< [16..16] Interrupt Mask on line 16                                        */
      __IOM uint32_t MR17       : 1;            /*!< [17..17] Interrupt Mask on line 17                                        */
      __IOM uint32_t MR18       : 1;            /*!< [18..18] Interrupt Mask on line 18                                        */
      __IOM uint32_t MR19       : 1;            /*!< [19..19] Interrupt Mask on line 19                                        */
      __IOM uint32_t MR20       : 1;            /*!< [20..20] Interrupt Mask on line 20                                        */
      __IOM uint32_t MR21       : 1;            /*!< [21..21] Interrupt Mask on line 21                                        */
      __IOM uint32_t MR22       : 1;            /*!< [22..22] Interrupt Mask on line 22                                        */
      __IOM uint32_t MR23       : 1;            /*!< [23..23] Interrupt Mask on line 23                                        */
      __IOM uint32_t MR24       : 1;            /*!< [24..24] Interrupt Mask on line 24                                        */
      __IOM uint32_t MR25       : 1;            /*!< [25..25] Interrupt Mask on line 25                                        */
      __IOM uint32_t MR26       : 1;            /*!< [26..26] Interrupt Mask on line 26                                        */
      __IOM uint32_t MR27       : 1;            /*!< [27..27] Interrupt Mask on line 27                                        */
    } IMR_b;
  } ;
  
  union {
    __IOM uint32_t EMR;                         /*!< (@ 0x00000004) Event mask register (EXTI_EMR)                             */
    
    struct {
      __IOM uint32_t MR0        : 1;            /*!< [0..0] Event Mask on line 0                                               */
      __IOM uint32_t MR1        : 1;            /*!< [1..1] Event Mask on line 1                                               */
      __IOM uint32_t MR2        : 1;            /*!< [2..2] Event Mask on line 2                                               */
      __IOM uint32_t MR3        : 1;            /*!< [3..3] Event Mask on line 3                                               */
      __IOM uint32_t MR4        : 1;            /*!< [4..4] Event Mask on line 4                                               */
      __IOM uint32_t MR5        : 1;            /*!< [5..5] Event Mask on line 5                                               */
      __IOM uint32_t MR6        : 1;            /*!< [6..6] Event Mask on line 6                                               */
      __IOM uint32_t MR7        : 1;            /*!< [7..7] Event Mask on line 7                                               */
      __IOM uint32_t MR8        : 1;            /*!< [8..8] Event Mask on line 8                                               */
      __IOM uint32_t MR9        : 1;            /*!< [9..9] Event Mask on line 9                                               */
      __IOM uint32_t MR10       : 1;            /*!< [10..10] Event Mask on line 10                                            */
      __IOM uint32_t MR11       : 1;            /*!< [11..11] Event Mask on line 11                                            */
      __IOM uint32_t MR12       : 1;            /*!< [12..12] Event Mask on line 12                                            */
      __IOM uint32_t MR13       : 1;            /*!< [13..13] Event Mask on line 13                                            */
      __IOM uint32_t MR14       : 1;            /*!< [14..14] Event Mask on line 14                                            */
      __IOM uint32_t MR15       : 1;            /*!< [15..15] Event Mask on line 15                                            */
      __IOM uint32_t MR16       : 1;            /*!< [16..16] Event Mask on line 16                                            */
      __IOM uint32_t MR17       : 1;            /*!< [17..17] Event Mask on line 17                                            */
      __IOM uint32_t MR18       : 1;            /*!< [18..18] Event Mask on line 18                                            */
      __IOM uint32_t MR19       : 1;            /*!< [19..19] Event Mask on line 19                                            */
      __IOM uint32_t MR20       : 1;            /*!< [20..20] Event Mask on line 20                                            */
      __IOM uint32_t MR21       : 1;            /*!< [21..21] Event Mask on line 21                                            */
      __IOM uint32_t MR22       : 1;            /*!< [22..22] Event Mask on line 22                                            */
      __IOM uint32_t MR23       : 1;            /*!< [23..23] Event Mask on line 23                                            */
      __IOM uint32_t MR24       : 1;            /*!< [24..24] Event Mask on line 24                                            */
      __IOM uint32_t MR25       : 1;            /*!< [25..25] Event Mask on line 25                                            */
      __IOM uint32_t MR26       : 1;            /*!< [26..26] Event Mask on line 26                                            */
      __IOM uint32_t MR27       : 1;            /*!< [27..27] Event Mask on line 27                                            */
    } EMR_b;
  } ;
  
  union {
    __IOM uint32_t RTSR;                        /*!< (@ 0x00000008) Rising Trigger selection register (EXTI_RTSR)              */
    
    struct {
      __IOM uint32_t TR0        : 1;            /*!< [0..0] Rising trigger event configuration of line 0                       */
      __IOM uint32_t TR1        : 1;            /*!< [1..1] Rising trigger event configuration of line 1                       */
      __IOM uint32_t TR2        : 1;            /*!< [2..2] Rising trigger event configuration of line 2                       */
      __IOM uint32_t TR3        : 1;            /*!< [3..3] Rising trigger event configuration of line 3                       */
      __IOM uint32_t TR4        : 1;            /*!< [4..4] Rising trigger event configuration of line 4                       */
      __IOM uint32_t TR5        : 1;            /*!< [5..5] Rising trigger event configuration of line 5                       */
      __IOM uint32_t TR6        : 1;            /*!< [6..6] Rising trigger event configuration of line 6                       */
      __IOM uint32_t TR7        : 1;            /*!< [7..7] Rising trigger event configuration of line 7                       */
      __IOM uint32_t TR8        : 1;            /*!< [8..8] Rising trigger event configuration of line 8                       */
      __IOM uint32_t TR9        : 1;            /*!< [9..9] Rising trigger event configuration of line 9                       */
      __IOM uint32_t TR10       : 1;            /*!< [10..10] Rising trigger event configuration of line 10                    */
      __IOM uint32_t TR11       : 1;            /*!< [11..11] Rising trigger event configuration of line 11                    */
      __IOM uint32_t TR12       : 1;            /*!< [12..12] Rising trigger event configuration of line 12                    */
      __IOM uint32_t TR13       : 1;            /*!< [13..13] Rising trigger event configuration of line 13                    */
      __IOM uint32_t TR14       : 1;            /*!< [14..14] Rising trigger event configuration of line 14                    */
      __IOM uint32_t TR15       : 1;            /*!< [15..15] Rising trigger event configuration of line 15                    */
      __IOM uint32_t TR16       : 1;            /*!< [16..16] Rising trigger event configuration of line 16                    */
      __IOM uint32_t TR17       : 1;            /*!< [17..17] Rising trigger event configuration of line 17                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t TR19       : 1;            /*!< [19..19] Rising trigger event configuration of line 19                    */
    } RTSR_b;
  } ;
  
  union {
    __IOM uint32_t FTSR;                        /*!< (@ 0x0000000C) Falling Trigger selection register (EXTI_FTSR)             */
    
    struct {
      __IOM uint32_t TR0        : 1;            /*!< [0..0] Falling trigger event configuration of line 0                      */
      __IOM uint32_t TR1        : 1;            /*!< [1..1] Falling trigger event configuration of line 1                      */
      __IOM uint32_t TR2        : 1;            /*!< [2..2] Falling trigger event configuration of line 2                      */
      __IOM uint32_t TR3        : 1;            /*!< [3..3] Falling trigger event configuration of line 3                      */
      __IOM uint32_t TR4        : 1;            /*!< [4..4] Falling trigger event configuration of line 4                      */
      __IOM uint32_t TR5        : 1;            /*!< [5..5] Falling trigger event configuration of line 5                      */
      __IOM uint32_t TR6        : 1;            /*!< [6..6] Falling trigger event configuration of line 6                      */
      __IOM uint32_t TR7        : 1;            /*!< [7..7] Falling trigger event configuration of line 7                      */
      __IOM uint32_t TR8        : 1;            /*!< [8..8] Falling trigger event configuration of line 8                      */
      __IOM uint32_t TR9        : 1;            /*!< [9..9] Falling trigger event configuration of line 9                      */
      __IOM uint32_t TR10       : 1;            /*!< [10..10] Falling trigger event configuration of line 10                   */
      __IOM uint32_t TR11       : 1;            /*!< [11..11] Falling trigger event configuration of line 11                   */
      __IOM uint32_t TR12       : 1;            /*!< [12..12] Falling trigger event configuration of line 12                   */
      __IOM uint32_t TR13       : 1;            /*!< [13..13] Falling trigger event configuration of line 13                   */
      __IOM uint32_t TR14       : 1;            /*!< [14..14] Falling trigger event configuration of line 14                   */
      __IOM uint32_t TR15       : 1;            /*!< [15..15] Falling trigger event configuration of line 15                   */
      __IOM uint32_t TR16       : 1;            /*!< [16..16] Falling trigger event configuration of line 16                   */
      __IOM uint32_t TR17       : 1;            /*!< [17..17] Falling trigger event configuration of line 17                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t TR19       : 1;            /*!< [19..19] Falling trigger event configuration of line 19                   */
    } FTSR_b;
  } ;
  
  union {
    __IOM uint32_t SWIER;                       /*!< (@ 0x00000010) Software interrupt event register (EXTI_SWIER)             */
    
    struct {
      __IOM uint32_t SWIER0     : 1;            /*!< [0..0] Software Interrupt on line 0                                       */
      __IOM uint32_t SWIER1     : 1;            /*!< [1..1] Software Interrupt on line 1                                       */
      __IOM uint32_t SWIER2     : 1;            /*!< [2..2] Software Interrupt on line 2                                       */
      __IOM uint32_t SWIER3     : 1;            /*!< [3..3] Software Interrupt on line 3                                       */
      __IOM uint32_t SWIER4     : 1;            /*!< [4..4] Software Interrupt on line 4                                       */
      __IOM uint32_t SWIER5     : 1;            /*!< [5..5] Software Interrupt on line 5                                       */
      __IOM uint32_t SWIER6     : 1;            /*!< [6..6] Software Interrupt on line 6                                       */
      __IOM uint32_t SWIER7     : 1;            /*!< [7..7] Software Interrupt on line 7                                       */
      __IOM uint32_t SWIER8     : 1;            /*!< [8..8] Software Interrupt on line 8                                       */
      __IOM uint32_t SWIER9     : 1;            /*!< [9..9] Software Interrupt on line 9                                       */
      __IOM uint32_t SWIER10    : 1;            /*!< [10..10] Software Interrupt on line 10                                    */
      __IOM uint32_t SWIER11    : 1;            /*!< [11..11] Software Interrupt on line 11                                    */
      __IOM uint32_t SWIER12    : 1;            /*!< [12..12] Software Interrupt on line 12                                    */
      __IOM uint32_t SWIER13    : 1;            /*!< [13..13] Software Interrupt on line 13                                    */
      __IOM uint32_t SWIER14    : 1;            /*!< [14..14] Software Interrupt on line 14                                    */
      __IOM uint32_t SWIER15    : 1;            /*!< [15..15] Software Interrupt on line 15                                    */
      __IOM uint32_t SWIER16    : 1;            /*!< [16..16] Software Interrupt on line 16                                    */
      __IOM uint32_t SWIER17    : 1;            /*!< [17..17] Software Interrupt on line 17                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t SWIER19    : 1;            /*!< [19..19] Software Interrupt on line 19                                    */
    } SWIER_b;
  } ;
  
  union {
    __IOM uint32_t PR;                          /*!< (@ 0x00000014) Pending register (EXTI_PR)                                 */
    
    struct {
      __IOM uint32_t PR0        : 1;            /*!< [0..0] Pending bit 0                                                      */
      __IOM uint32_t PR1        : 1;            /*!< [1..1] Pending bit 1                                                      */
      __IOM uint32_t PR2        : 1;            /*!< [2..2] Pending bit 2                                                      */
      __IOM uint32_t PR3        : 1;            /*!< [3..3] Pending bit 3                                                      */
      __IOM uint32_t PR4        : 1;            /*!< [4..4] Pending bit 4                                                      */
      __IOM uint32_t PR5        : 1;            /*!< [5..5] Pending bit 5                                                      */
      __IOM uint32_t PR6        : 1;            /*!< [6..6] Pending bit 6                                                      */
      __IOM uint32_t PR7        : 1;            /*!< [7..7] Pending bit 7                                                      */
      __IOM uint32_t PR8        : 1;            /*!< [8..8] Pending bit 8                                                      */
      __IOM uint32_t PR9        : 1;            /*!< [9..9] Pending bit 9                                                      */
      __IOM uint32_t PR10       : 1;            /*!< [10..10] Pending bit 10                                                   */
      __IOM uint32_t PR11       : 1;            /*!< [11..11] Pending bit 11                                                   */
      __IOM uint32_t PR12       : 1;            /*!< [12..12] Pending bit 12                                                   */
      __IOM uint32_t PR13       : 1;            /*!< [13..13] Pending bit 13                                                   */
      __IOM uint32_t PR14       : 1;            /*!< [14..14] Pending bit 14                                                   */
      __IOM uint32_t PR15       : 1;            /*!< [15..15] Pending bit 15                                                   */
      __IOM uint32_t PR16       : 1;            /*!< [16..16] Pending bit 16                                                   */
      __IOM uint32_t PR17       : 1;            /*!< [17..17] Pending bit 17                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t PR19       : 1;            /*!< [19..19] Pending bit 19                                                   */
    } PR_b;
  } ;
} EXTI_Type;                                    /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           NVIC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Nested Vectored Interrupt       Controller (NVIC)
  */

typedef struct {                                /*!< (@ 0xE000E100) NVIC Structure                                             */
  
  union {
    __IOM uint32_t ISER;                        /*!< (@ 0x00000000) Interrupt Set Enable Register                              */
    
    struct {
      __IOM uint32_t SETENA     : 32;           /*!< [31..0] SETENA                                                            */
    } ISER_b;
  } ;
  __IM  uint32_t  RESERVED[31];
  
  union {
    __IOM uint32_t ICER;                        /*!< (@ 0x00000080) Interrupt Clear Enable Register                            */
    
    struct {
      __IOM uint32_t CLRENA     : 32;           /*!< [31..0] CLRENA                                                            */
    } ICER_b;
  } ;
  __IM  uint32_t  RESERVED1[31];
  
  union {
    __IOM uint32_t ISPR;                        /*!< (@ 0x00000100) Interrupt Set-Pending Register                             */
    
    struct {
      __IOM uint32_t SETPEND    : 32;           /*!< [31..0] SETPEND                                                           */
    } ISPR_b;
  } ;
  __IM  uint32_t  RESERVED2[31];
  
  union {
    __IOM uint32_t ICPR;                        /*!< (@ 0x00000180) Interrupt Clear-Pending Register                           */
    
    struct {
      __IOM uint32_t CLRPEND    : 32;           /*!< [31..0] CLRPEND                                                           */
    } ICPR_b;
  } ;
  __IM  uint32_t  RESERVED3[95];
  
  union {
    __IOM uint32_t IPR0;                        /*!< (@ 0x00000300) Interrupt Priority Register 0                              */
    
    struct {
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_00     : 2;            /*!< [7..6] PRI_00                                                             */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_01     : 2;            /*!< [15..14] PRI_01                                                           */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_02     : 2;            /*!< [23..22] PRI_02                                                           */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_03     : 2;            /*!< [31..30] PRI_03                                                           */
    } IPR0_b;
  } ;
  
  union {
    __IOM uint32_t IPR1;                        /*!< (@ 0x00000304) Interrupt Priority Register 1                              */
    
    struct {
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_40     : 2;            /*!< [7..6] PRI_40                                                             */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_41     : 2;            /*!< [15..14] PRI_41                                                           */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_42     : 2;            /*!< [23..22] PRI_42                                                           */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_43     : 2;            /*!< [31..30] PRI_43                                                           */
    } IPR1_b;
  } ;
  
  union {
    __IOM uint32_t IPR2;                        /*!< (@ 0x00000308) Interrupt Priority Register 2                              */
    
    struct {
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_80     : 2;            /*!< [7..6] PRI_80                                                             */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_81     : 2;            /*!< [15..14] PRI_81                                                           */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_82     : 2;            /*!< [23..22] PRI_82                                                           */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_83     : 2;            /*!< [31..30] PRI_83                                                           */
    } IPR2_b;
  } ;
  
  union {
    __IOM uint32_t IPR3;                        /*!< (@ 0x0000030C) Interrupt Priority Register 3                              */
    
    struct {
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_120    : 2;            /*!< [7..6] PRI_120                                                            */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_121    : 2;            /*!< [15..14] PRI_121                                                          */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_122    : 2;            /*!< [23..22] PRI_122                                                          */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_123    : 2;            /*!< [31..30] PRI_123                                                          */
    } IPR3_b;
  } ;
  
  union {
    __IOM uint32_t IPR4;                        /*!< (@ 0x00000310) Interrupt Priority Register 4                              */
    
    struct {
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_160    : 2;            /*!< [7..6] PRI_160                                                            */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_161    : 2;            /*!< [15..14] PRI_161                                                          */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_162    : 2;            /*!< [23..22] PRI_162                                                          */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_163    : 2;            /*!< [31..30] PRI_163                                                          */
    } IPR4_b;
  } ;
  
  union {
    __IOM uint32_t IPR5;                        /*!< (@ 0x00000314) Interrupt Priority Register 5                              */
    
    struct {
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_200    : 2;            /*!< [7..6] PRI_200                                                            */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_201    : 2;            /*!< [15..14] PRI_201                                                          */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_202    : 2;            /*!< [23..22] PRI_202                                                          */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_203    : 2;            /*!< [31..30] PRI_203                                                          */
    } IPR5_b;
  } ;
  
  union {
    __IOM uint32_t IPR6;                        /*!< (@ 0x00000318) Interrupt Priority Register 6                              */
    
    struct {
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_240    : 2;            /*!< [7..6] PRI_240                                                            */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_241    : 2;            /*!< [15..14] PRI_241                                                          */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_242    : 2;            /*!< [23..22] PRI_242                                                          */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_243    : 2;            /*!< [31..30] PRI_243                                                          */
    } IPR6_b;
  } ;
  
  union {
    __IOM uint32_t IPR7;                        /*!< (@ 0x0000031C) Interrupt Priority Register 7                              */
    
    struct {
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_280    : 2;            /*!< [7..6] PRI_280                                                            */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_281    : 2;            /*!< [15..14] PRI_281                                                          */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_282    : 2;            /*!< [23..22] PRI_282                                                          */
      __IM  uint32_t            : 6;
      __IOM uint32_t PRI_283    : 2;            /*!< [31..30] PRI_283                                                          */
    } IPR7_b;
  } ;
} NVIC_Type;                                    /*!< Size = 800 (0x320)                                                        */



/* =========================================================================================================================== */
/* ================                                            DMA                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA controller (DMA)
  */

typedef struct {                                /*!< (@ 0x40020000) DMA Structure                                              */
  
  union {
    __IM  uint32_t ISR;                         /*!< (@ 0x00000000) DMA interrupt status register (DMA_ISR)                    */
    
    struct {
      __IM  uint32_t GIF1       : 1;            /*!< [0..0] Channel 1 Global interrupt flag                                    */
      __IM  uint32_t TCIF1      : 1;            /*!< [1..1] Channel 1 Transfer Complete flag                                   */
      __IM  uint32_t HTIF1      : 1;            /*!< [2..2] Channel 1 Half Transfer Complete flag                              */
      __IM  uint32_t TEIF1      : 1;            /*!< [3..3] Channel 1 Transfer Error flag                                      */
      __IM  uint32_t GIF2       : 1;            /*!< [4..4] Channel 2 Global interrupt flag                                    */
      __IM  uint32_t TCIF2      : 1;            /*!< [5..5] Channel 2 Transfer Complete flag                                   */
      __IM  uint32_t HTIF2      : 1;            /*!< [6..6] Channel 2 Half Transfer Complete flag                              */
      __IM  uint32_t TEIF2      : 1;            /*!< [7..7] Channel 2 Transfer Error flag                                      */
      __IM  uint32_t GIF3       : 1;            /*!< [8..8] Channel 3 Global interrupt flag                                    */
      __IM  uint32_t TCIF3      : 1;            /*!< [9..9] Channel 3 Transfer Complete flag                                   */
      __IM  uint32_t HTIF3      : 1;            /*!< [10..10] Channel 3 Half Transfer Complete flag                            */
      __IM  uint32_t TEIF3      : 1;            /*!< [11..11] Channel 3 Transfer Error flag                                    */
      __IM  uint32_t GIF4       : 1;            /*!< [12..12] Channel 4 Global interrupt flag                                  */
      __IM  uint32_t TCIF4      : 1;            /*!< [13..13] Channel 4 Transfer Complete flag                                 */
      __IM  uint32_t HTIF4      : 1;            /*!< [14..14] Channel 4 Half Transfer Complete flag                            */
      __IM  uint32_t TEIF4      : 1;            /*!< [15..15] Channel 4 Transfer Error flag                                    */
      __IM  uint32_t GIF5       : 1;            /*!< [16..16] Channel 5 Global interrupt flag                                  */
      __IM  uint32_t TCIF5      : 1;            /*!< [17..17] Channel 5 Transfer Complete flag                                 */
      __IM  uint32_t HTIF5      : 1;            /*!< [18..18] Channel 5 Half Transfer Complete flag                            */
      __IM  uint32_t TEIF5      : 1;            /*!< [19..19] Channel 5 Transfer Error flag                                    */
      __IM  uint32_t GIF6       : 1;            /*!< [20..20] Channel 6 Global interrupt flag                                  */
      __IM  uint32_t TCIF6      : 1;            /*!< [21..21] Channel 6 Transfer Complete flag                                 */
      __IM  uint32_t HTIF6      : 1;            /*!< [22..22] Channel 6 Half Transfer Complete flag                            */
      __IM  uint32_t TEIF6      : 1;            /*!< [23..23] Channel 6 Transfer Error flag                                    */
      __IM  uint32_t GIF7       : 1;            /*!< [24..24] Channel 7 Global interrupt flag                                  */
      __IM  uint32_t TCIF7      : 1;            /*!< [25..25] Channel 7 Transfer Complete flag                                 */
      __IM  uint32_t HTIF7      : 1;            /*!< [26..26] Channel 7 Half Transfer Complete flag                            */
      __IM  uint32_t TEIF7      : 1;            /*!< [27..27] Channel 7 Transfer Error flag                                    */
    } ISR_b;
  } ;
  
  union {
    __OM  uint32_t IFCR;                        /*!< (@ 0x00000004) DMA interrupt flag clear register (DMA_IFCR)               */
    
    struct {
      __OM  uint32_t CGIF1      : 1;            /*!< [0..0] Channel 1 Global interrupt clear                                   */
      __OM  uint32_t CTCIF1     : 1;            /*!< [1..1] Channel 1 Transfer Complete clear                                  */
      __OM  uint32_t CHTIF1     : 1;            /*!< [2..2] Channel 1 Half Transfer clear                                      */
      __OM  uint32_t CTEIF1     : 1;            /*!< [3..3] Channel 1 Transfer Error clear                                     */
      __OM  uint32_t CGIF2      : 1;            /*!< [4..4] Channel 2 Global interrupt clear                                   */
      __OM  uint32_t CTCIF2     : 1;            /*!< [5..5] Channel 2 Transfer Complete clear                                  */
      __OM  uint32_t CHTIF2     : 1;            /*!< [6..6] Channel 2 Half Transfer clear                                      */
      __OM  uint32_t CTEIF2     : 1;            /*!< [7..7] Channel 2 Transfer Error clear                                     */
      __OM  uint32_t CGIF3      : 1;            /*!< [8..8] Channel 3 Global interrupt clear                                   */
      __OM  uint32_t CTCIF3     : 1;            /*!< [9..9] Channel 3 Transfer Complete clear                                  */
      __OM  uint32_t CHTIF3     : 1;            /*!< [10..10] Channel 3 Half Transfer clear                                    */
      __OM  uint32_t CTEIF3     : 1;            /*!< [11..11] Channel 3 Transfer Error clear                                   */
      __OM  uint32_t CGIF4      : 1;            /*!< [12..12] Channel 4 Global interrupt clear                                 */
      __OM  uint32_t CTCIF4     : 1;            /*!< [13..13] Channel 4 Transfer Complete clear                                */
      __OM  uint32_t CHTIF4     : 1;            /*!< [14..14] Channel 4 Half Transfer clear                                    */
      __OM  uint32_t CTEIF4     : 1;            /*!< [15..15] Channel 4 Transfer Error clear                                   */
      __OM  uint32_t CGIF5      : 1;            /*!< [16..16] Channel 5 Global interrupt clear                                 */
      __OM  uint32_t CTCIF5     : 1;            /*!< [17..17] Channel 5 Transfer Complete clear                                */
      __OM  uint32_t CHTIF5     : 1;            /*!< [18..18] Channel 5 Half Transfer clear                                    */
      __OM  uint32_t CTEIF5     : 1;            /*!< [19..19] Channel 5 Transfer Error clear                                   */
      __OM  uint32_t CGIF6      : 1;            /*!< [20..20] Channel 6 Global interrupt clear                                 */
      __OM  uint32_t CTCIF6     : 1;            /*!< [21..21] Channel 6 Transfer Complete clear                                */
      __OM  uint32_t CHTIF6     : 1;            /*!< [22..22] Channel 6 Half Transfer clear                                    */
      __OM  uint32_t CTEIF6     : 1;            /*!< [23..23] Channel 6 Transfer Error clear                                   */
      __OM  uint32_t CGIF7      : 1;            /*!< [24..24] Channel 7 Global interrupt clear                                 */
      __OM  uint32_t CTCIF7     : 1;            /*!< [25..25] Channel 7 Transfer Complete clear                                */
      __OM  uint32_t CHTIF7     : 1;            /*!< [26..26] Channel 7 Half Transfer clear                                    */
      __OM  uint32_t CTEIF7     : 1;            /*!< [27..27] Channel 7 Transfer Error clear                                   */
    } IFCR_b;
  } ;
  
  union {
    __IOM uint32_t CCR1;                        /*!< (@ 0x00000008) DMA channel configuration register (DMA_CCR)               */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t TCIE       : 1;            /*!< [1..1] Transfer complete interrupt enable                                 */
      __IOM uint32_t HTIE       : 1;            /*!< [2..2] Half Transfer interrupt enable                                     */
      __IOM uint32_t TEIE       : 1;            /*!< [3..3] Transfer error interrupt enable                                    */
      __IOM uint32_t DIR        : 1;            /*!< [4..4] Data transfer direction                                            */
      __IOM uint32_t CIRC       : 1;            /*!< [5..5] Circular mode                                                      */
      __IOM uint32_t PINC       : 1;            /*!< [6..6] Peripheral increment mode                                          */
      __IOM uint32_t MINC       : 1;            /*!< [7..7] Memory increment mode                                              */
      __IOM uint32_t PSIZE      : 2;            /*!< [9..8] Peripheral size                                                    */
      __IOM uint32_t MSIZE      : 2;            /*!< [11..10] Memory size                                                      */
      __IOM uint32_t PL         : 2;            /*!< [13..12] Channel Priority level                                           */
      __IOM uint32_t MEM2MEM    : 1;            /*!< [14..14] Memory to memory mode                                            */
    } CCR1_b;
  } ;
  
  union {
    __IOM uint32_t CNDTR1;                      /*!< (@ 0x0000000C) DMA channel 1 number of data register                      */
    
    struct {
      __IOM uint32_t NDT        : 16;           /*!< [15..0] Number of data to transfer                                        */
    } CNDTR1_b;
  } ;
  
  union {
    __IOM uint32_t CPAR1;                       /*!< (@ 0x00000010) DMA channel 1 peripheral address register                  */
    
    struct {
      __IOM uint32_t PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } CPAR1_b;
  } ;
  
  union {
    __IOM uint32_t CMAR1;                       /*!< (@ 0x00000014) DMA channel 1 memory address register                      */
    
    struct {
      __IOM uint32_t MA         : 32;           /*!< [31..0] Memory address                                                    */
    } CMAR1_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t CCR2;                        /*!< (@ 0x0000001C) DMA channel configuration register (DMA_CCR)               */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t TCIE       : 1;            /*!< [1..1] Transfer complete interrupt enable                                 */
      __IOM uint32_t HTIE       : 1;            /*!< [2..2] Half Transfer interrupt enable                                     */
      __IOM uint32_t TEIE       : 1;            /*!< [3..3] Transfer error interrupt enable                                    */
      __IOM uint32_t DIR        : 1;            /*!< [4..4] Data transfer direction                                            */
      __IOM uint32_t CIRC       : 1;            /*!< [5..5] Circular mode                                                      */
      __IOM uint32_t PINC       : 1;            /*!< [6..6] Peripheral increment mode                                          */
      __IOM uint32_t MINC       : 1;            /*!< [7..7] Memory increment mode                                              */
      __IOM uint32_t PSIZE      : 2;            /*!< [9..8] Peripheral size                                                    */
      __IOM uint32_t MSIZE      : 2;            /*!< [11..10] Memory size                                                      */
      __IOM uint32_t PL         : 2;            /*!< [13..12] Channel Priority level                                           */
      __IOM uint32_t MEM2MEM    : 1;            /*!< [14..14] Memory to memory mode                                            */
    } CCR2_b;
  } ;
  
  union {
    __IOM uint32_t CNDTR2;                      /*!< (@ 0x00000020) DMA channel 2 number of data register                      */
    
    struct {
      __IOM uint32_t NDT        : 16;           /*!< [15..0] Number of data to transfer                                        */
    } CNDTR2_b;
  } ;
  
  union {
    __IOM uint32_t CPAR2;                       /*!< (@ 0x00000024) DMA channel 2 peripheral address register                  */
    
    struct {
      __IOM uint32_t PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } CPAR2_b;
  } ;
  
  union {
    __IOM uint32_t CMAR2;                       /*!< (@ 0x00000028) DMA channel 2 memory address register                      */
    
    struct {
      __IOM uint32_t MA         : 32;           /*!< [31..0] Memory address                                                    */
    } CMAR2_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t CCR3;                        /*!< (@ 0x00000030) DMA channel configuration register (DMA_CCR)               */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t TCIE       : 1;            /*!< [1..1] Transfer complete interrupt enable                                 */
      __IOM uint32_t HTIE       : 1;            /*!< [2..2] Half Transfer interrupt enable                                     */
      __IOM uint32_t TEIE       : 1;            /*!< [3..3] Transfer error interrupt enable                                    */
      __IOM uint32_t DIR        : 1;            /*!< [4..4] Data transfer direction                                            */
      __IOM uint32_t CIRC       : 1;            /*!< [5..5] Circular mode                                                      */
      __IOM uint32_t PINC       : 1;            /*!< [6..6] Peripheral increment mode                                          */
      __IOM uint32_t MINC       : 1;            /*!< [7..7] Memory increment mode                                              */
      __IOM uint32_t PSIZE      : 2;            /*!< [9..8] Peripheral size                                                    */
      __IOM uint32_t MSIZE      : 2;            /*!< [11..10] Memory size                                                      */
      __IOM uint32_t PL         : 2;            /*!< [13..12] Channel Priority level                                           */
      __IOM uint32_t MEM2MEM    : 1;            /*!< [14..14] Memory to memory mode                                            */
    } CCR3_b;
  } ;
  
  union {
    __IOM uint32_t CNDTR3;                      /*!< (@ 0x00000034) DMA channel 3 number of data register                      */
    
    struct {
      __IOM uint32_t NDT        : 16;           /*!< [15..0] Number of data to transfer                                        */
    } CNDTR3_b;
  } ;
  
  union {
    __IOM uint32_t CPAR3;                       /*!< (@ 0x00000038) DMA channel 3 peripheral address register                  */
    
    struct {
      __IOM uint32_t PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } CPAR3_b;
  } ;
  
  union {
    __IOM uint32_t CMAR3;                       /*!< (@ 0x0000003C) DMA channel 3 memory address register                      */
    
    struct {
      __IOM uint32_t MA         : 32;           /*!< [31..0] Memory address                                                    */
    } CMAR3_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t CCR4;                        /*!< (@ 0x00000044) DMA channel configuration register (DMA_CCR)               */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t TCIE       : 1;            /*!< [1..1] Transfer complete interrupt enable                                 */
      __IOM uint32_t HTIE       : 1;            /*!< [2..2] Half Transfer interrupt enable                                     */
      __IOM uint32_t TEIE       : 1;            /*!< [3..3] Transfer error interrupt enable                                    */
      __IOM uint32_t DIR        : 1;            /*!< [4..4] Data transfer direction                                            */
      __IOM uint32_t CIRC       : 1;            /*!< [5..5] Circular mode                                                      */
      __IOM uint32_t PINC       : 1;            /*!< [6..6] Peripheral increment mode                                          */
      __IOM uint32_t MINC       : 1;            /*!< [7..7] Memory increment mode                                              */
      __IOM uint32_t PSIZE      : 2;            /*!< [9..8] Peripheral size                                                    */
      __IOM uint32_t MSIZE      : 2;            /*!< [11..10] Memory size                                                      */
      __IOM uint32_t PL         : 2;            /*!< [13..12] Channel Priority level                                           */
      __IOM uint32_t MEM2MEM    : 1;            /*!< [14..14] Memory to memory mode                                            */
    } CCR4_b;
  } ;
  
  union {
    __IOM uint32_t CNDTR4;                      /*!< (@ 0x00000048) DMA channel 4 number of data register                      */
    
    struct {
      __IOM uint32_t NDT        : 16;           /*!< [15..0] Number of data to transfer                                        */
    } CNDTR4_b;
  } ;
  
  union {
    __IOM uint32_t CPAR4;                       /*!< (@ 0x0000004C) DMA channel 4 peripheral address register                  */
    
    struct {
      __IOM uint32_t PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } CPAR4_b;
  } ;
  
  union {
    __IOM uint32_t CMAR4;                       /*!< (@ 0x00000050) DMA channel 4 memory address register                      */
    
    struct {
      __IOM uint32_t MA         : 32;           /*!< [31..0] Memory address                                                    */
    } CMAR4_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t CCR5;                        /*!< (@ 0x00000058) DMA channel configuration register (DMA_CCR)               */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t TCIE       : 1;            /*!< [1..1] Transfer complete interrupt enable                                 */
      __IOM uint32_t HTIE       : 1;            /*!< [2..2] Half Transfer interrupt enable                                     */
      __IOM uint32_t TEIE       : 1;            /*!< [3..3] Transfer error interrupt enable                                    */
      __IOM uint32_t DIR        : 1;            /*!< [4..4] Data transfer direction                                            */
      __IOM uint32_t CIRC       : 1;            /*!< [5..5] Circular mode                                                      */
      __IOM uint32_t PINC       : 1;            /*!< [6..6] Peripheral increment mode                                          */
      __IOM uint32_t MINC       : 1;            /*!< [7..7] Memory increment mode                                              */
      __IOM uint32_t PSIZE      : 2;            /*!< [9..8] Peripheral size                                                    */
      __IOM uint32_t MSIZE      : 2;            /*!< [11..10] Memory size                                                      */
      __IOM uint32_t PL         : 2;            /*!< [13..12] Channel Priority level                                           */
      __IOM uint32_t MEM2MEM    : 1;            /*!< [14..14] Memory to memory mode                                            */
    } CCR5_b;
  } ;
  
  union {
    __IOM uint32_t CNDTR5;                      /*!< (@ 0x0000005C) DMA channel 5 number of data register                      */
    
    struct {
      __IOM uint32_t NDT        : 16;           /*!< [15..0] Number of data to transfer                                        */
    } CNDTR5_b;
  } ;
  
  union {
    __IOM uint32_t CPAR5;                       /*!< (@ 0x00000060) DMA channel 5 peripheral address register                  */
    
    struct {
      __IOM uint32_t PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } CPAR5_b;
  } ;
  
  union {
    __IOM uint32_t CMAR5;                       /*!< (@ 0x00000064) DMA channel 5 memory address register                      */
    
    struct {
      __IOM uint32_t MA         : 32;           /*!< [31..0] Memory address                                                    */
    } CMAR5_b;
  } ;
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t CCR6;                        /*!< (@ 0x0000006C) DMA channel configuration register (DMA_CCR)               */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t TCIE       : 1;            /*!< [1..1] Transfer complete interrupt enable                                 */
      __IOM uint32_t HTIE       : 1;            /*!< [2..2] Half Transfer interrupt enable                                     */
      __IOM uint32_t TEIE       : 1;            /*!< [3..3] Transfer error interrupt enable                                    */
      __IOM uint32_t DIR        : 1;            /*!< [4..4] Data transfer direction                                            */
      __IOM uint32_t CIRC       : 1;            /*!< [5..5] Circular mode                                                      */
      __IOM uint32_t PINC       : 1;            /*!< [6..6] Peripheral increment mode                                          */
      __IOM uint32_t MINC       : 1;            /*!< [7..7] Memory increment mode                                              */
      __IOM uint32_t PSIZE      : 2;            /*!< [9..8] Peripheral size                                                    */
      __IOM uint32_t MSIZE      : 2;            /*!< [11..10] Memory size                                                      */
      __IOM uint32_t PL         : 2;            /*!< [13..12] Channel Priority level                                           */
      __IOM uint32_t MEM2MEM    : 1;            /*!< [14..14] Memory to memory mode                                            */
    } CCR6_b;
  } ;
  
  union {
    __IOM uint32_t CNDTR6;                      /*!< (@ 0x00000070) DMA channel 6 number of data register                      */
    
    struct {
      __IOM uint32_t NDT        : 16;           /*!< [15..0] Number of data to transfer                                        */
    } CNDTR6_b;
  } ;
  
  union {
    __IOM uint32_t CPAR6;                       /*!< (@ 0x00000074) DMA channel 6 peripheral address register                  */
    
    struct {
      __IOM uint32_t PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } CPAR6_b;
  } ;
  
  union {
    __IOM uint32_t CMAR6;                       /*!< (@ 0x00000078) DMA channel 6 memory address register                      */
    
    struct {
      __IOM uint32_t MA         : 32;           /*!< [31..0] Memory address                                                    */
    } CMAR6_b;
  } ;
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t CCR7;                        /*!< (@ 0x00000080) DMA channel configuration register (DMA_CCR)               */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t TCIE       : 1;            /*!< [1..1] Transfer complete interrupt enable                                 */
      __IOM uint32_t HTIE       : 1;            /*!< [2..2] Half Transfer interrupt enable                                     */
      __IOM uint32_t TEIE       : 1;            /*!< [3..3] Transfer error interrupt enable                                    */
      __IOM uint32_t DIR        : 1;            /*!< [4..4] Data transfer direction                                            */
      __IOM uint32_t CIRC       : 1;            /*!< [5..5] Circular mode                                                      */
      __IOM uint32_t PINC       : 1;            /*!< [6..6] Peripheral increment mode                                          */
      __IOM uint32_t MINC       : 1;            /*!< [7..7] Memory increment mode                                              */
      __IOM uint32_t PSIZE      : 2;            /*!< [9..8] Peripheral size                                                    */
      __IOM uint32_t MSIZE      : 2;            /*!< [11..10] Memory size                                                      */
      __IOM uint32_t PL         : 2;            /*!< [13..12] Channel Priority level                                           */
      __IOM uint32_t MEM2MEM    : 1;            /*!< [14..14] Memory to memory mode                                            */
    } CCR7_b;
  } ;
  
  union {
    __IOM uint32_t CNDTR7;                      /*!< (@ 0x00000084) DMA channel 7 number of data register                      */
    
    struct {
      __IOM uint32_t NDT        : 16;           /*!< [15..0] Number of data to transfer                                        */
    } CNDTR7_b;
  } ;
  
  union {
    __IOM uint32_t CPAR7;                       /*!< (@ 0x00000088) DMA channel 7 peripheral address register                  */
    
    struct {
      __IOM uint32_t PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } CPAR7_b;
  } ;
  
  union {
    __IOM uint32_t CMAR7;                       /*!< (@ 0x0000008C) DMA channel 7 memory address register                      */
    
    struct {
      __IOM uint32_t MA         : 32;           /*!< [31..0] Memory address                                                    */
    } CMAR7_b;
  } ;
} DMA_Type;                                     /*!< Size = 144 (0x90)                                                         */



/* =========================================================================================================================== */
/* ================                                            RCC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Reset and clock control (RCC)
  */

typedef struct {                                /*!< (@ 0x40021000) RCC Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) Clock control register                                     */
    
    struct {
      __IOM uint32_t HSION      : 1;            /*!< [0..0] Internal High Speed clock enable                                   */
      __IM  uint32_t HSIRDY     : 1;            /*!< [1..1] Internal High Speed clock ready flag                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t HSITRIM    : 5;            /*!< [7..3] Internal High Speed clock trimming                                 */
      __IM  uint32_t HSICAL     : 8;            /*!< [15..8] Internal High Speed clock Calibration                             */
      __IOM uint32_t HSEON      : 1;            /*!< [16..16] External High Speed clock enable                                 */
      __IM  uint32_t HSERDY     : 1;            /*!< [17..17] External High Speed clock ready flag                             */
      __IOM uint32_t HSEBYP     : 1;            /*!< [18..18] External High Speed clock Bypass                                 */
      __IOM uint32_t CSSON      : 1;            /*!< [19..19] Clock Security System enable                                     */
      __IM  uint32_t            : 4;
      __IOM uint32_t PLLON      : 1;            /*!< [24..24] PLL enable                                                       */
      __IM  uint32_t PLLRDY     : 1;            /*!< [25..25] PLL clock ready flag                                             */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t CFGR;                        /*!< (@ 0x00000004) Clock configuration register (RCC_CFGR)                    */
    
    struct {
      __IOM uint32_t SW         : 2;            /*!< [1..0] System clock Switch                                                */
      __IM  uint32_t SWS        : 2;            /*!< [3..2] System Clock Switch Status                                         */
      __IOM uint32_t HPRE       : 4;            /*!< [7..4] AHB prescaler                                                      */
      __IOM uint32_t PPRE       : 3;            /*!< [10..8] APB Low speed prescaler (APB1)                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t ADCPRE     : 1;            /*!< [14..14] ADC prescaler                                                    */
      __IOM uint32_t PLLSRC     : 2;            /*!< [16..15] PLL input clock source                                           */
      __IOM uint32_t PLLXTPRE   : 1;            /*!< [17..17] HSE divider for PLL entry                                        */
      __IOM uint32_t PLLMUL     : 4;            /*!< [21..18] PLL Multiplication Factor                                        */
      __IM  uint32_t            : 2;
      __IOM uint32_t MCO        : 3;            /*!< [26..24] Microcontroller clock output                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t MCOPRE     : 3;            /*!< [30..28] Microcontroller Clock Output Prescaler                           */
      __IOM uint32_t PLLNODIV   : 1;            /*!< [31..31] PLL clock not divided for MCO                                    */
    } CFGR_b;
  } ;
  
  union {
    __IOM uint32_t CIR;                         /*!< (@ 0x00000008) Clock interrupt register (RCC_CIR)                         */
    
    struct {
      __IM  uint32_t LSIRDYF    : 1;            /*!< [0..0] LSI Ready Interrupt flag                                           */
      __IM  uint32_t LSERDYF    : 1;            /*!< [1..1] LSE Ready Interrupt flag                                           */
      __IM  uint32_t HSIRDYF    : 1;            /*!< [2..2] HSI Ready Interrupt flag                                           */
      __IM  uint32_t HSERDYF    : 1;            /*!< [3..3] HSE Ready Interrupt flag                                           */
      __IM  uint32_t PLLRDYF    : 1;            /*!< [4..4] PLL Ready Interrupt flag                                           */
      __IM  uint32_t HSI14RDYF  : 1;            /*!< [5..5] HSI14 ready interrupt flag                                         */
      __IM  uint32_t HSI48RDYF  : 1;            /*!< [6..6] HSI48 ready interrupt flag                                         */
      __IM  uint32_t CSSF       : 1;            /*!< [7..7] Clock Security System Interrupt flag                               */
      __IOM uint32_t LSIRDYIE   : 1;            /*!< [8..8] LSI Ready Interrupt Enable                                         */
      __IOM uint32_t LSERDYIE   : 1;            /*!< [9..9] LSE Ready Interrupt Enable                                         */
      __IOM uint32_t HSIRDYIE   : 1;            /*!< [10..10] HSI Ready Interrupt Enable                                       */
      __IOM uint32_t HSERDYIE   : 1;            /*!< [11..11] HSE Ready Interrupt Enable                                       */
      __IOM uint32_t PLLRDYIE   : 1;            /*!< [12..12] PLL Ready Interrupt Enable                                       */
      __IOM uint32_t HSI14RDYE  : 1;            /*!< [13..13] HSI14 ready interrupt enable                                     */
      __IOM uint32_t HSI48RDYIE : 1;            /*!< [14..14] HSI48 ready interrupt enable                                     */
      __IM  uint32_t            : 1;
      __OM  uint32_t LSIRDYC    : 1;            /*!< [16..16] LSI Ready Interrupt Clear                                        */
      __OM  uint32_t LSERDYC    : 1;            /*!< [17..17] LSE Ready Interrupt Clear                                        */
      __OM  uint32_t HSIRDYC    : 1;            /*!< [18..18] HSI Ready Interrupt Clear                                        */
      __OM  uint32_t HSERDYC    : 1;            /*!< [19..19] HSE Ready Interrupt Clear                                        */
      __OM  uint32_t PLLRDYC    : 1;            /*!< [20..20] PLL Ready Interrupt Clear                                        */
      __OM  uint32_t HSI14RDYC  : 1;            /*!< [21..21] HSI 14 MHz Ready Interrupt Clear                                 */
      __OM  uint32_t HSI48RDYC  : 1;            /*!< [22..22] HSI48 Ready Interrupt Clear                                      */
      __OM  uint32_t CSSC       : 1;            /*!< [23..23] Clock security system interrupt clear                            */
    } CIR_b;
  } ;
  
  union {
    __IOM uint32_t APB2RSTR;                    /*!< (@ 0x0000000C) APB2 peripheral reset register (RCC_APB2RSTR)              */
    
    struct {
      __IOM uint32_t SYSCFGRST  : 1;            /*!< [0..0] SYSCFG and COMP reset                                              */
      __IM  uint32_t            : 8;
      __IOM uint32_t ADCRST     : 1;            /*!< [9..9] ADC interface reset                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIM1RST    : 1;            /*!< [11..11] TIM1 timer reset                                                 */
      __IOM uint32_t SPI1RST    : 1;            /*!< [12..12] SPI 1 reset                                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t USART1RST  : 1;            /*!< [14..14] USART1 reset                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t TIM16RST   : 1;            /*!< [17..17] TIM16 timer reset                                                */
      __IOM uint32_t TIM17RST   : 1;            /*!< [18..18] TIM17 timer reset                                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t DBGMCURST  : 1;            /*!< [22..22] Debug MCU reset                                                  */
    } APB2RSTR_b;
  } ;
  
  union {
    __IOM uint32_t APB1RSTR;                    /*!< (@ 0x00000010) APB1 peripheral reset register (RCC_APB1RSTR)              */
    
    struct {
      __IOM uint32_t TIM2RST    : 1;            /*!< [0..0] Timer 2 reset                                                      */
      __IOM uint32_t TIM3RST    : 1;            /*!< [1..1] Timer 3 reset                                                      */
      __IM  uint32_t            : 6;
      __IOM uint32_t TIM14RST   : 1;            /*!< [8..8] Timer 14 reset                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t WWDGRST    : 1;            /*!< [11..11] Window watchdog reset                                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t SPI2RST    : 1;            /*!< [14..14] SPI2 reset                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t USART2RST  : 1;            /*!< [17..17] USART 2 reset                                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t I2C1RST    : 1;            /*!< [21..21] I2C1 reset                                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBRST     : 1;            /*!< [23..23] USB interface reset                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t CANRST     : 1;            /*!< [25..25] CAN interface reset                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t CRSRST     : 1;            /*!< [27..27] Clock Recovery System interface reset                            */
      __IOM uint32_t PWRRST     : 1;            /*!< [28..28] Power interface reset                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t CECRST     : 1;            /*!< [30..30] HDMI CEC reset                                                   */
    } APB1RSTR_b;
  } ;
  
  union {
    __IOM uint32_t AHBENR;                      /*!< (@ 0x00000014) AHB Peripheral Clock enable register (RCC_AHBENR)          */
    
    struct {
      __IOM uint32_t DMAEN      : 1;            /*!< [0..0] DMA1 clock enable                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t SRAMEN     : 1;            /*!< [2..2] SRAM interface clock enable                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t FLITFEN    : 1;            /*!< [4..4] FLITF clock enable                                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t CRCEN      : 1;            /*!< [6..6] CRC clock enable                                                   */
      __IM  uint32_t            : 10;
      __IOM uint32_t IOPAEN     : 1;            /*!< [17..17] I/O port A clock enable                                          */
      __IOM uint32_t IOPBEN     : 1;            /*!< [18..18] I/O port B clock enable                                          */
      __IOM uint32_t IOPCEN     : 1;            /*!< [19..19] I/O port C clock enable                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t IOPFEN     : 1;            /*!< [22..22] I/O port F clock enable                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t TSCEN      : 1;            /*!< [24..24] Touch sensing controller clock enable                            */
    } AHBENR_b;
  } ;
  
  union {
    __IOM uint32_t APB2ENR;                     /*!< (@ 0x00000018) APB2 peripheral clock enable register (RCC_APB2ENR)        */
    
    struct {
      __IOM uint32_t SYSCFGEN   : 1;            /*!< [0..0] SYSCFG clock enable                                                */
      __IM  uint32_t            : 8;
      __IOM uint32_t ADCEN      : 1;            /*!< [9..9] ADC 1 interface clock enable                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIM1EN     : 1;            /*!< [11..11] TIM1 Timer clock enable                                          */
      __IOM uint32_t SPI1EN     : 1;            /*!< [12..12] SPI 1 clock enable                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t USART1EN   : 1;            /*!< [14..14] USART1 clock enable                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t TIM16EN    : 1;            /*!< [17..17] TIM16 timer clock enable                                         */
      __IOM uint32_t TIM17EN    : 1;            /*!< [18..18] TIM17 timer clock enable                                         */
      __IM  uint32_t            : 3;
      __IOM uint32_t DBGMCUEN   : 1;            /*!< [22..22] MCU debug module clock enable                                    */
    } APB2ENR_b;
  } ;
  
  union {
    __IOM uint32_t APB1ENR;                     /*!< (@ 0x0000001C) APB1 peripheral clock enable register (RCC_APB1ENR)        */
    
    struct {
      __IOM uint32_t TIM2EN     : 1;            /*!< [0..0] Timer 2 clock enable                                               */
      __IOM uint32_t TIM3EN     : 1;            /*!< [1..1] Timer 3 clock enable                                               */
      __IM  uint32_t            : 6;
      __IOM uint32_t TIM14EN    : 1;            /*!< [8..8] Timer 14 clock enable                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t WWDGEN     : 1;            /*!< [11..11] Window watchdog clock enable                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t SPI2EN     : 1;            /*!< [14..14] SPI 2 clock enable                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t USART2EN   : 1;            /*!< [17..17] USART 2 clock enable                                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t I2C1EN     : 1;            /*!< [21..21] I2C 1 clock enable                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t USBRST     : 1;            /*!< [23..23] USB interface clock enable                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t CANEN      : 1;            /*!< [25..25] CAN interface clock enable                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t CRSEN      : 1;            /*!< [27..27] Clock Recovery System interface clock enable                     */
      __IOM uint32_t PWREN      : 1;            /*!< [28..28] Power interface clock enable                                     */
      __IOM uint32_t DACEN      : 1;            /*!< [29..29] DAC interface clock enable                                       */
      __IOM uint32_t CECEN      : 1;            /*!< [30..30] HDMI CEC interface clock enable                                  */
    } APB1ENR_b;
  } ;
  
  union {
    __IOM uint32_t BDCR;                        /*!< (@ 0x00000020) Backup domain control register (RCC_BDCR)                  */
    
    struct {
      __IOM uint32_t LSEON      : 1;            /*!< [0..0] External Low Speed oscillator enable                               */
      __IM  uint32_t LSERDY     : 1;            /*!< [1..1] External Low Speed oscillator ready                                */
      __IOM uint32_t LSEBYP     : 1;            /*!< [2..2] External Low Speed oscillator bypass                               */
      __IOM uint32_t LSEDRV     : 2;            /*!< [4..3] LSE oscillator drive capability                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t RTCSEL     : 2;            /*!< [9..8] RTC clock source selection                                         */
      __IM  uint32_t            : 5;
      __IOM uint32_t RTCEN      : 1;            /*!< [15..15] RTC clock enable                                                 */
      __IOM uint32_t BDRST      : 1;            /*!< [16..16] Backup domain software reset                                     */
    } BDCR_b;
  } ;
  
  union {
    __IOM uint32_t CSR;                         /*!< (@ 0x00000024) Control/status register (RCC_CSR)                          */
    
    struct {
      __IOM uint32_t LSION      : 1;            /*!< [0..0] Internal low speed oscillator enable                               */
      __IM  uint32_t LSIRDY     : 1;            /*!< [1..1] Internal low speed oscillator ready                                */
      __IM  uint32_t            : 22;
      __IOM uint32_t RMVF       : 1;            /*!< [24..24] Remove reset flag                                                */
      __IOM uint32_t OBLRSTF    : 1;            /*!< [25..25] Option byte loader reset flag                                    */
      __IOM uint32_t PINRSTF    : 1;            /*!< [26..26] PIN reset flag                                                   */
      __IOM uint32_t PORRSTF    : 1;            /*!< [27..27] POR/PDR reset flag                                               */
      __IOM uint32_t SFTRSTF    : 1;            /*!< [28..28] Software reset flag                                              */
      __IOM uint32_t IWDGRSTF   : 1;            /*!< [29..29] Independent watchdog reset flag                                  */
      __IOM uint32_t WWDGRSTF   : 1;            /*!< [30..30] Window watchdog reset flag                                       */
      __IOM uint32_t LPWRRSTF   : 1;            /*!< [31..31] Low-power reset flag                                             */
    } CSR_b;
  } ;
  
  union {
    __IOM uint32_t AHBRSTR;                     /*!< (@ 0x00000028) AHB peripheral reset register                              */
    
    struct {
      __IM  uint32_t            : 17;
      __IOM uint32_t IOPARST    : 1;            /*!< [17..17] I/O port A reset                                                 */
      __IOM uint32_t IOPBRST    : 1;            /*!< [18..18] I/O port B reset                                                 */
      __IOM uint32_t IOPCRST    : 1;            /*!< [19..19] I/O port C reset                                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t IOPFRST    : 1;            /*!< [22..22] I/O port F reset                                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t TSCRST     : 1;            /*!< [24..24] Touch sensing controller reset                                   */
    } AHBRSTR_b;
  } ;
  
  union {
    __IOM uint32_t CFGR2;                       /*!< (@ 0x0000002C) Clock configuration register 2                             */
    
    struct {
      __IOM uint32_t PREDIV     : 4;            /*!< [3..0] PREDIV division factor                                             */
    } CFGR2_b;
  } ;
  
  union {
    __IOM uint32_t CFGR3;                       /*!< (@ 0x00000030) Clock configuration register 3                             */
    
    struct {
      __IOM uint32_t USART1SW   : 2;            /*!< [1..0] USART1 clock source selection                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t I2C1SW     : 1;            /*!< [4..4] I2C1 clock source selection                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t CECSW      : 1;            /*!< [6..6] HDMI CEC clock source selection                                    */
      __IOM uint32_t USBSW      : 1;            /*!< [7..7] USB clock source selection                                         */
      __IOM uint32_t ADCSW      : 1;            /*!< [8..8] ADC clock source selection                                         */
      __IM  uint32_t            : 7;
      __IOM uint32_t USART2SW   : 2;            /*!< [17..16] USART2 clock source selection                                    */
    } CFGR3_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000034) Clock control register 2                                   */
    
    struct {
      __IOM uint32_t HSI14ON    : 1;            /*!< [0..0] HSI14 clock enable                                                 */
      __IM  uint32_t HSI14RDY   : 1;            /*!< [1..1] HR14 clock ready flag                                              */
      __IOM uint32_t HSI14DIS   : 1;            /*!< [2..2] HSI14 clock request from ADC disable                               */
      __IOM uint32_t HSI14TRIM  : 5;            /*!< [7..3] HSI14 clock trimming                                               */
      __IM  uint32_t HSI14CAL   : 8;            /*!< [15..8] HSI14 clock calibration                                           */
      __IOM uint32_t HSI48ON    : 1;            /*!< [16..16] HSI48 clock enable                                               */
      __IM  uint32_t HSI48RDY   : 1;            /*!< [17..17] HSI48 clock ready flag                                           */
      __IM  uint32_t            : 6;
      __IM  uint32_t HSI48CAL   : 1;            /*!< [24..24] HSI48 factory clock calibration                                  */
    } CR2_b;
  } ;
} RCC_Type;                                     /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                          SYSCFG                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System configuration controller (SYSCFG)
  */

typedef struct {                                /*!< (@ 0x40010000) SYSCFG Structure                                           */
  
  union {
    __IOM uint32_t CFGR1;                       /*!< (@ 0x00000000) configuration register 1                                   */
    
    struct {
      __IOM uint32_t MEM_MODE   : 2;            /*!< [1..0] Memory mapping selection bits                                      */
      __IM  uint32_t            : 6;
      __IOM uint32_t ADC_DMA_RMP : 1;           /*!< [8..8] ADC DMA remapping bit                                              */
      __IOM uint32_t USART1_TX_DMA_RMP : 1;     /*!< [9..9] USART1_TX DMA remapping bit                                        */
      __IOM uint32_t USART1_RX_DMA_RMP : 1;     /*!< [10..10] USART1_RX DMA request remapping bit                              */
      __IOM uint32_t TIM16_DMA_RMP : 1;         /*!< [11..11] TIM16 DMA request remapping bit                                  */
      __IOM uint32_t TIM17_DMA_RMP : 1;         /*!< [12..12] TIM17 DMA request remapping bit                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t I2C_PB6_FM : 1;            /*!< [16..16] Fast Mode Plus (FM plus) driving capability activation
                                                     bits.                                                                     */
      __IOM uint32_t I2C_PB7_FM : 1;            /*!< [17..17] Fast Mode Plus (FM+) driving capability activation
                                                     bits.                                                                     */
      __IOM uint32_t I2C_PB8_FM : 1;            /*!< [18..18] Fast Mode Plus (FM+) driving capability activation
                                                     bits.                                                                     */
      __IOM uint32_t I2C_PB9_FM : 1;            /*!< [19..19] Fast Mode Plus (FM+) driving capability activation
                                                     bits.                                                                     */
      __IOM uint32_t I2C1_FM_plus : 1;          /*!< [20..20] FM+ driving capability activation for I2C1                       */
      __IOM uint32_t I2C2_FM_plus : 1;          /*!< [21..21] FM+ driving capability activation for I2C2                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t SPI2_DMA_RMP : 1;          /*!< [24..24] SPI2 DMA request remapping bit                                   */
      __IOM uint32_t USART2_DMA_RMP : 1;        /*!< [25..25] USART2 DMA request remapping bit                                 */
      __IOM uint32_t USART3_DMA_RMP : 1;        /*!< [26..26] USART3 DMA request remapping bit                                 */
      __IOM uint32_t I2C1_DMA_RMP : 1;          /*!< [27..27] I2C1 DMA request remapping bit                                   */
      __IOM uint32_t TIM1_DMA_RMP : 1;          /*!< [28..28] TIM1 DMA request remapping bit                                   */
      __IOM uint32_t TIM2_DMA_RMP : 1;          /*!< [29..29] TIM2 DMA request remapping bit                                   */
      __IOM uint32_t TIM3_DMA_RMP : 1;          /*!< [30..30] TIM3 DMA request remapping bit                                   */
    } CFGR1_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t EXTICR1;                     /*!< (@ 0x00000008) external interrupt configuration register 1                */
    
    struct {
      __IOM uint32_t EXTI0      : 4;            /*!< [3..0] EXTI 0 configuration bits                                          */
      __IOM uint32_t EXTI1      : 4;            /*!< [7..4] EXTI 1 configuration bits                                          */
      __IOM uint32_t EXTI2      : 4;            /*!< [11..8] EXTI 2 configuration bits                                         */
      __IOM uint32_t EXTI3      : 4;            /*!< [15..12] EXTI 3 configuration bits                                        */
    } EXTICR1_b;
  } ;
  
  union {
    __IOM uint32_t EXTICR2;                     /*!< (@ 0x0000000C) external interrupt configuration register 2                */
    
    struct {
      __IOM uint32_t EXTI4      : 4;            /*!< [3..0] EXTI 4 configuration bits                                          */
      __IOM uint32_t EXTI5      : 4;            /*!< [7..4] EXTI 5 configuration bits                                          */
      __IOM uint32_t EXTI6      : 4;            /*!< [11..8] EXTI 6 configuration bits                                         */
      __IOM uint32_t EXTI7      : 4;            /*!< [15..12] EXTI 7 configuration bits                                        */
    } EXTICR2_b;
  } ;
  
  union {
    __IOM uint32_t EXTICR3;                     /*!< (@ 0x00000010) external interrupt configuration register 3                */
    
    struct {
      __IOM uint32_t EXTI8      : 4;            /*!< [3..0] EXTI 8 configuration bits                                          */
      __IOM uint32_t EXTI9      : 4;            /*!< [7..4] EXTI 9 configuration bits                                          */
      __IOM uint32_t EXTI10     : 4;            /*!< [11..8] EXTI 10 configuration bits                                        */
      __IOM uint32_t EXTI11     : 4;            /*!< [15..12] EXTI 11 configuration bits                                       */
    } EXTICR3_b;
  } ;
  
  union {
    __IOM uint32_t EXTICR4;                     /*!< (@ 0x00000014) external interrupt configuration register 4                */
    
    struct {
      __IOM uint32_t EXTI12     : 4;            /*!< [3..0] EXTI 12 configuration bits                                         */
      __IOM uint32_t EXTI13     : 4;            /*!< [7..4] EXTI 13 configuration bits                                         */
      __IOM uint32_t EXTI14     : 4;            /*!< [11..8] EXTI 14 configuration bits                                        */
      __IOM uint32_t EXTI15     : 4;            /*!< [15..12] EXTI 15 configuration bits                                       */
    } EXTICR4_b;
  } ;
  
  union {
    __IOM uint32_t CFGR2;                       /*!< (@ 0x00000018) configuration register 2                                   */
    
    struct {
      __IOM uint32_t LOCUP_LOCK : 1;            /*!< [0..0] Cortex-M0 LOCKUP bit enable bit                                    */
      __IOM uint32_t SRAM_PARITY_LOCK : 1;      /*!< [1..1] SRAM parity lock bit                                               */
      __IOM uint32_t PVD_LOCK   : 1;            /*!< [2..2] PVD lock enable bit                                                */
      __IM  uint32_t            : 5;
      __IOM uint32_t SRAM_PEF   : 1;            /*!< [8..8] SRAM parity flag                                                   */
    } CFGR2_b;
  } ;
} SYSCFG_Type;                                  /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog-to-digital converter (ADC)
  */

typedef struct {                                /*!< (@ 0x40012400) ADC Structure                                              */
  
  union {
    __IOM uint32_t ISR;                         /*!< (@ 0x00000000) interrupt and status register                              */
    
    struct {
      __IOM uint32_t ADRDY      : 1;            /*!< [0..0] ADC ready                                                          */
      __IOM uint32_t EOSMP      : 1;            /*!< [1..1] End of sampling flag                                               */
      __IOM uint32_t EOC        : 1;            /*!< [2..2] End of conversion flag                                             */
      __IOM uint32_t EOS        : 1;            /*!< [3..3] End of sequence flag                                               */
      __IOM uint32_t OVR        : 1;            /*!< [4..4] ADC overrun                                                        */
      __IM  uint32_t            : 2;
      __IOM uint32_t AWD        : 1;            /*!< [7..7] Analog watchdog flag                                               */
    } ISR_b;
  } ;
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000004) interrupt enable register                                  */
    
    struct {
      __IOM uint32_t ADRDYIE    : 1;            /*!< [0..0] ADC ready interrupt enable                                         */
      __IOM uint32_t EOSMPIE    : 1;            /*!< [1..1] End of sampling flag interrupt enable                              */
      __IOM uint32_t EOCIE      : 1;            /*!< [2..2] End of conversion interrupt enable                                 */
      __IOM uint32_t EOSIE      : 1;            /*!< [3..3] End of conversion sequence interrupt enable                        */
      __IOM uint32_t OVRIE      : 1;            /*!< [4..4] Overrun interrupt enable                                           */
      __IM  uint32_t            : 2;
      __IOM uint32_t AWDIE      : 1;            /*!< [7..7] Analog watchdog interrupt enable                                   */
    } IER_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000008) control register                                           */
    
    struct {
      __IOM uint32_t ADEN       : 1;            /*!< [0..0] ADC enable command                                                 */
      __IOM uint32_t ADDIS      : 1;            /*!< [1..1] ADC disable command                                                */
      __IOM uint32_t ADSTART    : 1;            /*!< [2..2] ADC start conversion command                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t ADSTP      : 1;            /*!< [4..4] ADC stop conversion command                                        */
      __IM  uint32_t            : 26;
      __IOM uint32_t ADCAL      : 1;            /*!< [31..31] ADC calibration                                                  */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t CFGR1;                       /*!< (@ 0x0000000C) configuration register 1                                   */
    
    struct {
      __IOM uint32_t DMAEN      : 1;            /*!< [0..0] Direct memory access enable                                        */
      __IOM uint32_t DMACFG     : 1;            /*!< [1..1] Direct memery access configuration                                 */
      __IOM uint32_t SCANDIR    : 1;            /*!< [2..2] Scan sequence direction                                            */
      __IOM uint32_t RES        : 2;            /*!< [4..3] Data resolution                                                    */
      __IOM uint32_t ALIGN      : 1;            /*!< [5..5] Data alignment                                                     */
      __IOM uint32_t EXTSEL     : 3;            /*!< [8..6] External trigger selection                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t EXTEN      : 2;            /*!< [11..10] External trigger enable and polarity selection                   */
      __IOM uint32_t OVRMOD     : 1;            /*!< [12..12] Overrun management mode                                          */
      __IOM uint32_t CONT       : 1;            /*!< [13..13] Single / continuous conversion mode                              */
      __IOM uint32_t AUTDLY     : 1;            /*!< [14..14] Auto-delayed conversion mode                                     */
      __IOM uint32_t AUTOFF     : 1;            /*!< [15..15] Auto-off mode                                                    */
      __IOM uint32_t DISCEN     : 1;            /*!< [16..16] Discontinuous mode                                               */
      __IM  uint32_t            : 5;
      __IOM uint32_t AWDSGL     : 1;            /*!< [22..22] Enable the watchdog on a single channel or on all channels       */
      __IOM uint32_t AWDEN      : 1;            /*!< [23..23] Analog watchdog enable                                           */
      __IM  uint32_t            : 2;
      __IOM uint32_t AWDCH      : 5;            /*!< [30..26] Analog watchdog channel selection                                */
    } CFGR1_b;
  } ;
  
  union {
    __IOM uint32_t CFGR2;                       /*!< (@ 0x00000010) configuration register 2                                   */
    
    struct {
      __IM  uint32_t            : 30;
      __IOM uint32_t JITOFF_D2  : 1;            /*!< [30..30] JITOFF_D2                                                        */
      __IOM uint32_t JITOFF_D4  : 1;            /*!< [31..31] JITOFF_D4                                                        */
    } CFGR2_b;
  } ;
  
  union {
    __IOM uint32_t SMPR;                        /*!< (@ 0x00000014) sampling time register                                     */
    
    struct {
      __IOM uint32_t SMPR       : 3;            /*!< [2..0] Sampling time selection                                            */
    } SMPR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t TR;                          /*!< (@ 0x00000020) watchdog threshold register                                */
    
    struct {
      __IOM uint32_t LT         : 12;           /*!< [11..0] Analog watchdog lower threshold                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t HT         : 12;           /*!< [27..16] Analog watchdog higher threshold                                 */
    } TR_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t CHSELR;                      /*!< (@ 0x00000028) channel selection register                                 */
    
    struct {
      __IOM uint32_t CHSEL0     : 1;            /*!< [0..0] Channel-x selection                                                */
      __IOM uint32_t CHSEL1     : 1;            /*!< [1..1] Channel-x selection                                                */
      __IOM uint32_t CHSEL2     : 1;            /*!< [2..2] Channel-x selection                                                */
      __IOM uint32_t CHSEL3     : 1;            /*!< [3..3] Channel-x selection                                                */
      __IOM uint32_t CHSEL4     : 1;            /*!< [4..4] Channel-x selection                                                */
      __IOM uint32_t CHSEL5     : 1;            /*!< [5..5] Channel-x selection                                                */
      __IOM uint32_t CHSEL6     : 1;            /*!< [6..6] Channel-x selection                                                */
      __IOM uint32_t CHSEL7     : 1;            /*!< [7..7] Channel-x selection                                                */
      __IOM uint32_t CHSEL8     : 1;            /*!< [8..8] Channel-x selection                                                */
      __IOM uint32_t CHSEL9     : 1;            /*!< [9..9] Channel-x selection                                                */
      __IOM uint32_t CHSEL10    : 1;            /*!< [10..10] Channel-x selection                                              */
      __IOM uint32_t CHSEL11    : 1;            /*!< [11..11] Channel-x selection                                              */
      __IOM uint32_t CHSEL12    : 1;            /*!< [12..12] Channel-x selection                                              */
      __IOM uint32_t CHSEL13    : 1;            /*!< [13..13] Channel-x selection                                              */
      __IOM uint32_t CHSEL14    : 1;            /*!< [14..14] Channel-x selection                                              */
      __IOM uint32_t CHSEL15    : 1;            /*!< [15..15] Channel-x selection                                              */
      __IOM uint32_t CHSEL16    : 1;            /*!< [16..16] Channel-x selection                                              */
      __IOM uint32_t CHSEL17    : 1;            /*!< [17..17] Channel-x selection                                              */
      __IOM uint32_t CHSEL18    : 1;            /*!< [18..18] Channel-x selection                                              */
    } CHSELR_b;
  } ;
  __IM  uint32_t  RESERVED2[5];
  
  union {
    __IM  uint32_t DR;                          /*!< (@ 0x00000040) data register                                              */
    
    struct {
      __IM  uint32_t DATA       : 16;           /*!< [15..0] Converted data                                                    */
    } DR_b;
  } ;
  __IM  uint32_t  RESERVED3[177];
  
  union {
    __IOM uint32_t CCR;                         /*!< (@ 0x00000308) common configuration register                              */
    
    struct {
      __IM  uint32_t            : 22;
      __IOM uint32_t VREFEN     : 1;            /*!< [22..22] Temperature sensor and VREFINT enable                            */
      __IOM uint32_t TSEN       : 1;            /*!< [23..23] Temperature sensor enable                                        */
      __IOM uint32_t VBATEN     : 1;            /*!< [24..24] VBAT enable                                                      */
    } CCR_b;
  } ;
} ADC_Type;                                     /*!< Size = 780 (0x30c)                                                        */



/* =========================================================================================================================== */
/* ================                                          USART1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal synchronous asynchronous receiver       transmitter (USART1)
  */

typedef struct {                                /*!< (@ 0x40013800) USART1 Structure                                           */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) Control register 1                                         */
    
    struct {
      __IOM uint32_t UE         : 1;            /*!< [0..0] USART enable                                                       */
      __IOM uint32_t UESM       : 1;            /*!< [1..1] USART enable in Stop mode                                          */
      __IOM uint32_t RE         : 1;            /*!< [2..2] Receiver enable                                                    */
      __IOM uint32_t TE         : 1;            /*!< [3..3] Transmitter enable                                                 */
      __IOM uint32_t IDLEIE     : 1;            /*!< [4..4] IDLE interrupt enable                                              */
      __IOM uint32_t RXNEIE     : 1;            /*!< [5..5] RXNE interrupt enable                                              */
      __IOM uint32_t TCIE       : 1;            /*!< [6..6] Transmission complete interrupt enable                             */
      __IOM uint32_t TXEIE      : 1;            /*!< [7..7] interrupt enable                                                   */
      __IOM uint32_t PEIE       : 1;            /*!< [8..8] PE interrupt enable                                                */
      __IOM uint32_t PS         : 1;            /*!< [9..9] Parity selection                                                   */
      __IOM uint32_t PCE        : 1;            /*!< [10..10] Parity control enable                                            */
      __IOM uint32_t WAKE       : 1;            /*!< [11..11] Receiver wakeup method                                           */
      __IOM uint32_t M          : 1;            /*!< [12..12] Word length                                                      */
      __IOM uint32_t MME        : 1;            /*!< [13..13] Mute mode enable                                                 */
      __IOM uint32_t CMIE       : 1;            /*!< [14..14] Character match interrupt enable                                 */
      __IOM uint32_t OVER8      : 1;            /*!< [15..15] Oversampling mode                                                */
      __IOM uint32_t DEDT       : 5;            /*!< [20..16] Driver Enable deassertion time                                   */
      __IOM uint32_t DEAT       : 5;            /*!< [25..21] Driver Enable assertion time                                     */
      __IOM uint32_t RTOIE      : 1;            /*!< [26..26] Receiver timeout interrupt enable                                */
      __IOM uint32_t EOBIE      : 1;            /*!< [27..27] End of Block interrupt enable                                    */
      __IOM uint32_t M1         : 1;            /*!< [28..28] Word length                                                      */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) Control register 2                                         */
    
    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t ADDM7      : 1;            /*!< [4..4] 7-bit Address Detection/4-bit Address Detection                    */
      __IOM uint32_t LBDL       : 1;            /*!< [5..5] LIN break detection length                                         */
      __IOM uint32_t LBDIE      : 1;            /*!< [6..6] LIN break detection interrupt enable                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBCL       : 1;            /*!< [8..8] Last bit clock pulse                                               */
      __IOM uint32_t CPHA       : 1;            /*!< [9..9] Clock phase                                                        */
      __IOM uint32_t CPOL       : 1;            /*!< [10..10] Clock polarity                                                   */
      __IOM uint32_t CLKEN      : 1;            /*!< [11..11] Clock enable                                                     */
      __IOM uint32_t STOP       : 2;            /*!< [13..12] STOP bits                                                        */
      __IOM uint32_t LINEN      : 1;            /*!< [14..14] LIN mode enable                                                  */
      __IOM uint32_t SWAP       : 1;            /*!< [15..15] Swap TX/RX pins                                                  */
      __IOM uint32_t RXINV      : 1;            /*!< [16..16] RX pin active level inversion                                    */
      __IOM uint32_t TXINV      : 1;            /*!< [17..17] TX pin active level inversion                                    */
      __IOM uint32_t DATAINV    : 1;            /*!< [18..18] Binary data inversion                                            */
      __IOM uint32_t MSBFIRST   : 1;            /*!< [19..19] Most significant bit first                                       */
      __IOM uint32_t ABREN      : 1;            /*!< [20..20] Auto baud rate enable                                            */
      __IOM uint32_t ABRMOD     : 2;            /*!< [22..21] Auto baud rate mode                                              */
      __IOM uint32_t RTOEN      : 1;            /*!< [23..23] Receiver timeout enable                                          */
      __IOM uint32_t ADD0       : 4;            /*!< [27..24] Address of the USART node                                        */
      __IOM uint32_t ADD4       : 4;            /*!< [31..28] Address of the USART node                                        */
    } CR2_b;
  } ;
  
  union {
    __IOM uint32_t CR3;                         /*!< (@ 0x00000008) Control register 3                                         */
    
    struct {
      __IOM uint32_t EIE        : 1;            /*!< [0..0] Error interrupt enable                                             */
      __IOM uint32_t IREN       : 1;            /*!< [1..1] IrDA mode enable                                                   */
      __IOM uint32_t IRLP       : 1;            /*!< [2..2] IrDA low-power                                                     */
      __IOM uint32_t HDSEL      : 1;            /*!< [3..3] Half-duplex selection                                              */
      __IOM uint32_t NACK       : 1;            /*!< [4..4] Smartcard NACK enable                                              */
      __IOM uint32_t SCEN       : 1;            /*!< [5..5] Smartcard mode enable                                              */
      __IOM uint32_t DMAR       : 1;            /*!< [6..6] DMA enable receiver                                                */
      __IOM uint32_t DMAT       : 1;            /*!< [7..7] DMA enable transmitter                                             */
      __IOM uint32_t RTSE       : 1;            /*!< [8..8] RTS enable                                                         */
      __IOM uint32_t CTSE       : 1;            /*!< [9..9] CTS enable                                                         */
      __IOM uint32_t CTSIE      : 1;            /*!< [10..10] CTS interrupt enable                                             */
      __IOM uint32_t ONEBIT     : 1;            /*!< [11..11] One sample bit method enable                                     */
      __IOM uint32_t OVRDIS     : 1;            /*!< [12..12] Overrun Disable                                                  */
      __IOM uint32_t DDRE       : 1;            /*!< [13..13] DMA Disable on Reception Error                                   */
      __IOM uint32_t DEM        : 1;            /*!< [14..14] Driver enable mode                                               */
      __IOM uint32_t DEP        : 1;            /*!< [15..15] Driver enable polarity selection                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t SCARCNT    : 3;            /*!< [19..17] Smartcard auto-retry count                                       */
      __IOM uint32_t WUS        : 2;            /*!< [21..20] Wakeup from Stop mode interrupt flag selection                   */
      __IOM uint32_t WUFIE      : 1;            /*!< [22..22] Wakeup from Stop mode interrupt enable                           */
    } CR3_b;
  } ;
  
  union {
    __IOM uint32_t BRR;                         /*!< (@ 0x0000000C) Baud rate register                                         */
    
    struct {
      __IOM uint32_t DIV_Fraction : 4;          /*!< [3..0] fraction of USARTDIV                                               */
      __IOM uint32_t DIV_Mantissa : 12;         /*!< [15..4] mantissa of USARTDIV                                              */
    } BRR_b;
  } ;
  
  union {
    __IOM uint32_t GTPR;                        /*!< (@ 0x00000010) Guard time and prescaler register                          */
    
    struct {
      __IOM uint32_t PSC        : 8;            /*!< [7..0] Prescaler value                                                    */
      __IOM uint32_t GT         : 8;            /*!< [15..8] Guard time value                                                  */
    } GTPR_b;
  } ;
  
  union {
    __IOM uint32_t RTOR;                        /*!< (@ 0x00000014) Receiver timeout register                                  */
    
    struct {
      __IOM uint32_t RTO        : 24;           /*!< [23..0] Receiver timeout value                                            */
      __IOM uint32_t BLEN       : 8;            /*!< [31..24] Block Length                                                     */
    } RTOR_b;
  } ;
  
  union {
    __IOM uint32_t RQR;                         /*!< (@ 0x00000018) Request register                                           */
    
    struct {
      __IOM uint32_t ABRRQ      : 1;            /*!< [0..0] Auto baud rate request                                             */
      __IOM uint32_t SBKRQ      : 1;            /*!< [1..1] Send break request                                                 */
      __IOM uint32_t MMRQ       : 1;            /*!< [2..2] Mute mode request                                                  */
      __IOM uint32_t RXFRQ      : 1;            /*!< [3..3] Receive data flush request                                         */
      __IOM uint32_t TXFRQ      : 1;            /*!< [4..4] Transmit data flush request                                        */
    } RQR_b;
  } ;
  
  union {
    __IM  uint32_t ISR;                         /*!< (@ 0x0000001C) Interrupt & status register                                */
    
    struct {
      __IM  uint32_t PE         : 1;            /*!< [0..0] Parity error                                                       */
      __IM  uint32_t FE         : 1;            /*!< [1..1] Framing error                                                      */
      __IM  uint32_t NF         : 1;            /*!< [2..2] Noise detected flag                                                */
      __IM  uint32_t ORE        : 1;            /*!< [3..3] Overrun error                                                      */
      __IM  uint32_t IDLE       : 1;            /*!< [4..4] Idle line detected                                                 */
      __IM  uint32_t RXNE       : 1;            /*!< [5..5] Read data register not empty                                       */
      __IM  uint32_t TC         : 1;            /*!< [6..6] Transmission complete                                              */
      __IM  uint32_t TXE        : 1;            /*!< [7..7] Transmit data register empty                                       */
      __IM  uint32_t LBDF       : 1;            /*!< [8..8] LIN break detection flag                                           */
      __IM  uint32_t CTSIF      : 1;            /*!< [9..9] CTS interrupt flag                                                 */
      __IM  uint32_t CTS        : 1;            /*!< [10..10] CTS flag                                                         */
      __IM  uint32_t RTOF       : 1;            /*!< [11..11] Receiver timeout                                                 */
      __IM  uint32_t EOBF       : 1;            /*!< [12..12] End of block flag                                                */
      __IM  uint32_t            : 1;
      __IM  uint32_t ABRE       : 1;            /*!< [14..14] Auto baud rate error                                             */
      __IM  uint32_t ABRF       : 1;            /*!< [15..15] Auto baud rate flag                                              */
      __IM  uint32_t BUSY       : 1;            /*!< [16..16] Busy flag                                                        */
      __IM  uint32_t CMF        : 1;            /*!< [17..17] character match flag                                             */
      __IM  uint32_t SBKF       : 1;            /*!< [18..18] Send break flag                                                  */
      __IM  uint32_t RWU        : 1;            /*!< [19..19] Receiver wakeup from Mute mode                                   */
      __IM  uint32_t WUF        : 1;            /*!< [20..20] Wakeup from Stop mode flag                                       */
      __IM  uint32_t TEACK      : 1;            /*!< [21..21] Transmit enable acknowledge flag                                 */
      __IM  uint32_t REACK      : 1;            /*!< [22..22] Receive enable acknowledge flag                                  */
    } ISR_b;
  } ;
  
  union {
    __IOM uint32_t ICR;                         /*!< (@ 0x00000020) Interrupt flag clear register                              */
    
    struct {
      __IOM uint32_t PECF       : 1;            /*!< [0..0] Parity error clear flag                                            */
      __IOM uint32_t FECF       : 1;            /*!< [1..1] Framing error clear flag                                           */
      __IOM uint32_t NCF        : 1;            /*!< [2..2] Noise detected clear flag                                          */
      __IOM uint32_t ORECF      : 1;            /*!< [3..3] Overrun error clear flag                                           */
      __IOM uint32_t IDLECF     : 1;            /*!< [4..4] Idle line detected clear flag                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t TCCF       : 1;            /*!< [6..6] Transmission complete clear flag                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBDCF      : 1;            /*!< [8..8] LIN break detection clear flag                                     */
      __IOM uint32_t CTSCF      : 1;            /*!< [9..9] CTS clear flag                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t RTOCF      : 1;            /*!< [11..11] Receiver timeout clear flag                                      */
      __IOM uint32_t EOBCF      : 1;            /*!< [12..12] End of timeout clear flag                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t CMCF       : 1;            /*!< [17..17] Character match clear flag                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t WUCF       : 1;            /*!< [20..20] Wakeup from Stop mode clear flag                                 */
    } ICR_b;
  } ;
  
  union {
    __IM  uint32_t RDR;                         /*!< (@ 0x00000024) Receive data register                                      */
    
    struct {
      __IM  uint32_t RDR        : 9;            /*!< [8..0] Receive data value                                                 */
    } RDR_b;
  } ;
  
  union {
    __IOM uint32_t TDR;                         /*!< (@ 0x00000028) Transmit data register                                     */
    
    struct {
      __IOM uint32_t TDR        : 9;            /*!< [8..0] Transmit data value                                                */
    } TDR_b;
  } ;
} USART1_Type;                                  /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           COMP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Comparator (COMP)
  */

typedef struct {                                /*!< (@ 0x4001001C) COMP Structure                                             */
  
  union {
    __IOM uint32_t CSR;                         /*!< (@ 0x00000000) control and status register                                */
    
    struct {
      __IOM uint32_t COMP1EN    : 1;            /*!< [0..0] Comparator 1 enable                                                */
      __IOM uint32_t COMP1_INP_DAC : 1;         /*!< [1..1] COMP1_INP_DAC                                                      */
      __IOM uint32_t COMP1MODE  : 2;            /*!< [3..2] Comparator 1 mode                                                  */
      __IOM uint32_t COMP1INSEL : 3;            /*!< [6..4] Comparator 1 inverting input selection                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t COMP1OUTSEL : 3;           /*!< [10..8] Comparator 1 output selection                                     */
      __IOM uint32_t COMP1POL   : 1;            /*!< [11..11] Comparator 1 output polarity                                     */
      __IOM uint32_t COMP1HYST  : 2;            /*!< [13..12] Comparator 1 hysteresis                                          */
      __IM  uint32_t COMP1OUT   : 1;            /*!< [14..14] Comparator 1 output                                              */
      __IOM uint32_t COMP1LOCK  : 1;            /*!< [15..15] Comparator 1 lock                                                */
      __IOM uint32_t COMP2EN    : 1;            /*!< [16..16] Comparator 2 enable                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t COMP2MODE  : 2;            /*!< [19..18] Comparator 2 mode                                                */
      __IOM uint32_t COMP2INSEL : 3;            /*!< [22..20] Comparator 2 inverting input selection                           */
      __IOM uint32_t WNDWEN     : 1;            /*!< [23..23] Window mode enable                                               */
      __IOM uint32_t COMP2OUTSEL : 3;           /*!< [26..24] Comparator 2 output selection                                    */
      __IOM uint32_t COMP2POL   : 1;            /*!< [27..27] Comparator 2 output polarity                                     */
      __IOM uint32_t COMP2HYST  : 2;            /*!< [29..28] Comparator 2 hysteresis                                          */
      __IM  uint32_t COMP2OUT   : 1;            /*!< [30..30] Comparator 2 output                                              */
      __IOM uint32_t COMP2LOCK  : 1;            /*!< [31..31] Comparator 2 lock                                                */
    } CSR_b;
  } ;
} COMP_Type;                                    /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real-time clock (RTC)
  */

typedef struct {                                /*!< (@ 0x40002800) RTC Structure                                              */
  
  union {
    __IOM uint32_t TR;                          /*!< (@ 0x00000000) time register                                              */
    
    struct {
      __IOM uint32_t SU         : 4;            /*!< [3..0] Second units in BCD format                                         */
      __IOM uint32_t ST         : 3;            /*!< [6..4] Second tens in BCD format                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t MNU        : 4;            /*!< [11..8] Minute units in BCD format                                        */
      __IOM uint32_t MNT        : 3;            /*!< [14..12] Minute tens in BCD format                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t HU         : 4;            /*!< [19..16] Hour units in BCD format                                         */
      __IOM uint32_t HT         : 2;            /*!< [21..20] Hour tens in BCD format                                          */
      __IOM uint32_t PM         : 1;            /*!< [22..22] AM/PM notation                                                   */
    } TR_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000004) date register                                              */
    
    struct {
      __IOM uint32_t DU         : 4;            /*!< [3..0] Date units in BCD format                                           */
      __IOM uint32_t DT         : 2;            /*!< [5..4] Date tens in BCD format                                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t MU         : 4;            /*!< [11..8] Month units in BCD format                                         */
      __IOM uint32_t MT         : 1;            /*!< [12..12] Month tens in BCD format                                         */
      __IOM uint32_t WDU        : 3;            /*!< [15..13] Week day units                                                   */
      __IOM uint32_t YU         : 4;            /*!< [19..16] Year units in BCD format                                         */
      __IOM uint32_t YT         : 4;            /*!< [23..20] Year tens in BCD format                                          */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000008) control register                                           */
    
    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t TSEDGE     : 1;            /*!< [3..3] Time-stamp event active edge                                       */
      __IOM uint32_t REFCKON    : 1;            /*!< [4..4] RTC_REFIN reference clock detection enable (50 or 60
                                                     Hz)                                                                       */
      __IOM uint32_t BYPSHAD    : 1;            /*!< [5..5] Bypass the shadow registers                                        */
      __IOM uint32_t FMT        : 1;            /*!< [6..6] Hour format                                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t ALRAE      : 1;            /*!< [8..8] Alarm A enable                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t TSE        : 1;            /*!< [11..11] timestamp enable                                                 */
      __IOM uint32_t ALRAIE     : 1;            /*!< [12..12] Alarm A interrupt enable                                         */
      __IM  uint32_t            : 2;
      __IOM uint32_t TSIE       : 1;            /*!< [15..15] Time-stamp interrupt enable                                      */
      __OM  uint32_t ADD1H      : 1;            /*!< [16..16] Add 1 hour (summer time change)                                  */
      __OM  uint32_t SUB1H      : 1;            /*!< [17..17] Subtract 1 hour (winter time change)                             */
      __IOM uint32_t BKP        : 1;            /*!< [18..18] Backup                                                           */
      __IOM uint32_t COSEL      : 1;            /*!< [19..19] Calibration output selection                                     */
      __IOM uint32_t POL        : 1;            /*!< [20..20] Output polarity                                                  */
      __IOM uint32_t OSEL       : 2;            /*!< [22..21] Output selection                                                 */
      __IOM uint32_t COE        : 1;            /*!< [23..23] Calibration output enable                                        */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ISR;                         /*!< (@ 0x0000000C) initialization and status register                         */
    
    struct {
      __IM  uint32_t ALRAWF     : 1;            /*!< [0..0] Alarm A write flag                                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t SHPF       : 1;            /*!< [3..3] Shift operation pending                                            */
      __IM  uint32_t INITS      : 1;            /*!< [4..4] Initialization status flag                                         */
      __IOM uint32_t RSF        : 1;            /*!< [5..5] Registers synchronization flag                                     */
      __IM  uint32_t INITF      : 1;            /*!< [6..6] Initialization flag                                                */
      __IOM uint32_t INIT       : 1;            /*!< [7..7] Initialization mode                                                */
      __IOM uint32_t ALRAF      : 1;            /*!< [8..8] Alarm A flag                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t TSF        : 1;            /*!< [11..11] Time-stamp flag                                                  */
      __IOM uint32_t TSOVF      : 1;            /*!< [12..12] Time-stamp overflow flag                                         */
      __IOM uint32_t TAMP1F     : 1;            /*!< [13..13] RTC_TAMP1 detection flag                                         */
      __IOM uint32_t TAMP2F     : 1;            /*!< [14..14] RTC_TAMP2 detection flag                                         */
      __IM  uint32_t            : 1;
      __IM  uint32_t RECALPF    : 1;            /*!< [16..16] Recalibration pending Flag                                       */
    } ISR_b;
  } ;
  
  union {
    __IOM uint32_t PRER;                        /*!< (@ 0x00000010) prescaler register                                         */
    
    struct {
      __IOM uint32_t PREDIV_S   : 15;           /*!< [14..0] Synchronous prescaler factor                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t PREDIV_A   : 7;            /*!< [22..16] Asynchronous prescaler factor                                    */
    } PRER_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t ALRMAR;                      /*!< (@ 0x0000001C) alarm A register                                           */
    
    struct {
      __IOM uint32_t SU         : 4;            /*!< [3..0] Second units in BCD format.                                        */
      __IOM uint32_t ST         : 3;            /*!< [6..4] Second tens in BCD format.                                         */
      __IOM uint32_t MSK1       : 1;            /*!< [7..7] Alarm A seconds mask                                               */
      __IOM uint32_t MNU        : 4;            /*!< [11..8] Minute units in BCD format.                                       */
      __IOM uint32_t MNT        : 3;            /*!< [14..12] Minute tens in BCD format.                                       */
      __IOM uint32_t MSK2       : 1;            /*!< [15..15] Alarm A minutes mask                                             */
      __IOM uint32_t HU         : 4;            /*!< [19..16] Hour units in BCD format.                                        */
      __IOM uint32_t HT         : 2;            /*!< [21..20] Hour tens in BCD format.                                         */
      __IOM uint32_t PM         : 1;            /*!< [22..22] AM/PM notation                                                   */
      __IOM uint32_t MSK3       : 1;            /*!< [23..23] Alarm A hours mask                                               */
      __IOM uint32_t DU         : 4;            /*!< [27..24] Date units or day in BCD format.                                 */
      __IOM uint32_t DT         : 2;            /*!< [29..28] Date tens in BCD format.                                         */
      __IOM uint32_t WDSEL      : 1;            /*!< [30..30] Week day selection                                               */
      __IOM uint32_t MSK4       : 1;            /*!< [31..31] Alarm A date mask                                                */
    } ALRMAR_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __OM  uint32_t WPR;                         /*!< (@ 0x00000024) write protection register                                  */
    
    struct {
      __OM  uint32_t KEY        : 8;            /*!< [7..0] Write protection key                                               */
    } WPR_b;
  } ;
  
  union {
    __IM  uint32_t SSR;                         /*!< (@ 0x00000028) sub second register                                        */
    
    struct {
      __IM  uint32_t SS         : 16;           /*!< [15..0] Sub second value                                                  */
    } SSR_b;
  } ;
  
  union {
    __OM  uint32_t SHIFTR;                      /*!< (@ 0x0000002C) shift control register                                     */
    
    struct {
      __OM  uint32_t SUBFS      : 15;           /*!< [14..0] Subtract a fraction of a second                                   */
      __IM  uint32_t            : 16;
      __OM  uint32_t ADD1S      : 1;            /*!< [31..31] Reserved                                                         */
    } SHIFTR_b;
  } ;
  
  union {
    __IM  uint32_t TSTR;                        /*!< (@ 0x00000030) timestamp time register                                    */
    
    struct {
      __IM  uint32_t SU         : 4;            /*!< [3..0] Second units in BCD format.                                        */
      __IM  uint32_t ST         : 3;            /*!< [6..4] Second tens in BCD format.                                         */
      __IM  uint32_t            : 1;
      __IM  uint32_t MNU        : 4;            /*!< [11..8] Minute units in BCD format.                                       */
      __IM  uint32_t MNT        : 3;            /*!< [14..12] Minute tens in BCD format.                                       */
      __IM  uint32_t            : 1;
      __IM  uint32_t HU         : 4;            /*!< [19..16] Hour units in BCD format.                                        */
      __IM  uint32_t HT         : 2;            /*!< [21..20] Hour tens in BCD format.                                         */
      __IM  uint32_t PM         : 1;            /*!< [22..22] AM/PM notation                                                   */
    } TSTR_b;
  } ;
  
  union {
    __IM  uint32_t TSDR;                        /*!< (@ 0x00000034) timestamp date register                                    */
    
    struct {
      __IM  uint32_t DU         : 4;            /*!< [3..0] Date units in BCD format                                           */
      __IM  uint32_t DT         : 2;            /*!< [5..4] Date tens in BCD format                                            */
      __IM  uint32_t            : 2;
      __IM  uint32_t MU         : 4;            /*!< [11..8] Month units in BCD format                                         */
      __IM  uint32_t MT         : 1;            /*!< [12..12] Month tens in BCD format                                         */
      __IM  uint32_t WDU        : 3;            /*!< [15..13] Week day units                                                   */
    } TSDR_b;
  } ;
  
  union {
    __IM  uint32_t TSSSR;                       /*!< (@ 0x00000038) time-stamp sub second register                             */
    
    struct {
      __IM  uint32_t SS         : 16;           /*!< [15..0] Sub second value                                                  */
    } TSSSR_b;
  } ;
  
  union {
    __IOM uint32_t CALR;                        /*!< (@ 0x0000003C) calibration register                                       */
    
    struct {
      __IOM uint32_t CALM       : 9;            /*!< [8..0] Calibration minus                                                  */
      __IM  uint32_t            : 4;
      __IOM uint32_t CALW16     : 1;            /*!< [13..13] Reserved                                                         */
      __IOM uint32_t CALW8      : 1;            /*!< [14..14] Use a 16-second calibration cycle period                         */
      __IOM uint32_t CALP       : 1;            /*!< [15..15] Use an 8-second calibration cycle period                         */
    } CALR_b;
  } ;
  
  union {
    __IOM uint32_t TAFCR;                       /*!< (@ 0x00000040) tamper and alternate function configuration register       */
    
    struct {
      __IOM uint32_t TAMP1E     : 1;            /*!< [0..0] RTC_TAMP1 input detection enable                                   */
      __IOM uint32_t TAMP1TRG   : 1;            /*!< [1..1] Active level for RTC_TAMP1 input                                   */
      __IOM uint32_t TAMPIE     : 1;            /*!< [2..2] Tamper interrupt enable                                            */
      __IOM uint32_t TAMP2E     : 1;            /*!< [3..3] RTC_TAMP2 input detection enable                                   */
      __IOM uint32_t TAMP2_TRG  : 1;            /*!< [4..4] Active level for RTC_TAMP2 input                                   */
      __IM  uint32_t            : 2;
      __IOM uint32_t TAMPTS     : 1;            /*!< [7..7] Activate timestamp on tamper detection event                       */
      __IOM uint32_t TAMPFREQ   : 3;            /*!< [10..8] Tamper sampling frequency                                         */
      __IOM uint32_t TAMPFLT    : 2;            /*!< [12..11] RTC_TAMPx filter count                                           */
      __IOM uint32_t TAMP_PRCH  : 2;            /*!< [14..13] RTC_TAMPx precharge duration                                     */
      __IOM uint32_t TAMP_PUDIS : 1;            /*!< [15..15] RTC_TAMPx pull-up disable                                        */
      __IM  uint32_t            : 2;
      __IOM uint32_t PC13VALUE  : 1;            /*!< [18..18] RTC_ALARM output type/PC13 value                                 */
      __IOM uint32_t PC13MODE   : 1;            /*!< [19..19] PC13 mode                                                        */
      __IOM uint32_t PC14VALUE  : 1;            /*!< [20..20] PC14 value                                                       */
      __IOM uint32_t PC14MODE   : 1;            /*!< [21..21] PC14 mode                                                        */
      __IOM uint32_t PC15VALUE  : 1;            /*!< [22..22] PC15 value                                                       */
      __IOM uint32_t PC15MODE   : 1;            /*!< [23..23] PC15 mode                                                        */
    } TAFCR_b;
  } ;
  
  union {
    __IOM uint32_t ALRMASSR;                    /*!< (@ 0x00000044) alarm A sub second register                                */
    
    struct {
      __IOM uint32_t SS         : 15;           /*!< [14..0] Sub seconds value                                                 */
      __IM  uint32_t            : 9;
      __IOM uint32_t MASKSS     : 4;            /*!< [27..24] Mask the most-significant bits starting at this bit              */
    } ALRMASSR_b;
  } ;
  __IM  uint32_t  RESERVED2[2];
  
  union {
    __IOM uint32_t BKP0R;                       /*!< (@ 0x00000050) backup register                                            */
    
    struct {
      __IOM uint32_t BKP        : 32;           /*!< [31..0] BKP                                                               */
    } BKP0R_b;
  } ;
  
  union {
    __IOM uint32_t BKP1R;                       /*!< (@ 0x00000054) backup register                                            */
    
    struct {
      __IOM uint32_t BKP        : 32;           /*!< [31..0] BKP                                                               */
    } BKP1R_b;
  } ;
  
  union {
    __IOM uint32_t BKP2R;                       /*!< (@ 0x00000058) backup register                                            */
    
    struct {
      __IOM uint32_t BKP        : 32;           /*!< [31..0] BKP                                                               */
    } BKP2R_b;
  } ;
  
  union {
    __IOM uint32_t BKP3R;                       /*!< (@ 0x0000005C) backup register                                            */
    
    struct {
      __IOM uint32_t BKP        : 32;           /*!< [31..0] BKP                                                               */
    } BKP3R_b;
  } ;
  
  union {
    __IOM uint32_t BKP4R;                       /*!< (@ 0x00000060) backup register                                            */
    
    struct {
      __IOM uint32_t BKP        : 32;           /*!< [31..0] BKP                                                               */
    } BKP4R_b;
  } ;
} RTC_Type;                                     /*!< Size = 100 (0x64)                                                         */



/* =========================================================================================================================== */
/* ================                                           TIM16                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM16)
  */

typedef struct {                                /*!< (@ 0x40014400) TIM16 Structure                                            */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32_t CEN        : 1;            /*!< [0..0] Counter enable                                                     */
      __IOM uint32_t UDIS       : 1;            /*!< [1..1] Update disable                                                     */
      __IOM uint32_t URS        : 1;            /*!< [2..2] Update request source                                              */
      __IOM uint32_t OPM        : 1;            /*!< [3..3] One-pulse mode                                                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t ARPE       : 1;            /*!< [7..7] Auto-reload preload enable                                         */
      __IOM uint32_t CKD        : 2;            /*!< [9..8] Clock division                                                     */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) control register 2                                         */
    
    struct {
      __IOM uint32_t CCPC       : 1;            /*!< [0..0] Capture/compare preloaded control                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t CCUS       : 1;            /*!< [2..2] Capture/compare control update selection                           */
      __IOM uint32_t CCDS       : 1;            /*!< [3..3] Capture/compare DMA selection                                      */
      __IM  uint32_t            : 4;
      __IOM uint32_t OIS1       : 1;            /*!< [8..8] Output Idle state 1                                                */
      __IOM uint32_t OIS1N      : 1;            /*!< [9..9] Output Idle state 1                                                */
    } CR2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t DIER;                        /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
    
    struct {
      __IOM uint32_t UIE        : 1;            /*!< [0..0] Update interrupt enable                                            */
      __IOM uint32_t CC1IE      : 1;            /*!< [1..1] Capture/Compare 1 interrupt enable                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t COMIE      : 1;            /*!< [5..5] COM interrupt enable                                               */
      __IOM uint32_t TIE        : 1;            /*!< [6..6] Trigger interrupt enable                                           */
      __IOM uint32_t BIE        : 1;            /*!< [7..7] Break interrupt enable                                             */
      __IOM uint32_t UDE        : 1;            /*!< [8..8] Update DMA request enable                                          */
      __IOM uint32_t CC1DE      : 1;            /*!< [9..9] Capture/Compare 1 DMA request enable                               */
      __IM  uint32_t            : 4;
      __IOM uint32_t TDE        : 1;            /*!< [14..14] Trigger DMA request enable                                       */
    } DIER_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000010) status register                                            */
    
    struct {
      __IOM uint32_t UIF        : 1;            /*!< [0..0] Update interrupt flag                                              */
      __IOM uint32_t CC1IF      : 1;            /*!< [1..1] Capture/compare 1 interrupt flag                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t COMIF      : 1;            /*!< [5..5] COM interrupt flag                                                 */
      __IOM uint32_t TIF        : 1;            /*!< [6..6] Trigger interrupt flag                                             */
      __IOM uint32_t BIF        : 1;            /*!< [7..7] Break interrupt flag                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t CC1OF      : 1;            /*!< [9..9] Capture/Compare 1 overcapture flag                                 */
    } SR_b;
  } ;
  
  union {
    __OM  uint32_t EGR;                         /*!< (@ 0x00000014) event generation register                                  */
    
    struct {
      __OM  uint32_t UG         : 1;            /*!< [0..0] Update generation                                                  */
      __OM  uint32_t CC1G       : 1;            /*!< [1..1] Capture/compare 1 generation                                       */
      __IM  uint32_t            : 3;
      __OM  uint32_t COMG       : 1;            /*!< [5..5] Capture/Compare control update generation                          */
      __OM  uint32_t TG         : 1;            /*!< [6..6] Trigger generation                                                 */
      __OM  uint32_t BG         : 1;            /*!< [7..7] Break generation                                                   */
    } EGR_b;
  } ;
  
  union {
    union {
      __IOM uint32_t CCMR1_Output;              /*!< (@ 0x00000018) capture/compare mode register (output mode)                */
      
      struct {
        __IOM uint32_t CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32_t OC1FE    : 1;            /*!< [2..2] Output Compare 1 fast enable                                       */
        __IOM uint32_t OC1PE    : 1;            /*!< [3..3] Output Compare 1 preload enable                                    */
        __IOM uint32_t OC1M     : 3;            /*!< [6..4] Output Compare 1 mode                                              */
      } CCMR1_Output_b;
    } ;
    
    union {
      __IOM uint32_t CCMR1_Input;               /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
      
      struct {
        __IOM uint32_t CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32_t IC1PSC   : 2;            /*!< [3..2] Input capture 1 prescaler                                          */
        __IOM uint32_t IC1F     : 4;            /*!< [7..4] Input capture 1 filter                                             */
      } CCMR1_Input_b;
    } ;
  };
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t CCER;                        /*!< (@ 0x00000020) capture/compare enable register                            */
    
    struct {
      __IOM uint32_t CC1E       : 1;            /*!< [0..0] Capture/Compare 1 output enable                                    */
      __IOM uint32_t CC1P       : 1;            /*!< [1..1] Capture/Compare 1 output Polarity                                  */
      __IOM uint32_t CC1NE      : 1;            /*!< [2..2] Capture/Compare 1 complementary output enable                      */
      __IOM uint32_t CC1NP      : 1;            /*!< [3..3] Capture/Compare 1 output Polarity                                  */
    } CCER_b;
  } ;
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000024) counter                                                    */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] counter value                                                     */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t PSC;                         /*!< (@ 0x00000028) prescaler                                                  */
    
    struct {
      __IOM uint32_t PSC        : 16;           /*!< [15..0] Prescaler value                                                   */
    } PSC_b;
  } ;
  
  union {
    __IOM uint32_t ARR;                         /*!< (@ 0x0000002C) auto-reload register                                       */
    
    struct {
      __IOM uint32_t ARR        : 16;           /*!< [15..0] Auto-reload value                                                 */
    } ARR_b;
  } ;
  
  union {
    __IOM uint32_t RCR;                         /*!< (@ 0x00000030) repetition counter register                                */
    
    struct {
      __IOM uint32_t REP        : 8;            /*!< [7..0] Repetition counter value                                           */
    } RCR_b;
  } ;
  
  union {
    __IOM uint32_t CCR1;                        /*!< (@ 0x00000034) capture/compare register 1                                 */
    
    struct {
      __IOM uint32_t CCR1       : 16;           /*!< [15..0] Capture/Compare 1 value                                           */
    } CCR1_b;
  } ;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t BDTR;                        /*!< (@ 0x00000044) break and dead-time register                               */
    
    struct {
      __IOM uint32_t DTG        : 8;            /*!< [7..0] Dead-time generator setup                                          */
      __IOM uint32_t LOCK       : 2;            /*!< [9..8] Lock configuration                                                 */
      __IOM uint32_t OSSI       : 1;            /*!< [10..10] Off-state selection for Idle mode                                */
      __IOM uint32_t OSSR       : 1;            /*!< [11..11] Off-state selection for Run mode                                 */
      __IOM uint32_t BKE        : 1;            /*!< [12..12] Break enable                                                     */
      __IOM uint32_t BKP        : 1;            /*!< [13..13] Break polarity                                                   */
      __IOM uint32_t AOE        : 1;            /*!< [14..14] Automatic output enable                                          */
      __IOM uint32_t MOE        : 1;            /*!< [15..15] Main output enable                                               */
    } BDTR_b;
  } ;
  
  union {
    __IOM uint32_t DCR;                         /*!< (@ 0x00000048) DMA control register                                       */
    
    struct {
      __IOM uint32_t DBA        : 5;            /*!< [4..0] DMA base address                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t DBL        : 5;            /*!< [12..8] DMA burst length                                                  */
    } DCR_b;
  } ;
  
  union {
    __IOM uint32_t DMAR;                        /*!< (@ 0x0000004C) DMA address for full transfer                              */
    
    struct {
      __IOM uint32_t DMAB       : 16;           /*!< [15..0] DMA register for burst accesses                                   */
    } DMAR_b;
  } ;
} TIM16_Type;                                   /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                            TSC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Touch sensing controller (TSC)
  */

typedef struct {                                /*!< (@ 0x40024000) TSC Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) control register                                           */
    
    struct {
      __IOM uint32_t TSCE       : 1;            /*!< [0..0] Touch sensing controller enable                                    */
      __IOM uint32_t START      : 1;            /*!< [1..1] Start a new acquisition                                            */
      __IOM uint32_t AM         : 1;            /*!< [2..2] Acquisition mode                                                   */
      __IOM uint32_t SYNCPOL    : 1;            /*!< [3..3] Synchronization pin polarity                                       */
      __IOM uint32_t IODEF      : 1;            /*!< [4..4] I/O Default mode                                                   */
      __IOM uint32_t MCV        : 3;            /*!< [7..5] Max count value                                                    */
      __IM  uint32_t            : 4;
      __IOM uint32_t PGPSC      : 3;            /*!< [14..12] pulse generator prescaler                                        */
      __IOM uint32_t SSPSC      : 1;            /*!< [15..15] Spread spectrum prescaler                                        */
      __IOM uint32_t SSE        : 1;            /*!< [16..16] Spread spectrum enable                                           */
      __IOM uint32_t SSD        : 7;            /*!< [23..17] Spread spectrum deviation                                        */
      __IOM uint32_t CTPL       : 4;            /*!< [27..24] Charge transfer pulse low                                        */
      __IOM uint32_t CTPH       : 4;            /*!< [31..28] Charge transfer pulse high                                       */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000004) interrupt enable register                                  */
    
    struct {
      __IOM uint32_t EOAIE      : 1;            /*!< [0..0] End of acquisition interrupt enable                                */
      __IOM uint32_t MCEIE      : 1;            /*!< [1..1] Max count error interrupt enable                                   */
    } IER_b;
  } ;
  
  union {
    __IOM uint32_t ICR;                         /*!< (@ 0x00000008) interrupt clear register                                   */
    
    struct {
      __IOM uint32_t EOAIC      : 1;            /*!< [0..0] End of acquisition interrupt clear                                 */
      __IOM uint32_t MCEIC      : 1;            /*!< [1..1] Max count error interrupt clear                                    */
    } ICR_b;
  } ;
  
  union {
    __IOM uint32_t ISR;                         /*!< (@ 0x0000000C) interrupt status register                                  */
    
    struct {
      __IOM uint32_t EOAF       : 1;            /*!< [0..0] End of acquisition flag                                            */
      __IOM uint32_t MCEF       : 1;            /*!< [1..1] Max count error flag                                               */
    } ISR_b;
  } ;
  
  union {
    __IOM uint32_t IOHCR;                       /*!< (@ 0x00000010) I/O hysteresis control register                            */
    
    struct {
      __IOM uint32_t G1_IO1     : 1;            /*!< [0..0] G1_IO1 Schmitt trigger hysteresis mode                             */
      __IOM uint32_t G1_IO2     : 1;            /*!< [1..1] G1_IO2 Schmitt trigger hysteresis mode                             */
      __IOM uint32_t G1_IO3     : 1;            /*!< [2..2] G1_IO3 Schmitt trigger hysteresis mode                             */
      __IOM uint32_t G1_IO4     : 1;            /*!< [3..3] G1_IO4 Schmitt trigger hysteresis mode                             */
      __IOM uint32_t G2_IO1     : 1;            /*!< [4..4] G2_IO1 Schmitt trigger hysteresis mode                             */
      __IOM uint32_t G2_IO2     : 1;            /*!< [5..5] G2_IO2 Schmitt trigger hysteresis mode                             */
      __IOM uint32_t G2_IO3     : 1;            /*!< [6..6] G2_IO3 Schmitt trigger hysteresis mode                             */
      __IOM uint32_t G2_IO4     : 1;            /*!< [7..7] G2_IO4 Schmitt trigger hysteresis mode                             */
      __IOM uint32_t G3_IO1     : 1;            /*!< [8..8] G3_IO1 Schmitt trigger hysteresis mode                             */
      __IOM uint32_t G3_IO2     : 1;            /*!< [9..9] G3_IO2 Schmitt trigger hysteresis mode                             */
      __IOM uint32_t G3_IO3     : 1;            /*!< [10..10] G3_IO3 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G3_IO4     : 1;            /*!< [11..11] G3_IO4 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G4_IO1     : 1;            /*!< [12..12] G4_IO1 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G4_IO2     : 1;            /*!< [13..13] G4_IO2 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G4_IO3     : 1;            /*!< [14..14] G4_IO3 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G4_IO4     : 1;            /*!< [15..15] G4_IO4 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G5_IO1     : 1;            /*!< [16..16] G5_IO1 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G5_IO2     : 1;            /*!< [17..17] G5_IO2 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G5_IO3     : 1;            /*!< [18..18] G5_IO3 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G5_IO4     : 1;            /*!< [19..19] G5_IO4 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G6_IO1     : 1;            /*!< [20..20] G6_IO1 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G6_IO2     : 1;            /*!< [21..21] G6_IO2 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G6_IO3     : 1;            /*!< [22..22] G6_IO3 Schmitt trigger hysteresis mode                           */
      __IOM uint32_t G6_IO4     : 1;            /*!< [23..23] G6_IO4 Schmitt trigger hysteresis mode                           */
    } IOHCR_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t IOASCR;                      /*!< (@ 0x00000018) I/O analog switch control register                         */
    
    struct {
      __IOM uint32_t G1_IO1     : 1;            /*!< [0..0] G1_IO1 analog switch enable                                        */
      __IOM uint32_t G1_IO2     : 1;            /*!< [1..1] G1_IO2 analog switch enable                                        */
      __IOM uint32_t G1_IO3     : 1;            /*!< [2..2] G1_IO3 analog switch enable                                        */
      __IOM uint32_t G1_IO4     : 1;            /*!< [3..3] G1_IO4 analog switch enable                                        */
      __IOM uint32_t G2_IO1     : 1;            /*!< [4..4] G2_IO1 analog switch enable                                        */
      __IOM uint32_t G2_IO2     : 1;            /*!< [5..5] G2_IO2 analog switch enable                                        */
      __IOM uint32_t G2_IO3     : 1;            /*!< [6..6] G2_IO3 analog switch enable                                        */
      __IOM uint32_t G2_IO4     : 1;            /*!< [7..7] G2_IO4 analog switch enable                                        */
      __IOM uint32_t G3_IO1     : 1;            /*!< [8..8] G3_IO1 analog switch enable                                        */
      __IOM uint32_t G3_IO2     : 1;            /*!< [9..9] G3_IO2 analog switch enable                                        */
      __IOM uint32_t G3_IO3     : 1;            /*!< [10..10] G3_IO3 analog switch enable                                      */
      __IOM uint32_t G3_IO4     : 1;            /*!< [11..11] G3_IO4 analog switch enable                                      */
      __IOM uint32_t G4_IO1     : 1;            /*!< [12..12] G4_IO1 analog switch enable                                      */
      __IOM uint32_t G4_IO2     : 1;            /*!< [13..13] G4_IO2 analog switch enable                                      */
      __IOM uint32_t G4_IO3     : 1;            /*!< [14..14] G4_IO3 analog switch enable                                      */
      __IOM uint32_t G4_IO4     : 1;            /*!< [15..15] G4_IO4 analog switch enable                                      */
      __IOM uint32_t G5_IO1     : 1;            /*!< [16..16] G5_IO1 analog switch enable                                      */
      __IOM uint32_t G5_IO2     : 1;            /*!< [17..17] G5_IO2 analog switch enable                                      */
      __IOM uint32_t G5_IO3     : 1;            /*!< [18..18] G5_IO3 analog switch enable                                      */
      __IOM uint32_t G5_IO4     : 1;            /*!< [19..19] G5_IO4 analog switch enable                                      */
      __IOM uint32_t G6_IO1     : 1;            /*!< [20..20] G6_IO1 analog switch enable                                      */
      __IOM uint32_t G6_IO2     : 1;            /*!< [21..21] G6_IO2 analog switch enable                                      */
      __IOM uint32_t G6_IO3     : 1;            /*!< [22..22] G6_IO3 analog switch enable                                      */
      __IOM uint32_t G6_IO4     : 1;            /*!< [23..23] G6_IO4 analog switch enable                                      */
    } IOASCR_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t IOSCR;                       /*!< (@ 0x00000020) I/O sampling control register                              */
    
    struct {
      __IOM uint32_t G1_IO1     : 1;            /*!< [0..0] G1_IO1 sampling mode                                               */
      __IOM uint32_t G1_IO2     : 1;            /*!< [1..1] G1_IO2 sampling mode                                               */
      __IOM uint32_t G1_IO3     : 1;            /*!< [2..2] G1_IO3 sampling mode                                               */
      __IOM uint32_t G1_IO4     : 1;            /*!< [3..3] G1_IO4 sampling mode                                               */
      __IOM uint32_t G2_IO1     : 1;            /*!< [4..4] G2_IO1 sampling mode                                               */
      __IOM uint32_t G2_IO2     : 1;            /*!< [5..5] G2_IO2 sampling mode                                               */
      __IOM uint32_t G2_IO3     : 1;            /*!< [6..6] G2_IO3 sampling mode                                               */
      __IOM uint32_t G2_IO4     : 1;            /*!< [7..7] G2_IO4 sampling mode                                               */
      __IOM uint32_t G3_IO1     : 1;            /*!< [8..8] G3_IO1 sampling mode                                               */
      __IOM uint32_t G3_IO2     : 1;            /*!< [9..9] G3_IO2 sampling mode                                               */
      __IOM uint32_t G3_IO3     : 1;            /*!< [10..10] G3_IO3 sampling mode                                             */
      __IOM uint32_t G3_IO4     : 1;            /*!< [11..11] G3_IO4 sampling mode                                             */
      __IOM uint32_t G4_IO1     : 1;            /*!< [12..12] G4_IO1 sampling mode                                             */
      __IOM uint32_t G4_IO2     : 1;            /*!< [13..13] G4_IO2 sampling mode                                             */
      __IOM uint32_t G4_IO3     : 1;            /*!< [14..14] G4_IO3 sampling mode                                             */
      __IOM uint32_t G4_IO4     : 1;            /*!< [15..15] G4_IO4 sampling mode                                             */
      __IOM uint32_t G5_IO1     : 1;            /*!< [16..16] G5_IO1 sampling mode                                             */
      __IOM uint32_t G5_IO2     : 1;            /*!< [17..17] G5_IO2 sampling mode                                             */
      __IOM uint32_t G5_IO3     : 1;            /*!< [18..18] G5_IO3 sampling mode                                             */
      __IOM uint32_t G5_IO4     : 1;            /*!< [19..19] G5_IO4 sampling mode                                             */
      __IOM uint32_t G6_IO1     : 1;            /*!< [20..20] G6_IO1 sampling mode                                             */
      __IOM uint32_t G6_IO2     : 1;            /*!< [21..21] G6_IO2 sampling mode                                             */
      __IOM uint32_t G6_IO3     : 1;            /*!< [22..22] G6_IO3 sampling mode                                             */
      __IOM uint32_t G6_IO4     : 1;            /*!< [23..23] G6_IO4 sampling mode                                             */
    } IOSCR_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t IOCCR;                       /*!< (@ 0x00000028) I/O channel control register                               */
    
    struct {
      __IOM uint32_t G1_IO1     : 1;            /*!< [0..0] G1_IO1 channel mode                                                */
      __IOM uint32_t G1_IO2     : 1;            /*!< [1..1] G1_IO2 channel mode                                                */
      __IOM uint32_t G1_IO3     : 1;            /*!< [2..2] G1_IO3 channel mode                                                */
      __IOM uint32_t G1_IO4     : 1;            /*!< [3..3] G1_IO4 channel mode                                                */
      __IOM uint32_t G2_IO1     : 1;            /*!< [4..4] G2_IO1 channel mode                                                */
      __IOM uint32_t G2_IO2     : 1;            /*!< [5..5] G2_IO2 channel mode                                                */
      __IOM uint32_t G2_IO3     : 1;            /*!< [6..6] G2_IO3 channel mode                                                */
      __IOM uint32_t G2_IO4     : 1;            /*!< [7..7] G2_IO4 channel mode                                                */
      __IOM uint32_t G3_IO1     : 1;            /*!< [8..8] G3_IO1 channel mode                                                */
      __IOM uint32_t G3_IO2     : 1;            /*!< [9..9] G3_IO2 channel mode                                                */
      __IOM uint32_t G3_IO3     : 1;            /*!< [10..10] G3_IO3 channel mode                                              */
      __IOM uint32_t G3_IO4     : 1;            /*!< [11..11] G3_IO4 channel mode                                              */
      __IOM uint32_t G4_IO1     : 1;            /*!< [12..12] G4_IO1 channel mode                                              */
      __IOM uint32_t G4_IO2     : 1;            /*!< [13..13] G4_IO2 channel mode                                              */
      __IOM uint32_t G4_IO3     : 1;            /*!< [14..14] G4_IO3 channel mode                                              */
      __IOM uint32_t G4_IO4     : 1;            /*!< [15..15] G4_IO4 channel mode                                              */
      __IOM uint32_t G5_IO1     : 1;            /*!< [16..16] G5_IO1 channel mode                                              */
      __IOM uint32_t G5_IO2     : 1;            /*!< [17..17] G5_IO2 channel mode                                              */
      __IOM uint32_t G5_IO3     : 1;            /*!< [18..18] G5_IO3 channel mode                                              */
      __IOM uint32_t G5_IO4     : 1;            /*!< [19..19] G5_IO4 channel mode                                              */
      __IOM uint32_t G6_IO1     : 1;            /*!< [20..20] G6_IO1 channel mode                                              */
      __IOM uint32_t G6_IO2     : 1;            /*!< [21..21] G6_IO2 channel mode                                              */
      __IOM uint32_t G6_IO3     : 1;            /*!< [22..22] G6_IO3 channel mode                                              */
      __IOM uint32_t G6_IO4     : 1;            /*!< [23..23] G6_IO4 channel mode                                              */
    } IOCCR_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t IOGCSR;                      /*!< (@ 0x00000030) I/O group control status register                          */
    
    struct {
      __IOM uint32_t G1E        : 1;            /*!< [0..0] Analog I/O group x enable                                          */
      __IOM uint32_t G2E        : 1;            /*!< [1..1] Analog I/O group x enable                                          */
      __IOM uint32_t G3E        : 1;            /*!< [2..2] Analog I/O group x enable                                          */
      __IOM uint32_t G4E        : 1;            /*!< [3..3] Analog I/O group x enable                                          */
      __IOM uint32_t G5E        : 1;            /*!< [4..4] Analog I/O group x enable                                          */
      __IOM uint32_t G6E        : 1;            /*!< [5..5] Analog I/O group x enable                                          */
      __IOM uint32_t G7E        : 1;            /*!< [6..6] Analog I/O group x enable                                          */
      __IOM uint32_t G8E        : 1;            /*!< [7..7] Analog I/O group x enable                                          */
      __IM  uint32_t            : 8;
      __IM  uint32_t G1S        : 1;            /*!< [16..16] Analog I/O group x status                                        */
      __IM  uint32_t G2S        : 1;            /*!< [17..17] Analog I/O group x status                                        */
      __IM  uint32_t G3S        : 1;            /*!< [18..18] Analog I/O group x status                                        */
      __IM  uint32_t G4S        : 1;            /*!< [19..19] Analog I/O group x status                                        */
      __IM  uint32_t G5S        : 1;            /*!< [20..20] Analog I/O group x status                                        */
      __IM  uint32_t G6S        : 1;            /*!< [21..21] Analog I/O group x status                                        */
      __IOM uint32_t G7S        : 1;            /*!< [22..22] Analog I/O group x status                                        */
      __IOM uint32_t G8S        : 1;            /*!< [23..23] Analog I/O group x status                                        */
    } IOGCSR_b;
  } ;
  
  union {
    __IM  uint32_t IOG1CR;                      /*!< (@ 0x00000034) I/O group x counter register                               */
    
    struct {
      __IM  uint32_t CNT        : 14;           /*!< [13..0] Counter value                                                     */
    } IOG1CR_b;
  } ;
  
  union {
    __IM  uint32_t IOG2CR;                      /*!< (@ 0x00000038) I/O group x counter register                               */
    
    struct {
      __IM  uint32_t CNT        : 14;           /*!< [13..0] Counter value                                                     */
    } IOG2CR_b;
  } ;
  
  union {
    __IM  uint32_t IOG3CR;                      /*!< (@ 0x0000003C) I/O group x counter register                               */
    
    struct {
      __IM  uint32_t CNT        : 14;           /*!< [13..0] Counter value                                                     */
    } IOG3CR_b;
  } ;
  
  union {
    __IM  uint32_t IOG4CR;                      /*!< (@ 0x00000040) I/O group x counter register                               */
    
    struct {
      __IM  uint32_t CNT        : 14;           /*!< [13..0] Counter value                                                     */
    } IOG4CR_b;
  } ;
  
  union {
    __IM  uint32_t IOG5CR;                      /*!< (@ 0x00000044) I/O group x counter register                               */
    
    struct {
      __IM  uint32_t CNT        : 14;           /*!< [13..0] Counter value                                                     */
    } IOG5CR_b;
  } ;
  
  union {
    __IM  uint32_t IOG6CR;                      /*!< (@ 0x00000048) I/O group x counter register                               */
    
    struct {
      __IM  uint32_t CNT        : 14;           /*!< [13..0] Counter value                                                     */
    } IOG6CR_b;
  } ;
} TSC_Type;                                     /*!< Size = 76 (0x4c)                                                          */



/* =========================================================================================================================== */
/* ================                                            CEC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief HDMI-CEC controller (CEC)
  */

typedef struct {                                /*!< (@ 0x40007800) CEC Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) control register                                           */
    
    struct {
      __IOM uint32_t CECEN      : 1;            /*!< [0..0] CEC Enable                                                         */
      __IOM uint32_t TXSOM      : 1;            /*!< [1..1] Tx start of message                                                */
      __IOM uint32_t TXEOM      : 1;            /*!< [2..2] Tx End Of Message                                                  */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t CFGR;                        /*!< (@ 0x00000004) configuration register                                     */
    
    struct {
      __IOM uint32_t OAR        : 4;            /*!< [3..0] Own Address                                                        */
      __IOM uint32_t LSTN       : 1;            /*!< [4..4] Listen mode                                                        */
      __IOM uint32_t SFT        : 3;            /*!< [7..5] Signal Free Time                                                   */
      __IOM uint32_t RXTOL      : 1;            /*!< [8..8] Rx-Tolerance                                                       */
      __IOM uint32_t BRESTP     : 1;            /*!< [9..9] Rx-stop on bit rising error                                        */
      __IOM uint32_t BREGEN     : 1;            /*!< [10..10] Generate error-bit on bit rising error                           */
      __IOM uint32_t LBPEGEN    : 1;            /*!< [11..11] Generate Error-Bit on Long Bit Period Error                      */
    } CFGR_b;
  } ;
  
  union {
    __OM  uint32_t TXDR;                        /*!< (@ 0x00000008) Tx data register                                           */
    
    struct {
      __OM  uint32_t TXD        : 8;            /*!< [7..0] Tx Data register                                                   */
    } TXDR_b;
  } ;
  
  union {
    __IM  uint32_t RXDR;                        /*!< (@ 0x0000000C) Rx Data Register                                           */
    
    struct {
      __IM  uint32_t RXDR       : 8;            /*!< [7..0] CEC Rx Data Register                                               */
    } RXDR_b;
  } ;
  
  union {
    __IOM uint32_t ISR;                         /*!< (@ 0x00000010) Interrupt and Status Register                              */
    
    struct {
      __IOM uint32_t RXBR       : 1;            /*!< [0..0] Rx-Byte Received                                                   */
      __IOM uint32_t RXEND      : 1;            /*!< [1..1] End Of Reception                                                   */
      __IOM uint32_t RXOVR      : 1;            /*!< [2..2] Rx-Overrun                                                         */
      __IOM uint32_t BRE        : 1;            /*!< [3..3] Rx-Bit rising error                                                */
      __IOM uint32_t SBPE       : 1;            /*!< [4..4] Rx-Short Bit period error                                          */
      __IOM uint32_t LBPE       : 1;            /*!< [5..5] Rx-Long Bit Period Error                                           */
      __IOM uint32_t RXACKE     : 1;            /*!< [6..6] Rx-Missing Acknowledge                                             */
      __IOM uint32_t ARBLST     : 1;            /*!< [7..7] Arbitration Lost                                                   */
      __IOM uint32_t TXBR       : 1;            /*!< [8..8] Tx-Byte Request                                                    */
      __IOM uint32_t TXEND      : 1;            /*!< [9..9] End of Transmission                                                */
      __IOM uint32_t TXUDR      : 1;            /*!< [10..10] Tx-Buffer Underrun                                               */
      __IOM uint32_t TXERR      : 1;            /*!< [11..11] Tx-Error                                                         */
      __IOM uint32_t TXACKE     : 1;            /*!< [12..12] Tx-Missing acknowledge error                                     */
    } ISR_b;
  } ;
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000014) interrupt enable register                                  */
    
    struct {
      __IOM uint32_t RXBRIE     : 1;            /*!< [0..0] Rx-Byte Received Interrupt Enable                                  */
      __IOM uint32_t RXENDIE    : 1;            /*!< [1..1] End Of Reception Interrupt Enable                                  */
      __IOM uint32_t RXOVRIE    : 1;            /*!< [2..2] Rx-Buffer Overrun Interrupt Enable                                 */
      __IOM uint32_t BREIE      : 1;            /*!< [3..3] Bit Rising Error Interrupt Enable                                  */
      __IOM uint32_t SBPEIE     : 1;            /*!< [4..4] Short Bit Period Error Interrupt Enable                            */
      __IOM uint32_t LBPEIE     : 1;            /*!< [5..5] Long Bit Period Error Interrupt Enable                             */
      __IOM uint32_t RXACKIE    : 1;            /*!< [6..6] Rx-Missing Acknowledge Error Interrupt Enable                      */
      __IOM uint32_t ARBLSTIE   : 1;            /*!< [7..7] Arbitration Lost Interrupt Enable                                  */
      __IOM uint32_t TXBRIE     : 1;            /*!< [8..8] Tx-Byte Request Interrupt Enable                                   */
      __IOM uint32_t TXENDIE    : 1;            /*!< [9..9] Tx-End of message interrupt enable                                 */
      __IOM uint32_t TXUDRIE    : 1;            /*!< [10..10] Tx-Underrun interrupt enable                                     */
      __IOM uint32_t TXERRIE    : 1;            /*!< [11..11] Tx-Error Interrupt Enable                                        */
      __IOM uint32_t TXACKIE    : 1;            /*!< [12..12] Tx-Missing Acknowledge Error Interrupt Enable                    */
    } IER_b;
  } ;
} CEC_Type;                                     /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           Flash                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Flash (Flash)
  */

typedef struct {                                /*!< (@ 0x40022000) Flash Structure                                            */
  
  union {
    __IOM uint32_t ACR;                         /*!< (@ 0x00000000) Flash access control register                              */
    
    struct {
      __IOM uint32_t LATENCY    : 3;            /*!< [2..0] LATENCY                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t PRFTBE     : 1;            /*!< [4..4] PRFTBE                                                             */
      __IM  uint32_t PRFTBS     : 1;            /*!< [5..5] PRFTBS                                                             */
    } ACR_b;
  } ;
  
  union {
    __OM  uint32_t KEYR;                        /*!< (@ 0x00000004) Flash key register                                         */
    
    struct {
      __OM  uint32_t FKEYR      : 32;           /*!< [31..0] Flash Key                                                         */
    } KEYR_b;
  } ;
  
  union {
    __OM  uint32_t OPTKEYR;                     /*!< (@ 0x00000008) Flash option key register                                  */
    
    struct {
      __OM  uint32_t OPTKEYR    : 32;           /*!< [31..0] Option byte key                                                   */
    } OPTKEYR_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x0000000C) Flash status register                                      */
    
    struct {
      __IM  uint32_t BSY        : 1;            /*!< [0..0] Busy                                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t PGERR      : 1;            /*!< [2..2] Programming error                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t WRPRT      : 1;            /*!< [4..4] Write protection error                                             */
      __IOM uint32_t EOP        : 1;            /*!< [5..5] End of operation                                                   */
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000010) Flash control register                                     */
    
    struct {
      __IOM uint32_t PG         : 1;            /*!< [0..0] Programming                                                        */
      __IOM uint32_t PER        : 1;            /*!< [1..1] Page erase                                                         */
      __IOM uint32_t MER        : 1;            /*!< [2..2] Mass erase                                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t OPTPG      : 1;            /*!< [4..4] Option byte programming                                            */
      __IOM uint32_t OPTER      : 1;            /*!< [5..5] Option byte erase                                                  */
      __IOM uint32_t STRT       : 1;            /*!< [6..6] Start                                                              */
      __IOM uint32_t LOCK       : 1;            /*!< [7..7] Lock                                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t OPTWRE     : 1;            /*!< [9..9] Option bytes write enable                                          */
      __IOM uint32_t ERRIE      : 1;            /*!< [10..10] Error interrupt enable                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t EOPIE      : 1;            /*!< [12..12] End of operation interrupt enable                                */
      __IOM uint32_t FORCE_OPTLOAD : 1;         /*!< [13..13] Force option byte loading                                        */
    } CR_b;
  } ;
  
  union {
    __OM  uint32_t AR;                          /*!< (@ 0x00000014) Flash address register                                     */
    
    struct {
      __OM  uint32_t FAR        : 32;           /*!< [31..0] Flash address                                                     */
    } AR_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IM  uint32_t OBR;                         /*!< (@ 0x0000001C) Option byte register                                       */
    
    struct {
      __IM  uint32_t OPTERR     : 1;            /*!< [0..0] Option byte error                                                  */
      __IM  uint32_t LEVEL1_PROT : 1;           /*!< [1..1] Level 1 protection status                                          */
      __IM  uint32_t LEVEL2_PROT : 1;           /*!< [2..2] Level 2 protection status                                          */
      __IM  uint32_t            : 5;
      __IM  uint32_t WDG_SW     : 1;            /*!< [8..8] WDG_SW                                                             */
      __IM  uint32_t nRST_STOP  : 1;            /*!< [9..9] nRST_STOP                                                          */
      __IM  uint32_t nRST_STDBY : 1;            /*!< [10..10] nRST_STDBY                                                       */
      __IM  uint32_t            : 1;
      __IM  uint32_t BOOT1      : 1;            /*!< [12..12] BOOT1                                                            */
      __IM  uint32_t VDDA_MONITOR : 1;          /*!< [13..13] VDDA_MONITOR                                                     */
      __IM  uint32_t            : 2;
      __IM  uint32_t Data0      : 8;            /*!< [23..16] Data0                                                            */
      __IM  uint32_t Data1      : 8;            /*!< [31..24] Data1                                                            */
    } OBR_b;
  } ;
  
  union {
    __IM  uint32_t WRPR;                        /*!< (@ 0x00000020) Write protection register                                  */
    
    struct {
      __IM  uint32_t WRP        : 32;           /*!< [31..0] Write protect                                                     */
    } WRPR_b;
  } ;
} Flash_Type;                                   /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                          DBGMCU                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Debug support (DBGMCU)
  */

typedef struct {                                /*!< (@ 0x40015800) DBGMCU Structure                                           */
  
  union {
    __IM  uint32_t IDCODE;                      /*!< (@ 0x00000000) MCU Device ID Code Register                                */
    
    struct {
      __IM  uint32_t DEV_ID     : 12;           /*!< [11..0] Device Identifier                                                 */
      __IM  uint32_t DIV_ID     : 4;            /*!< [15..12] Division Identifier                                              */
      __IM  uint32_t REV_ID     : 16;           /*!< [31..16] Revision Identifier                                              */
    } IDCODE_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000004) Debug MCU Configuration Register                           */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t DBG_STOP   : 1;            /*!< [1..1] Debug Stop Mode                                                    */
      __IOM uint32_t DBG_STANDBY : 1;           /*!< [2..2] Debug Standby Mode                                                 */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t APBLFZ;                      /*!< (@ 0x00000008) APB Low Freeze Register                                    */
    
    struct {
      __IOM uint32_t DBG_TIMER2_STOP : 1;       /*!< [0..0] Debug Timer 2 stopped when Core is halted                          */
      __IOM uint32_t DBG_TIMER3_STOP : 1;       /*!< [1..1] Debug Timer 3 stopped when Core is halted                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t DBG_TIMER6_STOP : 1;       /*!< [4..4] Debug Timer 6 stopped when Core is halted                          */
      __IM  uint32_t            : 3;
      __IOM uint32_t DBG_TIMER14_STOP : 1;      /*!< [8..8] Debug Timer 14 stopped when Core is halted                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t DBG_RTC_STOP : 1;          /*!< [10..10] Debug RTC stopped when Core is halted                            */
      __IOM uint32_t DBG_WWDG_STOP : 1;         /*!< [11..11] Debug Window Wachdog stopped when Core is halted                 */
      __IOM uint32_t DBG_IWDG_STOP : 1;         /*!< [12..12] Debug Independent Wachdog stopped when Core is halted            */
      __IM  uint32_t            : 8;
      __IOM uint32_t I2C1_SMBUS_TIMEOUT : 1;    /*!< [21..21] SMBUS timeout mode stopped when Core is halted                   */
    } APBLFZ_b;
  } ;
  
  union {
    __IOM uint32_t APBHFZ;                      /*!< (@ 0x0000000C) APB High Freeze Register                                   */
    
    struct {
      __IM  uint32_t            : 11;
      __IOM uint32_t DBG_TIMER1_STOP : 1;       /*!< [11..11] Debug Timer 1 stopped when Core is halted                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t DBG_TIMER15_STO : 1;       /*!< [16..16] Debug Timer 15 stopped when Core is halted                       */
      __IOM uint32_t DBG_TIMER16_STO : 1;       /*!< [17..17] Debug Timer 16 stopped when Core is halted                       */
      __IOM uint32_t DBG_TIMER17_STO : 1;       /*!< [18..18] Debug Timer 17 stopped when Core is halted                       */
    } APBHFZ_b;
  } ;
} DBGMCU_Type;                                  /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                            USB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal serial bus full-speed device       interface (USB)
  */

typedef struct {                                /*!< (@ 0x40005C00) USB Structure                                              */
  
  union {
    __IOM uint32_t EP0R;                        /*!< (@ 0x00000000) endpoint 0 register                                        */
    
    struct {
      __IOM uint32_t EA         : 4;            /*!< [3..0] Endpoint address                                                   */
      __IOM uint32_t STAT_TX    : 2;            /*!< [5..4] Status bits, for transmission transfers                            */
      __IOM uint32_t DTOG_TX    : 1;            /*!< [6..6] Data Toggle, for transmission transfers                            */
      __IOM uint32_t CTR_TX     : 1;            /*!< [7..7] Correct Transfer for transmission                                  */
      __IOM uint32_t EP_KIND    : 1;            /*!< [8..8] Endpoint kind                                                      */
      __IOM uint32_t EP_TYPE    : 2;            /*!< [10..9] Endpoint type                                                     */
      __IOM uint32_t SETUP      : 1;            /*!< [11..11] Setup transaction completed                                      */
      __IOM uint32_t STAT_RX    : 2;            /*!< [13..12] Status bits, for reception transfers                             */
      __IOM uint32_t DTOG_RX    : 1;            /*!< [14..14] Data Toggle, for reception transfers                             */
      __IOM uint32_t CTR_RX     : 1;            /*!< [15..15] Correct transfer for reception                                   */
    } EP0R_b;
  } ;
  
  union {
    __IOM uint32_t EP1R;                        /*!< (@ 0x00000004) endpoint 1 register                                        */
    
    struct {
      __IOM uint32_t EA         : 4;            /*!< [3..0] Endpoint address                                                   */
      __IOM uint32_t STAT_TX    : 2;            /*!< [5..4] Status bits, for transmission transfers                            */
      __IOM uint32_t DTOG_TX    : 1;            /*!< [6..6] Data Toggle, for transmission transfers                            */
      __IOM uint32_t CTR_TX     : 1;            /*!< [7..7] Correct Transfer for transmission                                  */
      __IOM uint32_t EP_KIND    : 1;            /*!< [8..8] Endpoint kind                                                      */
      __IOM uint32_t EP_TYPE    : 2;            /*!< [10..9] Endpoint type                                                     */
      __IOM uint32_t SETUP      : 1;            /*!< [11..11] Setup transaction completed                                      */
      __IOM uint32_t STAT_RX    : 2;            /*!< [13..12] Status bits, for reception transfers                             */
      __IOM uint32_t DTOG_RX    : 1;            /*!< [14..14] Data Toggle, for reception transfers                             */
      __IOM uint32_t CTR_RX     : 1;            /*!< [15..15] Correct transfer for reception                                   */
    } EP1R_b;
  } ;
  
  union {
    __IOM uint32_t EP2R;                        /*!< (@ 0x00000008) endpoint 2 register                                        */
    
    struct {
      __IOM uint32_t EA         : 4;            /*!< [3..0] Endpoint address                                                   */
      __IOM uint32_t STAT_TX    : 2;            /*!< [5..4] Status bits, for transmission transfers                            */
      __IOM uint32_t DTOG_TX    : 1;            /*!< [6..6] Data Toggle, for transmission transfers                            */
      __IOM uint32_t CTR_TX     : 1;            /*!< [7..7] Correct Transfer for transmission                                  */
      __IOM uint32_t EP_KIND    : 1;            /*!< [8..8] Endpoint kind                                                      */
      __IOM uint32_t EP_TYPE    : 2;            /*!< [10..9] Endpoint type                                                     */
      __IOM uint32_t SETUP      : 1;            /*!< [11..11] Setup transaction completed                                      */
      __IOM uint32_t STAT_RX    : 2;            /*!< [13..12] Status bits, for reception transfers                             */
      __IOM uint32_t DTOG_RX    : 1;            /*!< [14..14] Data Toggle, for reception transfers                             */
      __IOM uint32_t CTR_RX     : 1;            /*!< [15..15] Correct transfer for reception                                   */
    } EP2R_b;
  } ;
  
  union {
    __IOM uint32_t EP3R;                        /*!< (@ 0x0000000C) endpoint 3 register                                        */
    
    struct {
      __IOM uint32_t EA         : 4;            /*!< [3..0] Endpoint address                                                   */
      __IOM uint32_t STAT_TX    : 2;            /*!< [5..4] Status bits, for transmission transfers                            */
      __IOM uint32_t DTOG_TX    : 1;            /*!< [6..6] Data Toggle, for transmission transfers                            */
      __IOM uint32_t CTR_TX     : 1;            /*!< [7..7] Correct Transfer for transmission                                  */
      __IOM uint32_t EP_KIND    : 1;            /*!< [8..8] Endpoint kind                                                      */
      __IOM uint32_t EP_TYPE    : 2;            /*!< [10..9] Endpoint type                                                     */
      __IOM uint32_t SETUP      : 1;            /*!< [11..11] Setup transaction completed                                      */
      __IOM uint32_t STAT_RX    : 2;            /*!< [13..12] Status bits, for reception transfers                             */
      __IOM uint32_t DTOG_RX    : 1;            /*!< [14..14] Data Toggle, for reception transfers                             */
      __IOM uint32_t CTR_RX     : 1;            /*!< [15..15] Correct transfer for reception                                   */
    } EP3R_b;
  } ;
  
  union {
    __IOM uint32_t EP4R;                        /*!< (@ 0x00000010) endpoint 4 register                                        */
    
    struct {
      __IOM uint32_t EA         : 4;            /*!< [3..0] Endpoint address                                                   */
      __IOM uint32_t STAT_TX    : 2;            /*!< [5..4] Status bits, for transmission transfers                            */
      __IOM uint32_t DTOG_TX    : 1;            /*!< [6..6] Data Toggle, for transmission transfers                            */
      __IOM uint32_t CTR_TX     : 1;            /*!< [7..7] Correct Transfer for transmission                                  */
      __IOM uint32_t EP_KIND    : 1;            /*!< [8..8] Endpoint kind                                                      */
      __IOM uint32_t EP_TYPE    : 2;            /*!< [10..9] Endpoint type                                                     */
      __IOM uint32_t SETUP      : 1;            /*!< [11..11] Setup transaction completed                                      */
      __IOM uint32_t STAT_RX    : 2;            /*!< [13..12] Status bits, for reception transfers                             */
      __IOM uint32_t DTOG_RX    : 1;            /*!< [14..14] Data Toggle, for reception transfers                             */
      __IOM uint32_t CTR_RX     : 1;            /*!< [15..15] Correct transfer for reception                                   */
    } EP4R_b;
  } ;
  
  union {
    __IOM uint32_t EP5R;                        /*!< (@ 0x00000014) endpoint 5 register                                        */
    
    struct {
      __IOM uint32_t EA         : 4;            /*!< [3..0] Endpoint address                                                   */
      __IOM uint32_t STAT_TX    : 2;            /*!< [5..4] Status bits, for transmission transfers                            */
      __IOM uint32_t DTOG_TX    : 1;            /*!< [6..6] Data Toggle, for transmission transfers                            */
      __IOM uint32_t CTR_TX     : 1;            /*!< [7..7] Correct Transfer for transmission                                  */
      __IOM uint32_t EP_KIND    : 1;            /*!< [8..8] Endpoint kind                                                      */
      __IOM uint32_t EP_TYPE    : 2;            /*!< [10..9] Endpoint type                                                     */
      __IOM uint32_t SETUP      : 1;            /*!< [11..11] Setup transaction completed                                      */
      __IOM uint32_t STAT_RX    : 2;            /*!< [13..12] Status bits, for reception transfers                             */
      __IOM uint32_t DTOG_RX    : 1;            /*!< [14..14] Data Toggle, for reception transfers                             */
      __IOM uint32_t CTR_RX     : 1;            /*!< [15..15] Correct transfer for reception                                   */
    } EP5R_b;
  } ;
  
  union {
    __IOM uint32_t EP6R;                        /*!< (@ 0x00000018) endpoint 6 register                                        */
    
    struct {
      __IOM uint32_t EA         : 4;            /*!< [3..0] Endpoint address                                                   */
      __IOM uint32_t STAT_TX    : 2;            /*!< [5..4] Status bits, for transmission transfers                            */
      __IOM uint32_t DTOG_TX    : 1;            /*!< [6..6] Data Toggle, for transmission transfers                            */
      __IOM uint32_t CTR_TX     : 1;            /*!< [7..7] Correct Transfer for transmission                                  */
      __IOM uint32_t EP_KIND    : 1;            /*!< [8..8] Endpoint kind                                                      */
      __IOM uint32_t EP_TYPE    : 2;            /*!< [10..9] Endpoint type                                                     */
      __IOM uint32_t SETUP      : 1;            /*!< [11..11] Setup transaction completed                                      */
      __IOM uint32_t STAT_RX    : 2;            /*!< [13..12] Status bits, for reception transfers                             */
      __IOM uint32_t DTOG_RX    : 1;            /*!< [14..14] Data Toggle, for reception transfers                             */
      __IOM uint32_t CTR_RX     : 1;            /*!< [15..15] Correct transfer for reception                                   */
    } EP6R_b;
  } ;
  
  union {
    __IOM uint32_t EP7R;                        /*!< (@ 0x0000001C) endpoint 7 register                                        */
    
    struct {
      __IOM uint32_t EA         : 4;            /*!< [3..0] Endpoint address                                                   */
      __IOM uint32_t STAT_TX    : 2;            /*!< [5..4] Status bits, for transmission transfers                            */
      __IOM uint32_t DTOG_TX    : 1;            /*!< [6..6] Data Toggle, for transmission transfers                            */
      __IOM uint32_t CTR_TX     : 1;            /*!< [7..7] Correct Transfer for transmission                                  */
      __IOM uint32_t EP_KIND    : 1;            /*!< [8..8] Endpoint kind                                                      */
      __IOM uint32_t EP_TYPE    : 2;            /*!< [10..9] Endpoint type                                                     */
      __IOM uint32_t SETUP      : 1;            /*!< [11..11] Setup transaction completed                                      */
      __IOM uint32_t STAT_RX    : 2;            /*!< [13..12] Status bits, for reception transfers                             */
      __IOM uint32_t DTOG_RX    : 1;            /*!< [14..14] Data Toggle, for reception transfers                             */
      __IOM uint32_t CTR_RX     : 1;            /*!< [15..15] Correct transfer for reception                                   */
    } EP7R_b;
  } ;
  __IM  uint32_t  RESERVED[8];
  
  union {
    __IOM uint32_t CNTR;                        /*!< (@ 0x00000040) control register                                           */
    
    struct {
      __IOM uint32_t FRES       : 1;            /*!< [0..0] Force USB Reset                                                    */
      __IOM uint32_t PDWN       : 1;            /*!< [1..1] Power down                                                         */
      __IOM uint32_t LPMODE     : 1;            /*!< [2..2] Low-power mode                                                     */
      __IOM uint32_t FSUSP      : 1;            /*!< [3..3] Force suspend                                                      */
      __IOM uint32_t RESUME     : 1;            /*!< [4..4] Resume request                                                     */
      __IOM uint32_t L1RESUME   : 1;            /*!< [5..5] LPM L1 Resume request                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t L1REQM     : 1;            /*!< [7..7] LPM L1 state request interrupt mask                                */
      __IOM uint32_t ESOFM      : 1;            /*!< [8..8] Expected start of frame interrupt mask                             */
      __IOM uint32_t SOFM       : 1;            /*!< [9..9] Start of frame interrupt mask                                      */
      __IOM uint32_t RESETM     : 1;            /*!< [10..10] USB reset interrupt mask                                         */
      __IOM uint32_t SUSPM      : 1;            /*!< [11..11] Suspend mode interrupt mask                                      */
      __IOM uint32_t WKUPM      : 1;            /*!< [12..12] Wakeup interrupt mask                                            */
      __IOM uint32_t ERRM       : 1;            /*!< [13..13] Error interrupt mask                                             */
      __IOM uint32_t PMAOVRM    : 1;            /*!< [14..14] Packet memory area over / underrun interrupt mask                */
      __IOM uint32_t CTRM       : 1;            /*!< [15..15] Correct transfer interrupt mask                                  */
    } CNTR_b;
  } ;
  
  union {
    __IOM uint32_t ISTR;                        /*!< (@ 0x00000044) interrupt status register                                  */
    
    struct {
      __IM  uint32_t EP_ID      : 4;            /*!< [3..0] Endpoint Identifier                                                */
      __IM  uint32_t DIR        : 1;            /*!< [4..4] Direction of transaction                                           */
      __IM  uint32_t            : 2;
      __IOM uint32_t L1REQ      : 1;            /*!< [7..7] LPM L1 state request                                               */
      __IOM uint32_t ESOF       : 1;            /*!< [8..8] Expected start frame                                               */
      __IOM uint32_t SOF        : 1;            /*!< [9..9] start of frame                                                     */
      __IOM uint32_t RESET      : 1;            /*!< [10..10] reset request                                                    */
      __IOM uint32_t SUSP       : 1;            /*!< [11..11] Suspend mode request                                             */
      __IOM uint32_t WKUP       : 1;            /*!< [12..12] Wakeup                                                           */
      __IOM uint32_t ERR        : 1;            /*!< [13..13] Error                                                            */
      __IOM uint32_t PMAOVR     : 1;            /*!< [14..14] Packet memory area over / underrun                               */
      __IM  uint32_t CTR        : 1;            /*!< [15..15] Correct transfer                                                 */
    } ISTR_b;
  } ;
  
  union {
    __IM  uint32_t FNR;                         /*!< (@ 0x00000048) frame number register                                      */
    
    struct {
      __IM  uint32_t FN         : 11;           /*!< [10..0] Frame number                                                      */
      __IM  uint32_t LSOF       : 2;            /*!< [12..11] Lost SOF                                                         */
      __IM  uint32_t LCK        : 1;            /*!< [13..13] Locked                                                           */
      __IM  uint32_t RXDM       : 1;            /*!< [14..14] Receive data - line status                                       */
      __IM  uint32_t RXDP       : 1;            /*!< [15..15] Receive data + line status                                       */
    } FNR_b;
  } ;
  
  union {
    __IOM uint32_t DADDR;                       /*!< (@ 0x0000004C) device address                                             */
    
    struct {
      __IOM uint32_t ADD        : 7;            /*!< [6..0] Device address                                                     */
      __IOM uint32_t EF         : 1;            /*!< [7..7] Enable function                                                    */
    } DADDR_b;
  } ;
  
  union {
    __IOM uint32_t BTABLE;                      /*!< (@ 0x00000050) Buffer table address                                       */
    
    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t BTABLE     : 13;           /*!< [15..3] Buffer table                                                      */
    } BTABLE_b;
  } ;
  
  union {
    __IOM uint32_t LPMCSR;                      /*!< (@ 0x00000054) LPM control and status register                            */
    
    struct {
      __IOM uint32_t LPMEN      : 1;            /*!< [0..0] LPM support enable                                                 */
      __IOM uint32_t LPMACK     : 1;            /*!< [1..1] LPM Token acknowledge enable                                       */
      __IM  uint32_t            : 1;
      __IM  uint32_t REMWAKE    : 1;            /*!< [3..3] bRemoteWake value                                                  */
      __IM  uint32_t BESL       : 4;            /*!< [7..4] BESL value                                                         */
    } LPMCSR_b;
  } ;
  
  union {
    __IOM uint32_t BCDR;                        /*!< (@ 0x00000058) Battery charging detector                                  */
    
    struct {
      __IOM uint32_t BCDEN      : 1;            /*!< [0..0] Battery charging detector (BCD) enable                             */
      __IOM uint32_t DCDEN      : 1;            /*!< [1..1] Data contact detection (DCD) mode enable                           */
      __IOM uint32_t PDEN       : 1;            /*!< [2..2] Primary detection (PD) mode enable                                 */
      __IOM uint32_t SDEN       : 1;            /*!< [3..3] Secondary detection (SD) mode enable                               */
      __IM  uint32_t DCDET      : 1;            /*!< [4..4] Data contact detection (DCD) status                                */
      __IM  uint32_t PDET       : 1;            /*!< [5..5] Primary detection (PD) status                                      */
      __IM  uint32_t SDET       : 1;            /*!< [6..6] Secondary detection (SD) status                                    */
      __IM  uint32_t PS2DET     : 1;            /*!< [7..7] DM pull-up detection status                                        */
      __IM  uint32_t            : 7;
      __IOM uint32_t DPPU       : 1;            /*!< [15..15] DP pull-up control                                               */
    } BCDR_b;
  } ;
} USB_Type;                                     /*!< Size = 92 (0x5c)                                                          */



/* =========================================================================================================================== */
/* ================                                            CRS                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Clock recovery system (CRS)
  */

typedef struct {                                /*!< (@ 0x40006C00) CRS Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) control register                                           */
    
    struct {
      __IOM uint32_t SYNCOKIE   : 1;            /*!< [0..0] SYNC event OK interrupt enable                                     */
      __IOM uint32_t SYNCWARNIE : 1;            /*!< [1..1] SYNC warning interrupt enable                                      */
      __IOM uint32_t ERRIE      : 1;            /*!< [2..2] Synchronization or trimming error interrupt enable                 */
      __IOM uint32_t ESYNCIE    : 1;            /*!< [3..3] Expected SYNC interrupt enable                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t CEN        : 1;            /*!< [5..5] Frequency error counter enable                                     */
      __IOM uint32_t AUTOTRIMEN : 1;            /*!< [6..6] Automatic trimming enable                                          */
      __IOM uint32_t SWSYNC     : 1;            /*!< [7..7] Generate software SYNC event                                       */
      __IOM uint32_t TRIM       : 6;            /*!< [13..8] HSI48 oscillator smooth trimming                                  */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t CFGR;                        /*!< (@ 0x00000004) configuration register                                     */
    
    struct {
      __IOM uint32_t RELOAD     : 16;           /*!< [15..0] Counter reload value                                              */
      __IOM uint32_t FELIM      : 8;            /*!< [23..16] Frequency error limit                                            */
      __IOM uint32_t SYNCDIV    : 3;            /*!< [26..24] SYNC divider                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t SYNCSRC    : 2;            /*!< [29..28] SYNC signal source selection                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t SYNCPOL    : 1;            /*!< [31..31] SYNC polarity selection                                          */
    } CFGR_b;
  } ;
  
  union {
    __IM  uint32_t ISR;                         /*!< (@ 0x00000008) interrupt and status register                              */
    
    struct {
      __IM  uint32_t SYNCOKF    : 1;            /*!< [0..0] SYNC event OK flag                                                 */
      __IM  uint32_t SYNCWARNF  : 1;            /*!< [1..1] SYNC warning flag                                                  */
      __IM  uint32_t ERRF       : 1;            /*!< [2..2] Error flag                                                         */
      __IM  uint32_t ESYNCF     : 1;            /*!< [3..3] Expected SYNC flag                                                 */
      __IM  uint32_t            : 4;
      __IM  uint32_t SYNCERR    : 1;            /*!< [8..8] SYNC error                                                         */
      __IM  uint32_t SYNCMISS   : 1;            /*!< [9..9] SYNC missed                                                        */
      __IM  uint32_t TRIMOVF    : 1;            /*!< [10..10] Trimming overflow or underflow                                   */
      __IM  uint32_t            : 4;
      __IM  uint32_t FEDIR      : 1;            /*!< [15..15] Frequency error direction                                        */
      __IM  uint32_t FECAP      : 16;           /*!< [31..16] Frequency error capture                                          */
    } ISR_b;
  } ;
  
  union {
    __IOM uint32_t ICR;                         /*!< (@ 0x0000000C) interrupt flag clear register                              */
    
    struct {
      __IOM uint32_t SYNCOKC    : 1;            /*!< [0..0] SYNC event OK clear flag                                           */
      __IOM uint32_t SYNCWARNC  : 1;            /*!< [1..1] SYNC warning clear flag                                            */
      __IOM uint32_t ERRC       : 1;            /*!< [2..2] Error clear flag                                                   */
      __IOM uint32_t ESYNCC     : 1;            /*!< [3..3] Expected SYNC clear flag                                           */
    } ICR_b;
  } ;
} CRS_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                            CAN                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Controller area network (CAN)
  */

typedef struct {                                /*!< (@ 0x40006400) CAN Structure                                              */
  
  union {
    __IOM uint32_t CAN_MCR;                     /*!< (@ 0x00000000) CAN_MCR                                                    */
    
    struct {
      __IOM uint32_t INRQ       : 1;            /*!< [0..0] INRQ                                                               */
      __IOM uint32_t SLEEP      : 1;            /*!< [1..1] SLEEP                                                              */
      __IOM uint32_t TXFP       : 1;            /*!< [2..2] TXFP                                                               */
      __IOM uint32_t RFLM       : 1;            /*!< [3..3] RFLM                                                               */
      __IOM uint32_t NART       : 1;            /*!< [4..4] NART                                                               */
      __IOM uint32_t AWUM       : 1;            /*!< [5..5] AWUM                                                               */
      __IOM uint32_t ABOM       : 1;            /*!< [6..6] ABOM                                                               */
      __IOM uint32_t TTCM       : 1;            /*!< [7..7] TTCM                                                               */
      __IM  uint32_t            : 7;
      __IOM uint32_t RESET      : 1;            /*!< [15..15] RESET                                                            */
      __IOM uint32_t DBF        : 1;            /*!< [16..16] DBF                                                              */
    } CAN_MCR_b;
  } ;
  
  union {
    __IOM uint32_t CAN_MSR;                     /*!< (@ 0x00000004) CAN_MSR                                                    */
    
    struct {
      __IM  uint32_t INAK       : 1;            /*!< [0..0] INAK                                                               */
      __IM  uint32_t SLAK       : 1;            /*!< [1..1] SLAK                                                               */
      __IOM uint32_t ERRI       : 1;            /*!< [2..2] ERRI                                                               */
      __IOM uint32_t WKUI       : 1;            /*!< [3..3] WKUI                                                               */
      __IOM uint32_t SLAKI      : 1;            /*!< [4..4] SLAKI                                                              */
      __IM  uint32_t            : 3;
      __IM  uint32_t TXM        : 1;            /*!< [8..8] TXM                                                                */
      __IM  uint32_t RXM        : 1;            /*!< [9..9] RXM                                                                */
      __IM  uint32_t SAMP       : 1;            /*!< [10..10] SAMP                                                             */
      __IM  uint32_t RX         : 1;            /*!< [11..11] RX                                                               */
    } CAN_MSR_b;
  } ;
  
  union {
    __IOM uint32_t CAN_TSR;                     /*!< (@ 0x00000008) CAN_TSR                                                    */
    
    struct {
      __IOM uint32_t RQCP0      : 1;            /*!< [0..0] RQCP0                                                              */
      __IOM uint32_t TXOK0      : 1;            /*!< [1..1] TXOK0                                                              */
      __IOM uint32_t ALST0      : 1;            /*!< [2..2] ALST0                                                              */
      __IOM uint32_t TERR0      : 1;            /*!< [3..3] TERR0                                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t ABRQ0      : 1;            /*!< [7..7] ABRQ0                                                              */
      __IOM uint32_t RQCP1      : 1;            /*!< [8..8] RQCP1                                                              */
      __IOM uint32_t TXOK1      : 1;            /*!< [9..9] TXOK1                                                              */
      __IOM uint32_t ALST1      : 1;            /*!< [10..10] ALST1                                                            */
      __IOM uint32_t TERR1      : 1;            /*!< [11..11] TERR1                                                            */
      __IM  uint32_t            : 3;
      __IOM uint32_t ABRQ1      : 1;            /*!< [15..15] ABRQ1                                                            */
      __IOM uint32_t RQCP2      : 1;            /*!< [16..16] RQCP2                                                            */
      __IOM uint32_t TXOK2      : 1;            /*!< [17..17] TXOK2                                                            */
      __IOM uint32_t ALST2      : 1;            /*!< [18..18] ALST2                                                            */
      __IOM uint32_t TERR2      : 1;            /*!< [19..19] TERR2                                                            */
      __IM  uint32_t            : 3;
      __IOM uint32_t ABRQ2      : 1;            /*!< [23..23] ABRQ2                                                            */
      __IM  uint32_t CODE       : 2;            /*!< [25..24] CODE                                                             */
      __IM  uint32_t TME0       : 1;            /*!< [26..26] Lowest priority flag for mailbox 0                               */
      __IM  uint32_t TME1       : 1;            /*!< [27..27] Lowest priority flag for mailbox 1                               */
      __IM  uint32_t TME2       : 1;            /*!< [28..28] Lowest priority flag for mailbox 2                               */
      __IM  uint32_t LOW0       : 1;            /*!< [29..29] Lowest priority flag for mailbox 0                               */
      __IM  uint32_t LOW1       : 1;            /*!< [30..30] Lowest priority flag for mailbox 1                               */
      __IM  uint32_t LOW2       : 1;            /*!< [31..31] Lowest priority flag for mailbox 2                               */
    } CAN_TSR_b;
  } ;
  
  union {
    __IOM uint32_t CAN_RF0R;                    /*!< (@ 0x0000000C) CAN_RF0R                                                   */
    
    struct {
      __IM  uint32_t FMP0       : 2;            /*!< [1..0] FMP0                                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t FULL0      : 1;            /*!< [3..3] FULL0                                                              */
      __IOM uint32_t FOVR0      : 1;            /*!< [4..4] FOVR0                                                              */
      __IOM uint32_t RFOM0      : 1;            /*!< [5..5] RFOM0                                                              */
    } CAN_RF0R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_RF1R;                    /*!< (@ 0x00000010) CAN_RF1R                                                   */
    
    struct {
      __IM  uint32_t FMP1       : 2;            /*!< [1..0] FMP1                                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t FULL1      : 1;            /*!< [3..3] FULL1                                                              */
      __IOM uint32_t FOVR1      : 1;            /*!< [4..4] FOVR1                                                              */
      __IOM uint32_t RFOM1      : 1;            /*!< [5..5] RFOM1                                                              */
    } CAN_RF1R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_IER;                     /*!< (@ 0x00000014) CAN_IER                                                    */
    
    struct {
      __IOM uint32_t TMEIE      : 1;            /*!< [0..0] TMEIE                                                              */
      __IOM uint32_t FMPIE0     : 1;            /*!< [1..1] FMPIE0                                                             */
      __IOM uint32_t FFIE0      : 1;            /*!< [2..2] FFIE0                                                              */
      __IOM uint32_t FOVIE0     : 1;            /*!< [3..3] FOVIE0                                                             */
      __IOM uint32_t FMPIE1     : 1;            /*!< [4..4] FMPIE1                                                             */
      __IOM uint32_t FFIE1      : 1;            /*!< [5..5] FFIE1                                                              */
      __IOM uint32_t FOVIE1     : 1;            /*!< [6..6] FOVIE1                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t EWGIE      : 1;            /*!< [8..8] EWGIE                                                              */
      __IOM uint32_t EPVIE      : 1;            /*!< [9..9] EPVIE                                                              */
      __IOM uint32_t BOFIE      : 1;            /*!< [10..10] BOFIE                                                            */
      __IOM uint32_t LECIE      : 1;            /*!< [11..11] LECIE                                                            */
      __IM  uint32_t            : 3;
      __IOM uint32_t ERRIE      : 1;            /*!< [15..15] ERRIE                                                            */
      __IOM uint32_t WKUIE      : 1;            /*!< [16..16] WKUIE                                                            */
      __IOM uint32_t SLKIE      : 1;            /*!< [17..17] SLKIE                                                            */
    } CAN_IER_b;
  } ;
  
  union {
    __IOM uint32_t CAN_ESR;                     /*!< (@ 0x00000018) CAN_ESR                                                    */
    
    struct {
      __IM  uint32_t EWGF       : 1;            /*!< [0..0] EWGF                                                               */
      __IM  uint32_t EPVF       : 1;            /*!< [1..1] EPVF                                                               */
      __IM  uint32_t BOFF       : 1;            /*!< [2..2] BOFF                                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t LEC        : 3;            /*!< [6..4] LEC                                                                */
      __IM  uint32_t            : 9;
      __IM  uint32_t TEC        : 8;            /*!< [23..16] TEC                                                              */
      __IM  uint32_t REC        : 8;            /*!< [31..24] REC                                                              */
    } CAN_ESR_b;
  } ;
  
  union {
    __IOM uint32_t CAN_BTR;                     /*!< (@ 0x0000001C) CAN_BTR                                                    */
    
    struct {
      __IOM uint32_t BRP        : 10;           /*!< [9..0] BRP                                                                */
      __IM  uint32_t            : 6;
      __IOM uint32_t TS1        : 4;            /*!< [19..16] TS1                                                              */
      __IOM uint32_t TS2        : 3;            /*!< [22..20] TS2                                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t SJW        : 2;            /*!< [25..24] SJW                                                              */
      __IM  uint32_t            : 4;
      __IOM uint32_t LBKM       : 1;            /*!< [30..30] LBKM                                                             */
      __IOM uint32_t SILM       : 1;            /*!< [31..31] SILM                                                             */
    } CAN_BTR_b;
  } ;
  __IM  uint32_t  RESERVED[88];
  
  union {
    __IOM uint32_t CAN_TI0R;                    /*!< (@ 0x00000180) CAN_TI0R                                                   */
    
    struct {
      __IOM uint32_t TXRQ       : 1;            /*!< [0..0] TXRQ                                                               */
      __IOM uint32_t RTR        : 1;            /*!< [1..1] RTR                                                                */
      __IOM uint32_t IDE        : 1;            /*!< [2..2] IDE                                                                */
      __IOM uint32_t EXID       : 18;           /*!< [20..3] EXID                                                              */
      __IOM uint32_t STID       : 11;           /*!< [31..21] STID                                                             */
    } CAN_TI0R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_TDT0R;                   /*!< (@ 0x00000184) CAN_TDT0R                                                  */
    
    struct {
      __IOM uint32_t DLC        : 4;            /*!< [3..0] DLC                                                                */
      __IM  uint32_t            : 4;
      __IOM uint32_t TGT        : 1;            /*!< [8..8] TGT                                                                */
      __IM  uint32_t            : 7;
      __IOM uint32_t TIME       : 16;           /*!< [31..16] TIME                                                             */
    } CAN_TDT0R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_TDL0R;                   /*!< (@ 0x00000188) CAN_TDL0R                                                  */
    
    struct {
      __IOM uint32_t DATA0      : 8;            /*!< [7..0] DATA0                                                              */
      __IOM uint32_t DATA1      : 8;            /*!< [15..8] DATA1                                                             */
      __IOM uint32_t DATA2      : 8;            /*!< [23..16] DATA2                                                            */
      __IOM uint32_t DATA3      : 8;            /*!< [31..24] DATA3                                                            */
    } CAN_TDL0R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_TDH0R;                   /*!< (@ 0x0000018C) CAN_TDH0R                                                  */
    
    struct {
      __IOM uint32_t DATA4      : 8;            /*!< [7..0] DATA4                                                              */
      __IOM uint32_t DATA5      : 8;            /*!< [15..8] DATA5                                                             */
      __IOM uint32_t DATA6      : 8;            /*!< [23..16] DATA6                                                            */
      __IOM uint32_t DATA7      : 8;            /*!< [31..24] DATA7                                                            */
    } CAN_TDH0R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_TI1R;                    /*!< (@ 0x00000190) CAN_TI1R                                                   */
    
    struct {
      __IOM uint32_t TXRQ       : 1;            /*!< [0..0] TXRQ                                                               */
      __IOM uint32_t RTR        : 1;            /*!< [1..1] RTR                                                                */
      __IOM uint32_t IDE        : 1;            /*!< [2..2] IDE                                                                */
      __IOM uint32_t EXID       : 18;           /*!< [20..3] EXID                                                              */
      __IOM uint32_t STID       : 11;           /*!< [31..21] STID                                                             */
    } CAN_TI1R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_TDT1R;                   /*!< (@ 0x00000194) CAN_TDT1R                                                  */
    
    struct {
      __IOM uint32_t DLC        : 4;            /*!< [3..0] DLC                                                                */
      __IM  uint32_t            : 4;
      __IOM uint32_t TGT        : 1;            /*!< [8..8] TGT                                                                */
      __IM  uint32_t            : 7;
      __IOM uint32_t TIME       : 16;           /*!< [31..16] TIME                                                             */
    } CAN_TDT1R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_TDL1R;                   /*!< (@ 0x00000198) CAN_TDL1R                                                  */
    
    struct {
      __IOM uint32_t DATA0      : 8;            /*!< [7..0] DATA0                                                              */
      __IOM uint32_t DATA1      : 8;            /*!< [15..8] DATA1                                                             */
      __IOM uint32_t DATA2      : 8;            /*!< [23..16] DATA2                                                            */
      __IOM uint32_t DATA3      : 8;            /*!< [31..24] DATA3                                                            */
    } CAN_TDL1R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_TDH1R;                   /*!< (@ 0x0000019C) CAN_TDH1R                                                  */
    
    struct {
      __IOM uint32_t DATA4      : 8;            /*!< [7..0] DATA4                                                              */
      __IOM uint32_t DATA5      : 8;            /*!< [15..8] DATA5                                                             */
      __IOM uint32_t DATA6      : 8;            /*!< [23..16] DATA6                                                            */
      __IOM uint32_t DATA7      : 8;            /*!< [31..24] DATA7                                                            */
    } CAN_TDH1R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_TI2R;                    /*!< (@ 0x000001A0) CAN_TI2R                                                   */
    
    struct {
      __IOM uint32_t TXRQ       : 1;            /*!< [0..0] TXRQ                                                               */
      __IOM uint32_t RTR        : 1;            /*!< [1..1] RTR                                                                */
      __IOM uint32_t IDE        : 1;            /*!< [2..2] IDE                                                                */
      __IOM uint32_t EXID       : 18;           /*!< [20..3] EXID                                                              */
      __IOM uint32_t STID       : 11;           /*!< [31..21] STID                                                             */
    } CAN_TI2R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_TDT2R;                   /*!< (@ 0x000001A4) CAN_TDT2R                                                  */
    
    struct {
      __IOM uint32_t DLC        : 4;            /*!< [3..0] DLC                                                                */
      __IM  uint32_t            : 4;
      __IOM uint32_t TGT        : 1;            /*!< [8..8] TGT                                                                */
      __IM  uint32_t            : 7;
      __IOM uint32_t TIME       : 16;           /*!< [31..16] TIME                                                             */
    } CAN_TDT2R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_TDL2R;                   /*!< (@ 0x000001A8) CAN_TDL2R                                                  */
    
    struct {
      __IOM uint32_t DATA0      : 8;            /*!< [7..0] DATA0                                                              */
      __IOM uint32_t DATA1      : 8;            /*!< [15..8] DATA1                                                             */
      __IOM uint32_t DATA2      : 8;            /*!< [23..16] DATA2                                                            */
      __IOM uint32_t DATA3      : 8;            /*!< [31..24] DATA3                                                            */
    } CAN_TDL2R_b;
  } ;
  
  union {
    __IOM uint32_t CAN_TDH2R;                   /*!< (@ 0x000001AC) CAN_TDH2R                                                  */
    
    struct {
      __IOM uint32_t DATA4      : 8;            /*!< [7..0] DATA4                                                              */
      __IOM uint32_t DATA5      : 8;            /*!< [15..8] DATA5                                                             */
      __IOM uint32_t DATA6      : 8;            /*!< [23..16] DATA6                                                            */
      __IOM uint32_t DATA7      : 8;            /*!< [31..24] DATA7                                                            */
    } CAN_TDH2R_b;
  } ;
  
  union {
    __IM  uint32_t CAN_RI0R;                    /*!< (@ 0x000001B0) CAN_RI0R                                                   */
    
    struct {
      __IM  uint32_t            : 1;
      __IM  uint32_t RTR        : 1;            /*!< [1..1] RTR                                                                */
      __IM  uint32_t IDE        : 1;            /*!< [2..2] IDE                                                                */
      __IM  uint32_t EXID       : 18;           /*!< [20..3] EXID                                                              */
      __IM  uint32_t STID       : 11;           /*!< [31..21] STID                                                             */
    } CAN_RI0R_b;
  } ;
  
  union {
    __IM  uint32_t CAN_RDT0R;                   /*!< (@ 0x000001B4) CAN_RDT0R                                                  */
    
    struct {
      __IM  uint32_t DLC        : 4;            /*!< [3..0] DLC                                                                */
      __IM  uint32_t            : 4;
      __IM  uint32_t FMI        : 8;            /*!< [15..8] FMI                                                               */
      __IM  uint32_t TIME       : 16;           /*!< [31..16] TIME                                                             */
    } CAN_RDT0R_b;
  } ;
  
  union {
    __IM  uint32_t CAN_RDL0R;                   /*!< (@ 0x000001B8) CAN_RDL0R                                                  */
    
    struct {
      __IM  uint32_t DATA0      : 8;            /*!< [7..0] DATA0                                                              */
      __IM  uint32_t DATA1      : 8;            /*!< [15..8] DATA1                                                             */
      __IM  uint32_t DATA2      : 8;            /*!< [23..16] DATA2                                                            */
      __IM  uint32_t DATA3      : 8;            /*!< [31..24] DATA3                                                            */
    } CAN_RDL0R_b;
  } ;
  
  union {
    __IM  uint32_t CAN_RDH0R;                   /*!< (@ 0x000001BC) CAN_RDH0R                                                  */
    
    struct {
      __IM  uint32_t DATA4      : 8;            /*!< [7..0] DATA4                                                              */
      __IM  uint32_t DATA5      : 8;            /*!< [15..8] DATA5                                                             */
      __IM  uint32_t DATA6      : 8;            /*!< [23..16] DATA6                                                            */
      __IM  uint32_t DATA7      : 8;            /*!< [31..24] DATA7                                                            */
    } CAN_RDH0R_b;
  } ;
  
  union {
    __IM  uint32_t CAN_RI1R;                    /*!< (@ 0x000001C0) CAN_RI1R                                                   */
    
    struct {
      __IM  uint32_t            : 1;
      __IM  uint32_t RTR        : 1;            /*!< [1..1] RTR                                                                */
      __IM  uint32_t IDE        : 1;            /*!< [2..2] IDE                                                                */
      __IM  uint32_t EXID       : 18;           /*!< [20..3] EXID                                                              */
      __IM  uint32_t STID       : 11;           /*!< [31..21] STID                                                             */
    } CAN_RI1R_b;
  } ;
  
  union {
    __IM  uint32_t CAN_RDT1R;                   /*!< (@ 0x000001C4) CAN_RDT1R                                                  */
    
    struct {
      __IM  uint32_t DLC        : 4;            /*!< [3..0] DLC                                                                */
      __IM  uint32_t            : 4;
      __IM  uint32_t FMI        : 8;            /*!< [15..8] FMI                                                               */
      __IM  uint32_t TIME       : 16;           /*!< [31..16] TIME                                                             */
    } CAN_RDT1R_b;
  } ;
  
  union {
    __IM  uint32_t CAN_RDL1R;                   /*!< (@ 0x000001C8) CAN_RDL1R                                                  */
    
    struct {
      __IM  uint32_t DATA0      : 8;            /*!< [7..0] DATA0                                                              */
      __IM  uint32_t DATA1      : 8;            /*!< [15..8] DATA1                                                             */
      __IM  uint32_t DATA2      : 8;            /*!< [23..16] DATA2                                                            */
      __IM  uint32_t DATA3      : 8;            /*!< [31..24] DATA3                                                            */
    } CAN_RDL1R_b;
  } ;
  
  union {
    __IM  uint32_t CAN_RDH1R;                   /*!< (@ 0x000001CC) CAN_RDH1R                                                  */
    
    struct {
      __IM  uint32_t DATA4      : 8;            /*!< [7..0] DATA4                                                              */
      __IM  uint32_t DATA5      : 8;            /*!< [15..8] DATA5                                                             */
      __IM  uint32_t DATA6      : 8;            /*!< [23..16] DATA6                                                            */
      __IM  uint32_t DATA7      : 8;            /*!< [31..24] DATA7                                                            */
    } CAN_RDH1R_b;
  } ;
  __IM  uint32_t  RESERVED1[12];
  
  union {
    __IOM uint32_t CAN_FMR;                     /*!< (@ 0x00000200) CAN_FMR                                                    */
    
    struct {
      __IOM uint32_t FINIT      : 1;            /*!< [0..0] FINIT                                                              */
      __IM  uint32_t            : 7;
      __IOM uint32_t CAN2SB     : 6;            /*!< [13..8] CAN2SB                                                            */
    } CAN_FMR_b;
  } ;
  
  union {
    __IOM uint32_t CAN_FM1R;                    /*!< (@ 0x00000204) CAN_FM1R                                                   */
    
    struct {
      __IOM uint32_t FBM0       : 1;            /*!< [0..0] Filter mode                                                        */
      __IOM uint32_t FBM1       : 1;            /*!< [1..1] Filter mode                                                        */
      __IOM uint32_t FBM2       : 1;            /*!< [2..2] Filter mode                                                        */
      __IOM uint32_t FBM3       : 1;            /*!< [3..3] Filter mode                                                        */
      __IOM uint32_t FBM4       : 1;            /*!< [4..4] Filter mode                                                        */
      __IOM uint32_t FBM5       : 1;            /*!< [5..5] Filter mode                                                        */
      __IOM uint32_t FBM6       : 1;            /*!< [6..6] Filter mode                                                        */
      __IOM uint32_t FBM7       : 1;            /*!< [7..7] Filter mode                                                        */
      __IOM uint32_t FBM8       : 1;            /*!< [8..8] Filter mode                                                        */
      __IOM uint32_t FBM9       : 1;            /*!< [9..9] Filter mode                                                        */
      __IOM uint32_t FBM10      : 1;            /*!< [10..10] Filter mode                                                      */
      __IOM uint32_t FBM11      : 1;            /*!< [11..11] Filter mode                                                      */
      __IOM uint32_t FBM12      : 1;            /*!< [12..12] Filter mode                                                      */
      __IOM uint32_t FBM13      : 1;            /*!< [13..13] Filter mode                                                      */
      __IOM uint32_t FBM14      : 1;            /*!< [14..14] Filter mode                                                      */
      __IOM uint32_t FBM15      : 1;            /*!< [15..15] Filter mode                                                      */
      __IOM uint32_t FBM16      : 1;            /*!< [16..16] Filter mode                                                      */
      __IOM uint32_t FBM17      : 1;            /*!< [17..17] Filter mode                                                      */
      __IOM uint32_t FBM18      : 1;            /*!< [18..18] Filter mode                                                      */
      __IOM uint32_t FBM19      : 1;            /*!< [19..19] Filter mode                                                      */
      __IOM uint32_t FBM20      : 1;            /*!< [20..20] Filter mode                                                      */
      __IOM uint32_t FBM21      : 1;            /*!< [21..21] Filter mode                                                      */
      __IOM uint32_t FBM22      : 1;            /*!< [22..22] Filter mode                                                      */
      __IOM uint32_t FBM23      : 1;            /*!< [23..23] Filter mode                                                      */
      __IOM uint32_t FBM24      : 1;            /*!< [24..24] Filter mode                                                      */
      __IOM uint32_t FBM25      : 1;            /*!< [25..25] Filter mode                                                      */
      __IOM uint32_t FBM26      : 1;            /*!< [26..26] Filter mode                                                      */
      __IOM uint32_t FBM27      : 1;            /*!< [27..27] Filter mode                                                      */
    } CAN_FM1R_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t CAN_FS1R;                    /*!< (@ 0x0000020C) CAN_FS1R                                                   */
    
    struct {
      __IOM uint32_t FSC0       : 1;            /*!< [0..0] Filter scale configuration                                         */
      __IOM uint32_t FSC1       : 1;            /*!< [1..1] Filter scale configuration                                         */
      __IOM uint32_t FSC2       : 1;            /*!< [2..2] Filter scale configuration                                         */
      __IOM uint32_t FSC3       : 1;            /*!< [3..3] Filter scale configuration                                         */
      __IOM uint32_t FSC4       : 1;            /*!< [4..4] Filter scale configuration                                         */
      __IOM uint32_t FSC5       : 1;            /*!< [5..5] Filter scale configuration                                         */
      __IOM uint32_t FSC6       : 1;            /*!< [6..6] Filter scale configuration                                         */
      __IOM uint32_t FSC7       : 1;            /*!< [7..7] Filter scale configuration                                         */
      __IOM uint32_t FSC8       : 1;            /*!< [8..8] Filter scale configuration                                         */
      __IOM uint32_t FSC9       : 1;            /*!< [9..9] Filter scale configuration                                         */
      __IOM uint32_t FSC10      : 1;            /*!< [10..10] Filter scale configuration                                       */
      __IOM uint32_t FSC11      : 1;            /*!< [11..11] Filter scale configuration                                       */
      __IOM uint32_t FSC12      : 1;            /*!< [12..12] Filter scale configuration                                       */
      __IOM uint32_t FSC13      : 1;            /*!< [13..13] Filter scale configuration                                       */
      __IOM uint32_t FSC14      : 1;            /*!< [14..14] Filter scale configuration                                       */
      __IOM uint32_t FSC15      : 1;            /*!< [15..15] Filter scale configuration                                       */
      __IOM uint32_t FSC16      : 1;            /*!< [16..16] Filter scale configuration                                       */
      __IOM uint32_t FSC17      : 1;            /*!< [17..17] Filter scale configuration                                       */
      __IOM uint32_t FSC18      : 1;            /*!< [18..18] Filter scale configuration                                       */
      __IOM uint32_t FSC19      : 1;            /*!< [19..19] Filter scale configuration                                       */
      __IOM uint32_t FSC20      : 1;            /*!< [20..20] Filter scale configuration                                       */
      __IOM uint32_t FSC21      : 1;            /*!< [21..21] Filter scale configuration                                       */
      __IOM uint32_t FSC22      : 1;            /*!< [22..22] Filter scale configuration                                       */
      __IOM uint32_t FSC23      : 1;            /*!< [23..23] Filter scale configuration                                       */
      __IOM uint32_t FSC24      : 1;            /*!< [24..24] Filter scale configuration                                       */
      __IOM uint32_t FSC25      : 1;            /*!< [25..25] Filter scale configuration                                       */
      __IOM uint32_t FSC26      : 1;            /*!< [26..26] Filter scale configuration                                       */
      __IOM uint32_t FSC27      : 1;            /*!< [27..27] Filter scale configuration                                       */
    } CAN_FS1R_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t CAN_FFA1R;                   /*!< (@ 0x00000214) CAN_FFA1R                                                  */
    
    struct {
      __IOM uint32_t FFA0       : 1;            /*!< [0..0] Filter FIFO assignment for filter 0                                */
      __IOM uint32_t FFA1       : 1;            /*!< [1..1] Filter FIFO assignment for filter 1                                */
      __IOM uint32_t FFA2       : 1;            /*!< [2..2] Filter FIFO assignment for filter 2                                */
      __IOM uint32_t FFA3       : 1;            /*!< [3..3] Filter FIFO assignment for filter 3                                */
      __IOM uint32_t FFA4       : 1;            /*!< [4..4] Filter FIFO assignment for filter 4                                */
      __IOM uint32_t FFA5       : 1;            /*!< [5..5] Filter FIFO assignment for filter 5                                */
      __IOM uint32_t FFA6       : 1;            /*!< [6..6] Filter FIFO assignment for filter 6                                */
      __IOM uint32_t FFA7       : 1;            /*!< [7..7] Filter FIFO assignment for filter 7                                */
      __IOM uint32_t FFA8       : 1;            /*!< [8..8] Filter FIFO assignment for filter 8                                */
      __IOM uint32_t FFA9       : 1;            /*!< [9..9] Filter FIFO assignment for filter 9                                */
      __IOM uint32_t FFA10      : 1;            /*!< [10..10] Filter FIFO assignment for filter 10                             */
      __IOM uint32_t FFA11      : 1;            /*!< [11..11] Filter FIFO assignment for filter 11                             */
      __IOM uint32_t FFA12      : 1;            /*!< [12..12] Filter FIFO assignment for filter 12                             */
      __IOM uint32_t FFA13      : 1;            /*!< [13..13] Filter FIFO assignment for filter 13                             */
      __IOM uint32_t FFA14      : 1;            /*!< [14..14] Filter FIFO assignment for filter 14                             */
      __IOM uint32_t FFA15      : 1;            /*!< [15..15] Filter FIFO assignment for filter 15                             */
      __IOM uint32_t FFA16      : 1;            /*!< [16..16] Filter FIFO assignment for filter 16                             */
      __IOM uint32_t FFA17      : 1;            /*!< [17..17] Filter FIFO assignment for filter 17                             */
      __IOM uint32_t FFA18      : 1;            /*!< [18..18] Filter FIFO assignment for filter 18                             */
      __IOM uint32_t FFA19      : 1;            /*!< [19..19] Filter FIFO assignment for filter 19                             */
      __IOM uint32_t FFA20      : 1;            /*!< [20..20] Filter FIFO assignment for filter 20                             */
      __IOM uint32_t FFA21      : 1;            /*!< [21..21] Filter FIFO assignment for filter 21                             */
      __IOM uint32_t FFA22      : 1;            /*!< [22..22] Filter FIFO assignment for filter 22                             */
      __IOM uint32_t FFA23      : 1;            /*!< [23..23] Filter FIFO assignment for filter 23                             */
      __IOM uint32_t FFA24      : 1;            /*!< [24..24] Filter FIFO assignment for filter 24                             */
      __IOM uint32_t FFA25      : 1;            /*!< [25..25] Filter FIFO assignment for filter 25                             */
      __IOM uint32_t FFA26      : 1;            /*!< [26..26] Filter FIFO assignment for filter 26                             */
      __IOM uint32_t FFA27      : 1;            /*!< [27..27] Filter FIFO assignment for filter 27                             */
    } CAN_FFA1R_b;
  } ;
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t CAN_FA1R;                    /*!< (@ 0x0000021C) CAN_FA1R                                                   */
    
    struct {
      __IOM uint32_t FACT0      : 1;            /*!< [0..0] Filter active                                                      */
      __IOM uint32_t FACT1      : 1;            /*!< [1..1] Filter active                                                      */
      __IOM uint32_t FACT2      : 1;            /*!< [2..2] Filter active                                                      */
      __IOM uint32_t FACT3      : 1;            /*!< [3..3] Filter active                                                      */
      __IOM uint32_t FACT4      : 1;            /*!< [4..4] Filter active                                                      */
      __IOM uint32_t FACT5      : 1;            /*!< [5..5] Filter active                                                      */
      __IOM uint32_t FACT6      : 1;            /*!< [6..6] Filter active                                                      */
      __IOM uint32_t FACT7      : 1;            /*!< [7..7] Filter active                                                      */
      __IOM uint32_t FACT8      : 1;            /*!< [8..8] Filter active                                                      */
      __IOM uint32_t FACT9      : 1;            /*!< [9..9] Filter active                                                      */
      __IOM uint32_t FACT10     : 1;            /*!< [10..10] Filter active                                                    */
      __IOM uint32_t FACT11     : 1;            /*!< [11..11] Filter active                                                    */
      __IOM uint32_t FACT12     : 1;            /*!< [12..12] Filter active                                                    */
      __IOM uint32_t FACT13     : 1;            /*!< [13..13] Filter active                                                    */
      __IOM uint32_t FACT14     : 1;            /*!< [14..14] Filter active                                                    */
      __IOM uint32_t FACT15     : 1;            /*!< [15..15] Filter active                                                    */
      __IOM uint32_t FACT16     : 1;            /*!< [16..16] Filter active                                                    */
      __IOM uint32_t FACT17     : 1;            /*!< [17..17] Filter active                                                    */
      __IOM uint32_t FACT18     : 1;            /*!< [18..18] Filter active                                                    */
      __IOM uint32_t FACT19     : 1;            /*!< [19..19] Filter active                                                    */
      __IOM uint32_t FACT20     : 1;            /*!< [20..20] Filter active                                                    */
      __IOM uint32_t FACT21     : 1;            /*!< [21..21] Filter active                                                    */
      __IOM uint32_t FACT22     : 1;            /*!< [22..22] Filter active                                                    */
      __IOM uint32_t FACT23     : 1;            /*!< [23..23] Filter active                                                    */
      __IOM uint32_t FACT24     : 1;            /*!< [24..24] Filter active                                                    */
      __IOM uint32_t FACT25     : 1;            /*!< [25..25] Filter active                                                    */
      __IOM uint32_t FACT26     : 1;            /*!< [26..26] Filter active                                                    */
      __IOM uint32_t FACT27     : 1;            /*!< [27..27] Filter active                                                    */
    } CAN_FA1R_b;
  } ;
  __IM  uint32_t  RESERVED5[8];
  
  union {
    __IOM uint32_t F0R1;                        /*!< (@ 0x00000240) Filter bank 0 register 1                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F0R1_b;
  } ;
  
  union {
    __IOM uint32_t F0R2;                        /*!< (@ 0x00000244) Filter bank 0 register 2                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F0R2_b;
  } ;
  
  union {
    __IOM uint32_t F1R1;                        /*!< (@ 0x00000248) Filter bank 1 register 1                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F1R1_b;
  } ;
  
  union {
    __IOM uint32_t F1R2;                        /*!< (@ 0x0000024C) Filter bank 1 register 2                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F1R2_b;
  } ;
  
  union {
    __IOM uint32_t F2R1;                        /*!< (@ 0x00000250) Filter bank 2 register 1                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F2R1_b;
  } ;
  
  union {
    __IOM uint32_t F2R2;                        /*!< (@ 0x00000254) Filter bank 2 register 2                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F2R2_b;
  } ;
  
  union {
    __IOM uint32_t F3R1;                        /*!< (@ 0x00000258) Filter bank 3 register 1                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F3R1_b;
  } ;
  
  union {
    __IOM uint32_t F3R2;                        /*!< (@ 0x0000025C) Filter bank 3 register 2                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F3R2_b;
  } ;
  
  union {
    __IOM uint32_t F4R1;                        /*!< (@ 0x00000260) Filter bank 4 register 1                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F4R1_b;
  } ;
  
  union {
    __IOM uint32_t F4R2;                        /*!< (@ 0x00000264) Filter bank 4 register 2                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F4R2_b;
  } ;
  
  union {
    __IOM uint32_t F5R1;                        /*!< (@ 0x00000268) Filter bank 5 register 1                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F5R1_b;
  } ;
  
  union {
    __IOM uint32_t F5R2;                        /*!< (@ 0x0000026C) Filter bank 5 register 2                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F5R2_b;
  } ;
  
  union {
    __IOM uint32_t F6R1;                        /*!< (@ 0x00000270) Filter bank 6 register 1                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F6R1_b;
  } ;
  
  union {
    __IOM uint32_t F6R2;                        /*!< (@ 0x00000274) Filter bank 6 register 2                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F6R2_b;
  } ;
  
  union {
    __IOM uint32_t F7R1;                        /*!< (@ 0x00000278) Filter bank 7 register 1                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F7R1_b;
  } ;
  
  union {
    __IOM uint32_t F7R2;                        /*!< (@ 0x0000027C) Filter bank 7 register 2                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F7R2_b;
  } ;
  
  union {
    __IOM uint32_t F8R1;                        /*!< (@ 0x00000280) Filter bank 8 register 1                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F8R1_b;
  } ;
  
  union {
    __IOM uint32_t F8R2;                        /*!< (@ 0x00000284) Filter bank 8 register 2                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F8R2_b;
  } ;
  
  union {
    __IOM uint32_t F9R1;                        /*!< (@ 0x00000288) Filter bank 9 register 1                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F9R1_b;
  } ;
  
  union {
    __IOM uint32_t F9R2;                        /*!< (@ 0x0000028C) Filter bank 9 register 2                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F9R2_b;
  } ;
  
  union {
    __IOM uint32_t F10R1;                       /*!< (@ 0x00000290) Filter bank 10 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F10R1_b;
  } ;
  
  union {
    __IOM uint32_t F10R2;                       /*!< (@ 0x00000294) Filter bank 10 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F10R2_b;
  } ;
  
  union {
    __IOM uint32_t F11R1;                       /*!< (@ 0x00000298) Filter bank 11 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F11R1_b;
  } ;
  
  union {
    __IOM uint32_t F11R2;                       /*!< (@ 0x0000029C) Filter bank 11 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F11R2_b;
  } ;
  
  union {
    __IOM uint32_t F12R1;                       /*!< (@ 0x000002A0) Filter bank 4 register 1                                   */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F12R1_b;
  } ;
  
  union {
    __IOM uint32_t F12R2;                       /*!< (@ 0x000002A4) Filter bank 12 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F12R2_b;
  } ;
  
  union {
    __IOM uint32_t F13R1;                       /*!< (@ 0x000002A8) Filter bank 13 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F13R1_b;
  } ;
  
  union {
    __IOM uint32_t F13R2;                       /*!< (@ 0x000002AC) Filter bank 13 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F13R2_b;
  } ;
  
  union {
    __IOM uint32_t F14R1;                       /*!< (@ 0x000002B0) Filter bank 14 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F14R1_b;
  } ;
  
  union {
    __IOM uint32_t F14R2;                       /*!< (@ 0x000002B4) Filter bank 14 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F14R2_b;
  } ;
  
  union {
    __IOM uint32_t F15R1;                       /*!< (@ 0x000002B8) Filter bank 15 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F15R1_b;
  } ;
  
  union {
    __IOM uint32_t F15R2;                       /*!< (@ 0x000002BC) Filter bank 15 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F15R2_b;
  } ;
  
  union {
    __IOM uint32_t F16R1;                       /*!< (@ 0x000002C0) Filter bank 16 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F16R1_b;
  } ;
  
  union {
    __IOM uint32_t F16R2;                       /*!< (@ 0x000002C4) Filter bank 16 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F16R2_b;
  } ;
  
  union {
    __IOM uint32_t F17R1;                       /*!< (@ 0x000002C8) Filter bank 17 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F17R1_b;
  } ;
  
  union {
    __IOM uint32_t F17R2;                       /*!< (@ 0x000002CC) Filter bank 17 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F17R2_b;
  } ;
  
  union {
    __IOM uint32_t F18R1;                       /*!< (@ 0x000002D0) Filter bank 18 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F18R1_b;
  } ;
  
  union {
    __IOM uint32_t F18R2;                       /*!< (@ 0x000002D4) Filter bank 18 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F18R2_b;
  } ;
  
  union {
    __IOM uint32_t F19R1;                       /*!< (@ 0x000002D8) Filter bank 19 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F19R1_b;
  } ;
  
  union {
    __IOM uint32_t F19R2;                       /*!< (@ 0x000002DC) Filter bank 19 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F19R2_b;
  } ;
  
  union {
    __IOM uint32_t F20R1;                       /*!< (@ 0x000002E0) Filter bank 20 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F20R1_b;
  } ;
  
  union {
    __IOM uint32_t F20R2;                       /*!< (@ 0x000002E4) Filter bank 20 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F20R2_b;
  } ;
  
  union {
    __IOM uint32_t F21R1;                       /*!< (@ 0x000002E8) Filter bank 21 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F21R1_b;
  } ;
  
  union {
    __IOM uint32_t F21R2;                       /*!< (@ 0x000002EC) Filter bank 21 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F21R2_b;
  } ;
  
  union {
    __IOM uint32_t F22R1;                       /*!< (@ 0x000002F0) Filter bank 22 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F22R1_b;
  } ;
  
  union {
    __IOM uint32_t F22R2;                       /*!< (@ 0x000002F4) Filter bank 22 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F22R2_b;
  } ;
  
  union {
    __IOM uint32_t F23R1;                       /*!< (@ 0x000002F8) Filter bank 23 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F23R1_b;
  } ;
  
  union {
    __IOM uint32_t F23R2;                       /*!< (@ 0x000002FC) Filter bank 23 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F23R2_b;
  } ;
  
  union {
    __IOM uint32_t F24R1;                       /*!< (@ 0x00000300) Filter bank 24 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F24R1_b;
  } ;
  
  union {
    __IOM uint32_t F24R2;                       /*!< (@ 0x00000304) Filter bank 24 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F24R2_b;
  } ;
  
  union {
    __IOM uint32_t F25R1;                       /*!< (@ 0x00000308) Filter bank 25 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F25R1_b;
  } ;
  
  union {
    __IOM uint32_t F25R2;                       /*!< (@ 0x0000030C) Filter bank 25 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F25R2_b;
  } ;
  
  union {
    __IOM uint32_t F26R1;                       /*!< (@ 0x00000310) Filter bank 26 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F26R1_b;
  } ;
  
  union {
    __IOM uint32_t F26R2;                       /*!< (@ 0x00000314) Filter bank 26 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F26R2_b;
  } ;
  
  union {
    __IOM uint32_t F27R1;                       /*!< (@ 0x00000318) Filter bank 27 register 1                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F27R1_b;
  } ;
  
  union {
    __IOM uint32_t F27R2;                       /*!< (@ 0x0000031C) Filter bank 27 register 2                                  */
    
    struct {
      __IOM uint32_t FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32_t FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32_t FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32_t FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32_t FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32_t FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32_t FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32_t FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32_t FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32_t FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32_t FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32_t FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32_t FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32_t FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32_t FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32_t FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32_t FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32_t FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32_t FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32_t FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32_t FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32_t FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32_t FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32_t FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32_t FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32_t FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32_t FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32_t FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32_t FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32_t FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32_t FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32_t FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } F27R2_b;
  } ;
} CAN_Type;                                     /*!< Size = 800 (0x320)                                                        */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define CRC_BASE                    0x40023000UL
#define GPIOF_BASE                  0x48001400UL
#define GPIOC_BASE                  0x48000800UL
#define GPIOB_BASE                  0x48000400UL
#define GPIOA_BASE                  0x48000000UL
#define SPI1_BASE                   0x40013000UL
#define SPI2_BASE                   0x40003800UL
#define PWR_BASE                    0x40007000UL
#define I2C1_BASE                   0x40005400UL
#define IWDG_BASE                   0x40003000UL
#define WWDG_BASE                   0x40002C00UL
#define TIM1_BASE                   0x40012C00UL
#define TIM2_BASE                   0x40000000UL
#define TIM3_BASE                   0x40000400UL
#define TIM14_BASE                  0x40002000UL
#define EXTI_BASE                   0x40010400UL
#define NVIC_BASE                   0xE000E100UL
#define DMA_BASE                    0x40020000UL
#define RCC_BASE                    0x40021000UL
#define SYSCFG_BASE                 0x40010000UL
#define ADC_BASE                    0x40012400UL
#define USART1_BASE                 0x40013800UL
#define USART2_BASE                 0x40004400UL
#define COMP_BASE                   0x4001001CUL
#define RTC_BASE                    0x40002800UL
#define TIM16_BASE                  0x40014400UL
#define TIM17_BASE                  0x40014800UL
#define TSC_BASE                    0x40024000UL
#define CEC_BASE                    0x40007800UL
#define Flash_BASE                  0x40022000UL
#define DBGMCU_BASE                 0x40015800UL
#define USB_BASE                    0x40005C00UL
#define CRS_BASE                    0x40006C00UL
#define CAN_BASE                    0x40006400UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

/* #define CRC                         ((CRC_Type*)               CRC_BASE) */
#define GPIOF                       ((GPIOF_Type*)             GPIOF_BASE)
#define GPIOC                       ((GPIOF_Type*)             GPIOC_BASE)
#define GPIOB                       ((GPIOF_Type*)             GPIOB_BASE)
#define GPIOA                       ((GPIOA_Type*)             GPIOA_BASE)
#define I2C1                        ((I2C1_Type*)              I2C1_BASE)
#define TIM2                        ((TIM2_Type*)              TIM2_BASE)
#define USART2                      ((USART1_Type*)            USART2_BASE)
#define NVIC                        ((NVIC_Type*)              NVIC_BASE)
/* #define SPI1                        ((SPI1_Type*)              SPI1_BASE) */
/* #define SPI2                        ((SPI1_Type*)              SPI2_BASE) */
/* #define PWR                         ((PWR_Type*)               PWR_BASE) */
/* #define IWDG                        ((IWDG_Type*)              IWDG_BASE) */
/* #define WWDG                        ((WWDG_Type*)              WWDG_BASE) */
/* #define TIM1                        ((TIM1_Type*)              TIM1_BASE) */
/* #define TIM3                        ((TIM2_Type*)              TIM3_BASE) */
/* #define TIM14                       ((TIM14_Type*)             TIM14_BASE) */
/* #define EXTI                        ((EXTI_Type*)              EXTI_BASE) */
/* #define DMA                         ((DMA_Type*)               DMA_BASE) */
/* #define RCC                         ((RCC_Type*)               RCC_BASE) */
/* #define SYSCFG                      ((SYSCFG_Type*)            SYSCFG_BASE) */
/* #define ADC                         ((ADC_Type*)               ADC_BASE) */
/* #define USART1                      ((USART1_Type*)            USART1_BASE) */
/* #define COMP                        ((COMP_Type*)              COMP_BASE) */
/* #define RTC                         ((RTC_Type*)               RTC_BASE) */
/* #define TIM16                       ((TIM16_Type*)             TIM16_BASE) */
/* #define TIM17                       ((TIM16_Type*)             TIM17_BASE) */
/* #define TSC                         ((TSC_Type*)               TSC_BASE) */
/* #define CEC                         ((CEC_Type*)               CEC_BASE) */
/* #define Flash                       ((Flash_Type*)             Flash_BASE) */
/* #define DBGMCU                      ((DBGMCU_Type*)            DBGMCU_BASE) */
/* #define USB                         ((USB_Type*)               USB_BASE) */
/* #define CRS                         ((CRS_Type*)               CRS_BASE) */
/* #define CAN                         ((CAN_Type*)               CAN_BASE) */

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif

#endif /* STM32F042X_H */


/** @} */ /* End of group STM32F042x */

/** @} */ /* End of group  */
